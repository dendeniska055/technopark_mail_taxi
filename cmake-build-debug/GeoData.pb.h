// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GeoData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GeoData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GeoData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GeoData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GeoData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GeoData_2eproto;
namespace MailTaxi {
class Coordinate;
class CoordinateDefaultTypeInternal;
extern CoordinateDefaultTypeInternal _Coordinate_default_instance_;
class OrderLocationData;
class OrderLocationDataDefaultTypeInternal;
extern OrderLocationDataDefaultTypeInternal _OrderLocationData_default_instance_;
}  // namespace MailTaxi
PROTOBUF_NAMESPACE_OPEN
template<> ::MailTaxi::Coordinate* Arena::CreateMaybeMessage<::MailTaxi::Coordinate>(Arena*);
template<> ::MailTaxi::OrderLocationData* Arena::CreateMaybeMessage<::MailTaxi::OrderLocationData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MailTaxi {

// ===================================================================

class Coordinate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.Coordinate) */ {
 public:
  inline Coordinate() : Coordinate(nullptr) {}
  virtual ~Coordinate();

  Coordinate(const Coordinate& from);
  Coordinate(Coordinate&& from) noexcept
    : Coordinate() {
    *this = ::std::move(from);
  }

  inline Coordinate& operator=(const Coordinate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinate& operator=(Coordinate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Coordinate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Coordinate* internal_default_instance() {
    return reinterpret_cast<const Coordinate*>(
               &_Coordinate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Coordinate& a, Coordinate& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coordinate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Coordinate* New() const final {
    return CreateMaybeMessage<Coordinate>(nullptr);
  }

  Coordinate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Coordinate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Coordinate& from);
  void MergeFrom(const Coordinate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.Coordinate";
  }
  protected:
  explicit Coordinate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GeoData_2eproto);
    return ::descriptor_table_GeoData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
  };
  // double latitude = 1;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 2;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:MailTaxi.Coordinate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double latitude_;
  double longitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GeoData_2eproto;
};
// -------------------------------------------------------------------

class OrderLocationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.OrderLocationData) */ {
 public:
  inline OrderLocationData() : OrderLocationData(nullptr) {}
  virtual ~OrderLocationData();

  OrderLocationData(const OrderLocationData& from);
  OrderLocationData(OrderLocationData&& from) noexcept
    : OrderLocationData() {
    *this = ::std::move(from);
  }

  inline OrderLocationData& operator=(const OrderLocationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderLocationData& operator=(OrderLocationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderLocationData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderLocationData* internal_default_instance() {
    return reinterpret_cast<const OrderLocationData*>(
               &_OrderLocationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OrderLocationData& a, OrderLocationData& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderLocationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderLocationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderLocationData* New() const final {
    return CreateMaybeMessage<OrderLocationData>(nullptr);
  }

  OrderLocationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderLocationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderLocationData& from);
  void MergeFrom(const OrderLocationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderLocationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.OrderLocationData";
  }
  protected:
  explicit OrderLocationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GeoData_2eproto);
    return ::descriptor_table_GeoData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientAddressFieldNumber = 1,
    kDestinationAddressFieldNumber = 2,
  };
  // .MailTaxi.Coordinate clientAddress = 1;
  bool has_clientaddress() const;
  private:
  bool _internal_has_clientaddress() const;
  public:
  void clear_clientaddress();
  const ::MailTaxi::Coordinate& clientaddress() const;
  ::MailTaxi::Coordinate* release_clientaddress();
  ::MailTaxi::Coordinate* mutable_clientaddress();
  void set_allocated_clientaddress(::MailTaxi::Coordinate* clientaddress);
  private:
  const ::MailTaxi::Coordinate& _internal_clientaddress() const;
  ::MailTaxi::Coordinate* _internal_mutable_clientaddress();
  public:
  void unsafe_arena_set_allocated_clientaddress(
      ::MailTaxi::Coordinate* clientaddress);
  ::MailTaxi::Coordinate* unsafe_arena_release_clientaddress();

  // .MailTaxi.Coordinate DestinationAddress = 2;
  bool has_destinationaddress() const;
  private:
  bool _internal_has_destinationaddress() const;
  public:
  void clear_destinationaddress();
  const ::MailTaxi::Coordinate& destinationaddress() const;
  ::MailTaxi::Coordinate* release_destinationaddress();
  ::MailTaxi::Coordinate* mutable_destinationaddress();
  void set_allocated_destinationaddress(::MailTaxi::Coordinate* destinationaddress);
  private:
  const ::MailTaxi::Coordinate& _internal_destinationaddress() const;
  ::MailTaxi::Coordinate* _internal_mutable_destinationaddress();
  public:
  void unsafe_arena_set_allocated_destinationaddress(
      ::MailTaxi::Coordinate* destinationaddress);
  ::MailTaxi::Coordinate* unsafe_arena_release_destinationaddress();

  // @@protoc_insertion_point(class_scope:MailTaxi.OrderLocationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MailTaxi::Coordinate* clientaddress_;
  ::MailTaxi::Coordinate* destinationaddress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GeoData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Coordinate

// double latitude = 1;
inline void Coordinate::clear_latitude() {
  latitude_ = 0;
}
inline double Coordinate::_internal_latitude() const {
  return latitude_;
}
inline double Coordinate::latitude() const {
  // @@protoc_insertion_point(field_get:MailTaxi.Coordinate.latitude)
  return _internal_latitude();
}
inline void Coordinate::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void Coordinate::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:MailTaxi.Coordinate.latitude)
}

// double longitude = 2;
inline void Coordinate::clear_longitude() {
  longitude_ = 0;
}
inline double Coordinate::_internal_longitude() const {
  return longitude_;
}
inline double Coordinate::longitude() const {
  // @@protoc_insertion_point(field_get:MailTaxi.Coordinate.longitude)
  return _internal_longitude();
}
inline void Coordinate::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void Coordinate::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:MailTaxi.Coordinate.longitude)
}

// -------------------------------------------------------------------

// OrderLocationData

// .MailTaxi.Coordinate clientAddress = 1;
inline bool OrderLocationData::_internal_has_clientaddress() const {
  return this != internal_default_instance() && clientaddress_ != nullptr;
}
inline bool OrderLocationData::has_clientaddress() const {
  return _internal_has_clientaddress();
}
inline void OrderLocationData::clear_clientaddress() {
  if (GetArena() == nullptr && clientaddress_ != nullptr) {
    delete clientaddress_;
  }
  clientaddress_ = nullptr;
}
inline const ::MailTaxi::Coordinate& OrderLocationData::_internal_clientaddress() const {
  const ::MailTaxi::Coordinate* p = clientaddress_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MailTaxi::Coordinate*>(
      &::MailTaxi::_Coordinate_default_instance_);
}
inline const ::MailTaxi::Coordinate& OrderLocationData::clientaddress() const {
  // @@protoc_insertion_point(field_get:MailTaxi.OrderLocationData.clientAddress)
  return _internal_clientaddress();
}
inline void OrderLocationData::unsafe_arena_set_allocated_clientaddress(
    ::MailTaxi::Coordinate* clientaddress) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clientaddress_);
  }
  clientaddress_ = clientaddress;
  if (clientaddress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MailTaxi.OrderLocationData.clientAddress)
}
inline ::MailTaxi::Coordinate* OrderLocationData::release_clientaddress() {
  
  ::MailTaxi::Coordinate* temp = clientaddress_;
  clientaddress_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MailTaxi::Coordinate* OrderLocationData::unsafe_arena_release_clientaddress() {
  // @@protoc_insertion_point(field_release:MailTaxi.OrderLocationData.clientAddress)
  
  ::MailTaxi::Coordinate* temp = clientaddress_;
  clientaddress_ = nullptr;
  return temp;
}
inline ::MailTaxi::Coordinate* OrderLocationData::_internal_mutable_clientaddress() {
  
  if (clientaddress_ == nullptr) {
    auto* p = CreateMaybeMessage<::MailTaxi::Coordinate>(GetArena());
    clientaddress_ = p;
  }
  return clientaddress_;
}
inline ::MailTaxi::Coordinate* OrderLocationData::mutable_clientaddress() {
  // @@protoc_insertion_point(field_mutable:MailTaxi.OrderLocationData.clientAddress)
  return _internal_mutable_clientaddress();
}
inline void OrderLocationData::set_allocated_clientaddress(::MailTaxi::Coordinate* clientaddress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete clientaddress_;
  }
  if (clientaddress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(clientaddress);
    if (message_arena != submessage_arena) {
      clientaddress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clientaddress, submessage_arena);
    }
    
  } else {
    
  }
  clientaddress_ = clientaddress;
  // @@protoc_insertion_point(field_set_allocated:MailTaxi.OrderLocationData.clientAddress)
}

// .MailTaxi.Coordinate DestinationAddress = 2;
inline bool OrderLocationData::_internal_has_destinationaddress() const {
  return this != internal_default_instance() && destinationaddress_ != nullptr;
}
inline bool OrderLocationData::has_destinationaddress() const {
  return _internal_has_destinationaddress();
}
inline void OrderLocationData::clear_destinationaddress() {
  if (GetArena() == nullptr && destinationaddress_ != nullptr) {
    delete destinationaddress_;
  }
  destinationaddress_ = nullptr;
}
inline const ::MailTaxi::Coordinate& OrderLocationData::_internal_destinationaddress() const {
  const ::MailTaxi::Coordinate* p = destinationaddress_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MailTaxi::Coordinate*>(
      &::MailTaxi::_Coordinate_default_instance_);
}
inline const ::MailTaxi::Coordinate& OrderLocationData::destinationaddress() const {
  // @@protoc_insertion_point(field_get:MailTaxi.OrderLocationData.DestinationAddress)
  return _internal_destinationaddress();
}
inline void OrderLocationData::unsafe_arena_set_allocated_destinationaddress(
    ::MailTaxi::Coordinate* destinationaddress) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(destinationaddress_);
  }
  destinationaddress_ = destinationaddress;
  if (destinationaddress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MailTaxi.OrderLocationData.DestinationAddress)
}
inline ::MailTaxi::Coordinate* OrderLocationData::release_destinationaddress() {
  
  ::MailTaxi::Coordinate* temp = destinationaddress_;
  destinationaddress_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MailTaxi::Coordinate* OrderLocationData::unsafe_arena_release_destinationaddress() {
  // @@protoc_insertion_point(field_release:MailTaxi.OrderLocationData.DestinationAddress)
  
  ::MailTaxi::Coordinate* temp = destinationaddress_;
  destinationaddress_ = nullptr;
  return temp;
}
inline ::MailTaxi::Coordinate* OrderLocationData::_internal_mutable_destinationaddress() {
  
  if (destinationaddress_ == nullptr) {
    auto* p = CreateMaybeMessage<::MailTaxi::Coordinate>(GetArena());
    destinationaddress_ = p;
  }
  return destinationaddress_;
}
inline ::MailTaxi::Coordinate* OrderLocationData::mutable_destinationaddress() {
  // @@protoc_insertion_point(field_mutable:MailTaxi.OrderLocationData.DestinationAddress)
  return _internal_mutable_destinationaddress();
}
inline void OrderLocationData::set_allocated_destinationaddress(::MailTaxi::Coordinate* destinationaddress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete destinationaddress_;
  }
  if (destinationaddress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(destinationaddress);
    if (message_arena != submessage_arena) {
      destinationaddress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destinationaddress, submessage_arena);
    }
    
  } else {
    
  }
  destinationaddress_ = destinationaddress;
  // @@protoc_insertion_point(field_set_allocated:MailTaxi.OrderLocationData.DestinationAddress)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MailTaxi

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GeoData_2eproto
