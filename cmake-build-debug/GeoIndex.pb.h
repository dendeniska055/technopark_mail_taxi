// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GeoIndex.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GeoIndex_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GeoIndex_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "TaxiFacilities.pb.h"
#include "GeoData.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GeoIndex_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GeoIndex_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GeoIndex_2eproto;
namespace MailTaxi {
class MoveDriverRequest;
class MoveDriverRequestDefaultTypeInternal;
extern MoveDriverRequestDefaultTypeInternal _MoveDriverRequest_default_instance_;
class MoveDriverResponse;
class MoveDriverResponseDefaultTypeInternal;
extern MoveDriverResponseDefaultTypeInternal _MoveDriverResponse_default_instance_;
class RegisterDriverRequest;
class RegisterDriverRequestDefaultTypeInternal;
extern RegisterDriverRequestDefaultTypeInternal _RegisterDriverRequest_default_instance_;
class RegisterDriverResponse;
class RegisterDriverResponseDefaultTypeInternal;
extern RegisterDriverResponseDefaultTypeInternal _RegisterDriverResponse_default_instance_;
class RemoveDriverRequest;
class RemoveDriverRequestDefaultTypeInternal;
extern RemoveDriverRequestDefaultTypeInternal _RemoveDriverRequest_default_instance_;
class RemoveDriverResponse;
class RemoveDriverResponseDefaultTypeInternal;
extern RemoveDriverResponseDefaultTypeInternal _RemoveDriverResponse_default_instance_;
class SelectDriversRequest;
class SelectDriversRequestDefaultTypeInternal;
extern SelectDriversRequestDefaultTypeInternal _SelectDriversRequest_default_instance_;
class SelectDriversResponse;
class SelectDriversResponseDefaultTypeInternal;
extern SelectDriversResponseDefaultTypeInternal _SelectDriversResponse_default_instance_;
}  // namespace MailTaxi
PROTOBUF_NAMESPACE_OPEN
template<> ::MailTaxi::MoveDriverRequest* Arena::CreateMaybeMessage<::MailTaxi::MoveDriverRequest>(Arena*);
template<> ::MailTaxi::MoveDriverResponse* Arena::CreateMaybeMessage<::MailTaxi::MoveDriverResponse>(Arena*);
template<> ::MailTaxi::RegisterDriverRequest* Arena::CreateMaybeMessage<::MailTaxi::RegisterDriverRequest>(Arena*);
template<> ::MailTaxi::RegisterDriverResponse* Arena::CreateMaybeMessage<::MailTaxi::RegisterDriverResponse>(Arena*);
template<> ::MailTaxi::RemoveDriverRequest* Arena::CreateMaybeMessage<::MailTaxi::RemoveDriverRequest>(Arena*);
template<> ::MailTaxi::RemoveDriverResponse* Arena::CreateMaybeMessage<::MailTaxi::RemoveDriverResponse>(Arena*);
template<> ::MailTaxi::SelectDriversRequest* Arena::CreateMaybeMessage<::MailTaxi::SelectDriversRequest>(Arena*);
template<> ::MailTaxi::SelectDriversResponse* Arena::CreateMaybeMessage<::MailTaxi::SelectDriversResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MailTaxi {

// ===================================================================

class RegisterDriverRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.RegisterDriverRequest) */ {
 public:
  inline RegisterDriverRequest() : RegisterDriverRequest(nullptr) {}
  virtual ~RegisterDriverRequest();

  RegisterDriverRequest(const RegisterDriverRequest& from);
  RegisterDriverRequest(RegisterDriverRequest&& from) noexcept
    : RegisterDriverRequest() {
    *this = ::std::move(from);
  }

  inline RegisterDriverRequest& operator=(const RegisterDriverRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterDriverRequest& operator=(RegisterDriverRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterDriverRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterDriverRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterDriverRequest*>(
               &_RegisterDriverRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegisterDriverRequest& a, RegisterDriverRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterDriverRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterDriverRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterDriverRequest* New() const final {
    return CreateMaybeMessage<RegisterDriverRequest>(nullptr);
  }

  RegisterDriverRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterDriverRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterDriverRequest& from);
  void MergeFrom(const RegisterDriverRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterDriverRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.RegisterDriverRequest";
  }
  protected:
  explicit RegisterDriverRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GeoIndex_2eproto);
    return ::descriptor_table_GeoIndex_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordinateFieldNumber = 1,
    kDriverFieldNumber = 2,
    kDriverIdFieldNumber = 3,
  };
  // .MailTaxi.Coordinate coordinate = 1;
  bool has_coordinate() const;
  private:
  bool _internal_has_coordinate() const;
  public:
  void clear_coordinate();
  const ::MailTaxi::Coordinate& coordinate() const;
  ::MailTaxi::Coordinate* release_coordinate();
  ::MailTaxi::Coordinate* mutable_coordinate();
  void set_allocated_coordinate(::MailTaxi::Coordinate* coordinate);
  private:
  const ::MailTaxi::Coordinate& _internal_coordinate() const;
  ::MailTaxi::Coordinate* _internal_mutable_coordinate();
  public:
  void unsafe_arena_set_allocated_coordinate(
      ::MailTaxi::Coordinate* coordinate);
  ::MailTaxi::Coordinate* unsafe_arena_release_coordinate();

  // .MailTaxi.Driver driver = 2;
  bool has_driver() const;
  private:
  bool _internal_has_driver() const;
  public:
  void clear_driver();
  const ::MailTaxi::Driver& driver() const;
  ::MailTaxi::Driver* release_driver();
  ::MailTaxi::Driver* mutable_driver();
  void set_allocated_driver(::MailTaxi::Driver* driver);
  private:
  const ::MailTaxi::Driver& _internal_driver() const;
  ::MailTaxi::Driver* _internal_mutable_driver();
  public:
  void unsafe_arena_set_allocated_driver(
      ::MailTaxi::Driver* driver);
  ::MailTaxi::Driver* unsafe_arena_release_driver();

  // uint64 driverId = 3;
  void clear_driverid();
  ::PROTOBUF_NAMESPACE_ID::uint64 driverid() const;
  void set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_driverid() const;
  void _internal_set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:MailTaxi.RegisterDriverRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MailTaxi::Coordinate* coordinate_;
  ::MailTaxi::Driver* driver_;
  ::PROTOBUF_NAMESPACE_ID::uint64 driverid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GeoIndex_2eproto;
};
// -------------------------------------------------------------------

class RegisterDriverResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.RegisterDriverResponse) */ {
 public:
  inline RegisterDriverResponse() : RegisterDriverResponse(nullptr) {}
  virtual ~RegisterDriverResponse();

  RegisterDriverResponse(const RegisterDriverResponse& from);
  RegisterDriverResponse(RegisterDriverResponse&& from) noexcept
    : RegisterDriverResponse() {
    *this = ::std::move(from);
  }

  inline RegisterDriverResponse& operator=(const RegisterDriverResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterDriverResponse& operator=(RegisterDriverResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterDriverResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterDriverResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterDriverResponse*>(
               &_RegisterDriverResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegisterDriverResponse& a, RegisterDriverResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterDriverResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterDriverResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterDriverResponse* New() const final {
    return CreateMaybeMessage<RegisterDriverResponse>(nullptr);
  }

  RegisterDriverResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterDriverResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterDriverResponse& from);
  void MergeFrom(const RegisterDriverResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterDriverResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.RegisterDriverResponse";
  }
  protected:
  explicit RegisterDriverResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GeoIndex_2eproto);
    return ::descriptor_table_GeoIndex_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:MailTaxi.RegisterDriverResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GeoIndex_2eproto;
};
// -------------------------------------------------------------------

class SelectDriversRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.SelectDriversRequest) */ {
 public:
  inline SelectDriversRequest() : SelectDriversRequest(nullptr) {}
  virtual ~SelectDriversRequest();

  SelectDriversRequest(const SelectDriversRequest& from);
  SelectDriversRequest(SelectDriversRequest&& from) noexcept
    : SelectDriversRequest() {
    *this = ::std::move(from);
  }

  inline SelectDriversRequest& operator=(const SelectDriversRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectDriversRequest& operator=(SelectDriversRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SelectDriversRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelectDriversRequest* internal_default_instance() {
    return reinterpret_cast<const SelectDriversRequest*>(
               &_SelectDriversRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SelectDriversRequest& a, SelectDriversRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectDriversRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectDriversRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectDriversRequest* New() const final {
    return CreateMaybeMessage<SelectDriversRequest>(nullptr);
  }

  SelectDriversRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectDriversRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelectDriversRequest& from);
  void MergeFrom(const SelectDriversRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectDriversRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.SelectDriversRequest";
  }
  protected:
  explicit SelectDriversRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GeoIndex_2eproto);
    return ::descriptor_table_GeoIndex_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordinateFieldNumber = 1,
    kLvlIterFieldNumber = 4,
    kAnimalsFieldNumber = 2,
    kChildrenFieldNumber = 3,
  };
  // .MailTaxi.Coordinate coordinate = 1;
  bool has_coordinate() const;
  private:
  bool _internal_has_coordinate() const;
  public:
  void clear_coordinate();
  const ::MailTaxi::Coordinate& coordinate() const;
  ::MailTaxi::Coordinate* release_coordinate();
  ::MailTaxi::Coordinate* mutable_coordinate();
  void set_allocated_coordinate(::MailTaxi::Coordinate* coordinate);
  private:
  const ::MailTaxi::Coordinate& _internal_coordinate() const;
  ::MailTaxi::Coordinate* _internal_mutable_coordinate();
  public:
  void unsafe_arena_set_allocated_coordinate(
      ::MailTaxi::Coordinate* coordinate);
  ::MailTaxi::Coordinate* unsafe_arena_release_coordinate();

  // uint64 lvlIter = 4;
  void clear_lvliter();
  ::PROTOBUF_NAMESPACE_ID::uint64 lvliter() const;
  void set_lvliter(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lvliter() const;
  void _internal_set_lvliter(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool animals = 2;
  void clear_animals();
  bool animals() const;
  void set_animals(bool value);
  private:
  bool _internal_animals() const;
  void _internal_set_animals(bool value);
  public:

  // bool children = 3;
  void clear_children();
  bool children() const;
  void set_children(bool value);
  private:
  bool _internal_children() const;
  void _internal_set_children(bool value);
  public:

  // @@protoc_insertion_point(class_scope:MailTaxi.SelectDriversRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MailTaxi::Coordinate* coordinate_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lvliter_;
  bool animals_;
  bool children_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GeoIndex_2eproto;
};
// -------------------------------------------------------------------

class SelectDriversResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.SelectDriversResponse) */ {
 public:
  inline SelectDriversResponse() : SelectDriversResponse(nullptr) {}
  virtual ~SelectDriversResponse();

  SelectDriversResponse(const SelectDriversResponse& from);
  SelectDriversResponse(SelectDriversResponse&& from) noexcept
    : SelectDriversResponse() {
    *this = ::std::move(from);
  }

  inline SelectDriversResponse& operator=(const SelectDriversResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectDriversResponse& operator=(SelectDriversResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SelectDriversResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelectDriversResponse* internal_default_instance() {
    return reinterpret_cast<const SelectDriversResponse*>(
               &_SelectDriversResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SelectDriversResponse& a, SelectDriversResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectDriversResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectDriversResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectDriversResponse* New() const final {
    return CreateMaybeMessage<SelectDriversResponse>(nullptr);
  }

  SelectDriversResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectDriversResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelectDriversResponse& from);
  void MergeFrom(const SelectDriversResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectDriversResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.SelectDriversResponse";
  }
  protected:
  explicit SelectDriversResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GeoIndex_2eproto);
    return ::descriptor_table_GeoIndex_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriverIdFieldNumber = 1,
    kDriversFieldNumber = 2,
    kDriverCoordinatesFieldNumber = 3,
  };
  // repeated uint64 driverId = 1;
  int driverid_size() const;
  private:
  int _internal_driverid_size() const;
  public:
  void clear_driverid();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_driverid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_driverid() const;
  void _internal_add_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_driverid();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 driverid(int index) const;
  void set_driverid(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      driverid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_driverid();

  // repeated .MailTaxi.Driver drivers = 2;
  int drivers_size() const;
  private:
  int _internal_drivers_size() const;
  public:
  void clear_drivers();
  ::MailTaxi::Driver* mutable_drivers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailTaxi::Driver >*
      mutable_drivers();
  private:
  const ::MailTaxi::Driver& _internal_drivers(int index) const;
  ::MailTaxi::Driver* _internal_add_drivers();
  public:
  const ::MailTaxi::Driver& drivers(int index) const;
  ::MailTaxi::Driver* add_drivers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailTaxi::Driver >&
      drivers() const;

  // repeated .MailTaxi.Coordinate driverCoordinates = 3;
  int drivercoordinates_size() const;
  private:
  int _internal_drivercoordinates_size() const;
  public:
  void clear_drivercoordinates();
  ::MailTaxi::Coordinate* mutable_drivercoordinates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailTaxi::Coordinate >*
      mutable_drivercoordinates();
  private:
  const ::MailTaxi::Coordinate& _internal_drivercoordinates(int index) const;
  ::MailTaxi::Coordinate* _internal_add_drivercoordinates();
  public:
  const ::MailTaxi::Coordinate& drivercoordinates(int index) const;
  ::MailTaxi::Coordinate* add_drivercoordinates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailTaxi::Coordinate >&
      drivercoordinates() const;

  // @@protoc_insertion_point(class_scope:MailTaxi.SelectDriversResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > driverid_;
  mutable std::atomic<int> _driverid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailTaxi::Driver > drivers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailTaxi::Coordinate > drivercoordinates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GeoIndex_2eproto;
};
// -------------------------------------------------------------------

class MoveDriverRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.MoveDriverRequest) */ {
 public:
  inline MoveDriverRequest() : MoveDriverRequest(nullptr) {}
  virtual ~MoveDriverRequest();

  MoveDriverRequest(const MoveDriverRequest& from);
  MoveDriverRequest(MoveDriverRequest&& from) noexcept
    : MoveDriverRequest() {
    *this = ::std::move(from);
  }

  inline MoveDriverRequest& operator=(const MoveDriverRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveDriverRequest& operator=(MoveDriverRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveDriverRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveDriverRequest* internal_default_instance() {
    return reinterpret_cast<const MoveDriverRequest*>(
               &_MoveDriverRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MoveDriverRequest& a, MoveDriverRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveDriverRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveDriverRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveDriverRequest* New() const final {
    return CreateMaybeMessage<MoveDriverRequest>(nullptr);
  }

  MoveDriverRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveDriverRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveDriverRequest& from);
  void MergeFrom(const MoveDriverRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveDriverRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.MoveDriverRequest";
  }
  protected:
  explicit MoveDriverRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GeoIndex_2eproto);
    return ::descriptor_table_GeoIndex_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordinateFieldNumber = 2,
    kDriverIdFieldNumber = 1,
  };
  // .MailTaxi.Coordinate coordinate = 2;
  bool has_coordinate() const;
  private:
  bool _internal_has_coordinate() const;
  public:
  void clear_coordinate();
  const ::MailTaxi::Coordinate& coordinate() const;
  ::MailTaxi::Coordinate* release_coordinate();
  ::MailTaxi::Coordinate* mutable_coordinate();
  void set_allocated_coordinate(::MailTaxi::Coordinate* coordinate);
  private:
  const ::MailTaxi::Coordinate& _internal_coordinate() const;
  ::MailTaxi::Coordinate* _internal_mutable_coordinate();
  public:
  void unsafe_arena_set_allocated_coordinate(
      ::MailTaxi::Coordinate* coordinate);
  ::MailTaxi::Coordinate* unsafe_arena_release_coordinate();

  // uint64 driverId = 1;
  void clear_driverid();
  ::PROTOBUF_NAMESPACE_ID::uint64 driverid() const;
  void set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_driverid() const;
  void _internal_set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:MailTaxi.MoveDriverRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MailTaxi::Coordinate* coordinate_;
  ::PROTOBUF_NAMESPACE_ID::uint64 driverid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GeoIndex_2eproto;
};
// -------------------------------------------------------------------

class MoveDriverResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.MoveDriverResponse) */ {
 public:
  inline MoveDriverResponse() : MoveDriverResponse(nullptr) {}
  virtual ~MoveDriverResponse();

  MoveDriverResponse(const MoveDriverResponse& from);
  MoveDriverResponse(MoveDriverResponse&& from) noexcept
    : MoveDriverResponse() {
    *this = ::std::move(from);
  }

  inline MoveDriverResponse& operator=(const MoveDriverResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveDriverResponse& operator=(MoveDriverResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveDriverResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveDriverResponse* internal_default_instance() {
    return reinterpret_cast<const MoveDriverResponse*>(
               &_MoveDriverResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MoveDriverResponse& a, MoveDriverResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveDriverResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveDriverResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveDriverResponse* New() const final {
    return CreateMaybeMessage<MoveDriverResponse>(nullptr);
  }

  MoveDriverResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveDriverResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveDriverResponse& from);
  void MergeFrom(const MoveDriverResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveDriverResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.MoveDriverResponse";
  }
  protected:
  explicit MoveDriverResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GeoIndex_2eproto);
    return ::descriptor_table_GeoIndex_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriverFoundFieldNumber = 1,
  };
  // bool driverFound = 1;
  void clear_driverfound();
  bool driverfound() const;
  void set_driverfound(bool value);
  private:
  bool _internal_driverfound() const;
  void _internal_set_driverfound(bool value);
  public:

  // @@protoc_insertion_point(class_scope:MailTaxi.MoveDriverResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool driverfound_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GeoIndex_2eproto;
};
// -------------------------------------------------------------------

class RemoveDriverRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.RemoveDriverRequest) */ {
 public:
  inline RemoveDriverRequest() : RemoveDriverRequest(nullptr) {}
  virtual ~RemoveDriverRequest();

  RemoveDriverRequest(const RemoveDriverRequest& from);
  RemoveDriverRequest(RemoveDriverRequest&& from) noexcept
    : RemoveDriverRequest() {
    *this = ::std::move(from);
  }

  inline RemoveDriverRequest& operator=(const RemoveDriverRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveDriverRequest& operator=(RemoveDriverRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveDriverRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveDriverRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveDriverRequest*>(
               &_RemoveDriverRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RemoveDriverRequest& a, RemoveDriverRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveDriverRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveDriverRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveDriverRequest* New() const final {
    return CreateMaybeMessage<RemoveDriverRequest>(nullptr);
  }

  RemoveDriverRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveDriverRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveDriverRequest& from);
  void MergeFrom(const RemoveDriverRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveDriverRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.RemoveDriverRequest";
  }
  protected:
  explicit RemoveDriverRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GeoIndex_2eproto);
    return ::descriptor_table_GeoIndex_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriverIdFieldNumber = 1,
  };
  // uint64 driverId = 1;
  void clear_driverid();
  ::PROTOBUF_NAMESPACE_ID::uint64 driverid() const;
  void set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_driverid() const;
  void _internal_set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:MailTaxi.RemoveDriverRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 driverid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GeoIndex_2eproto;
};
// -------------------------------------------------------------------

class RemoveDriverResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.RemoveDriverResponse) */ {
 public:
  inline RemoveDriverResponse() : RemoveDriverResponse(nullptr) {}
  virtual ~RemoveDriverResponse();

  RemoveDriverResponse(const RemoveDriverResponse& from);
  RemoveDriverResponse(RemoveDriverResponse&& from) noexcept
    : RemoveDriverResponse() {
    *this = ::std::move(from);
  }

  inline RemoveDriverResponse& operator=(const RemoveDriverResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveDriverResponse& operator=(RemoveDriverResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveDriverResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveDriverResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveDriverResponse*>(
               &_RemoveDriverResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RemoveDriverResponse& a, RemoveDriverResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveDriverResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveDriverResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveDriverResponse* New() const final {
    return CreateMaybeMessage<RemoveDriverResponse>(nullptr);
  }

  RemoveDriverResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveDriverResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveDriverResponse& from);
  void MergeFrom(const RemoveDriverResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveDriverResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.RemoveDriverResponse";
  }
  protected:
  explicit RemoveDriverResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GeoIndex_2eproto);
    return ::descriptor_table_GeoIndex_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriverFoundFieldNumber = 1,
  };
  // bool driverFound = 1;
  void clear_driverfound();
  bool driverfound() const;
  void set_driverfound(bool value);
  private:
  bool _internal_driverfound() const;
  void _internal_set_driverfound(bool value);
  public:

  // @@protoc_insertion_point(class_scope:MailTaxi.RemoveDriverResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool driverfound_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GeoIndex_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegisterDriverRequest

// .MailTaxi.Coordinate coordinate = 1;
inline bool RegisterDriverRequest::_internal_has_coordinate() const {
  return this != internal_default_instance() && coordinate_ != nullptr;
}
inline bool RegisterDriverRequest::has_coordinate() const {
  return _internal_has_coordinate();
}
inline const ::MailTaxi::Coordinate& RegisterDriverRequest::_internal_coordinate() const {
  const ::MailTaxi::Coordinate* p = coordinate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MailTaxi::Coordinate*>(
      &::MailTaxi::_Coordinate_default_instance_);
}
inline const ::MailTaxi::Coordinate& RegisterDriverRequest::coordinate() const {
  // @@protoc_insertion_point(field_get:MailTaxi.RegisterDriverRequest.coordinate)
  return _internal_coordinate();
}
inline void RegisterDriverRequest::unsafe_arena_set_allocated_coordinate(
    ::MailTaxi::Coordinate* coordinate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinate_);
  }
  coordinate_ = coordinate;
  if (coordinate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MailTaxi.RegisterDriverRequest.coordinate)
}
inline ::MailTaxi::Coordinate* RegisterDriverRequest::release_coordinate() {
  
  ::MailTaxi::Coordinate* temp = coordinate_;
  coordinate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MailTaxi::Coordinate* RegisterDriverRequest::unsafe_arena_release_coordinate() {
  // @@protoc_insertion_point(field_release:MailTaxi.RegisterDriverRequest.coordinate)
  
  ::MailTaxi::Coordinate* temp = coordinate_;
  coordinate_ = nullptr;
  return temp;
}
inline ::MailTaxi::Coordinate* RegisterDriverRequest::_internal_mutable_coordinate() {
  
  if (coordinate_ == nullptr) {
    auto* p = CreateMaybeMessage<::MailTaxi::Coordinate>(GetArena());
    coordinate_ = p;
  }
  return coordinate_;
}
inline ::MailTaxi::Coordinate* RegisterDriverRequest::mutable_coordinate() {
  // @@protoc_insertion_point(field_mutable:MailTaxi.RegisterDriverRequest.coordinate)
  return _internal_mutable_coordinate();
}
inline void RegisterDriverRequest::set_allocated_coordinate(::MailTaxi::Coordinate* coordinate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinate_);
  }
  if (coordinate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinate)->GetArena();
    if (message_arena != submessage_arena) {
      coordinate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinate, submessage_arena);
    }
    
  } else {
    
  }
  coordinate_ = coordinate;
  // @@protoc_insertion_point(field_set_allocated:MailTaxi.RegisterDriverRequest.coordinate)
}

// .MailTaxi.Driver driver = 2;
inline bool RegisterDriverRequest::_internal_has_driver() const {
  return this != internal_default_instance() && driver_ != nullptr;
}
inline bool RegisterDriverRequest::has_driver() const {
  return _internal_has_driver();
}
inline const ::MailTaxi::Driver& RegisterDriverRequest::_internal_driver() const {
  const ::MailTaxi::Driver* p = driver_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MailTaxi::Driver*>(
      &::MailTaxi::_Driver_default_instance_);
}
inline const ::MailTaxi::Driver& RegisterDriverRequest::driver() const {
  // @@protoc_insertion_point(field_get:MailTaxi.RegisterDriverRequest.driver)
  return _internal_driver();
}
inline void RegisterDriverRequest::unsafe_arena_set_allocated_driver(
    ::MailTaxi::Driver* driver) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(driver_);
  }
  driver_ = driver;
  if (driver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MailTaxi.RegisterDriverRequest.driver)
}
inline ::MailTaxi::Driver* RegisterDriverRequest::release_driver() {
  
  ::MailTaxi::Driver* temp = driver_;
  driver_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MailTaxi::Driver* RegisterDriverRequest::unsafe_arena_release_driver() {
  // @@protoc_insertion_point(field_release:MailTaxi.RegisterDriverRequest.driver)
  
  ::MailTaxi::Driver* temp = driver_;
  driver_ = nullptr;
  return temp;
}
inline ::MailTaxi::Driver* RegisterDriverRequest::_internal_mutable_driver() {
  
  if (driver_ == nullptr) {
    auto* p = CreateMaybeMessage<::MailTaxi::Driver>(GetArena());
    driver_ = p;
  }
  return driver_;
}
inline ::MailTaxi::Driver* RegisterDriverRequest::mutable_driver() {
  // @@protoc_insertion_point(field_mutable:MailTaxi.RegisterDriverRequest.driver)
  return _internal_mutable_driver();
}
inline void RegisterDriverRequest::set_allocated_driver(::MailTaxi::Driver* driver) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(driver_);
  }
  if (driver) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(driver)->GetArena();
    if (message_arena != submessage_arena) {
      driver = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, driver, submessage_arena);
    }
    
  } else {
    
  }
  driver_ = driver;
  // @@protoc_insertion_point(field_set_allocated:MailTaxi.RegisterDriverRequest.driver)
}

// uint64 driverId = 3;
inline void RegisterDriverRequest::clear_driverid() {
  driverid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RegisterDriverRequest::_internal_driverid() const {
  return driverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RegisterDriverRequest::driverid() const {
  // @@protoc_insertion_point(field_get:MailTaxi.RegisterDriverRequest.driverId)
  return _internal_driverid();
}
inline void RegisterDriverRequest::_internal_set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  driverid_ = value;
}
inline void RegisterDriverRequest::set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_driverid(value);
  // @@protoc_insertion_point(field_set:MailTaxi.RegisterDriverRequest.driverId)
}

// -------------------------------------------------------------------

// RegisterDriverResponse

// bool success = 1;
inline void RegisterDriverResponse::clear_success() {
  success_ = false;
}
inline bool RegisterDriverResponse::_internal_success() const {
  return success_;
}
inline bool RegisterDriverResponse::success() const {
  // @@protoc_insertion_point(field_get:MailTaxi.RegisterDriverResponse.success)
  return _internal_success();
}
inline void RegisterDriverResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void RegisterDriverResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:MailTaxi.RegisterDriverResponse.success)
}

// -------------------------------------------------------------------

// SelectDriversRequest

// .MailTaxi.Coordinate coordinate = 1;
inline bool SelectDriversRequest::_internal_has_coordinate() const {
  return this != internal_default_instance() && coordinate_ != nullptr;
}
inline bool SelectDriversRequest::has_coordinate() const {
  return _internal_has_coordinate();
}
inline const ::MailTaxi::Coordinate& SelectDriversRequest::_internal_coordinate() const {
  const ::MailTaxi::Coordinate* p = coordinate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MailTaxi::Coordinate*>(
      &::MailTaxi::_Coordinate_default_instance_);
}
inline const ::MailTaxi::Coordinate& SelectDriversRequest::coordinate() const {
  // @@protoc_insertion_point(field_get:MailTaxi.SelectDriversRequest.coordinate)
  return _internal_coordinate();
}
inline void SelectDriversRequest::unsafe_arena_set_allocated_coordinate(
    ::MailTaxi::Coordinate* coordinate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinate_);
  }
  coordinate_ = coordinate;
  if (coordinate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MailTaxi.SelectDriversRequest.coordinate)
}
inline ::MailTaxi::Coordinate* SelectDriversRequest::release_coordinate() {
  
  ::MailTaxi::Coordinate* temp = coordinate_;
  coordinate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MailTaxi::Coordinate* SelectDriversRequest::unsafe_arena_release_coordinate() {
  // @@protoc_insertion_point(field_release:MailTaxi.SelectDriversRequest.coordinate)
  
  ::MailTaxi::Coordinate* temp = coordinate_;
  coordinate_ = nullptr;
  return temp;
}
inline ::MailTaxi::Coordinate* SelectDriversRequest::_internal_mutable_coordinate() {
  
  if (coordinate_ == nullptr) {
    auto* p = CreateMaybeMessage<::MailTaxi::Coordinate>(GetArena());
    coordinate_ = p;
  }
  return coordinate_;
}
inline ::MailTaxi::Coordinate* SelectDriversRequest::mutable_coordinate() {
  // @@protoc_insertion_point(field_mutable:MailTaxi.SelectDriversRequest.coordinate)
  return _internal_mutable_coordinate();
}
inline void SelectDriversRequest::set_allocated_coordinate(::MailTaxi::Coordinate* coordinate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinate_);
  }
  if (coordinate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinate)->GetArena();
    if (message_arena != submessage_arena) {
      coordinate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinate, submessage_arena);
    }
    
  } else {
    
  }
  coordinate_ = coordinate;
  // @@protoc_insertion_point(field_set_allocated:MailTaxi.SelectDriversRequest.coordinate)
}

// bool animals = 2;
inline void SelectDriversRequest::clear_animals() {
  animals_ = false;
}
inline bool SelectDriversRequest::_internal_animals() const {
  return animals_;
}
inline bool SelectDriversRequest::animals() const {
  // @@protoc_insertion_point(field_get:MailTaxi.SelectDriversRequest.animals)
  return _internal_animals();
}
inline void SelectDriversRequest::_internal_set_animals(bool value) {
  
  animals_ = value;
}
inline void SelectDriversRequest::set_animals(bool value) {
  _internal_set_animals(value);
  // @@protoc_insertion_point(field_set:MailTaxi.SelectDriversRequest.animals)
}

// bool children = 3;
inline void SelectDriversRequest::clear_children() {
  children_ = false;
}
inline bool SelectDriversRequest::_internal_children() const {
  return children_;
}
inline bool SelectDriversRequest::children() const {
  // @@protoc_insertion_point(field_get:MailTaxi.SelectDriversRequest.children)
  return _internal_children();
}
inline void SelectDriversRequest::_internal_set_children(bool value) {
  
  children_ = value;
}
inline void SelectDriversRequest::set_children(bool value) {
  _internal_set_children(value);
  // @@protoc_insertion_point(field_set:MailTaxi.SelectDriversRequest.children)
}

// uint64 lvlIter = 4;
inline void SelectDriversRequest::clear_lvliter() {
  lvliter_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SelectDriversRequest::_internal_lvliter() const {
  return lvliter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SelectDriversRequest::lvliter() const {
  // @@protoc_insertion_point(field_get:MailTaxi.SelectDriversRequest.lvlIter)
  return _internal_lvliter();
}
inline void SelectDriversRequest::_internal_set_lvliter(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lvliter_ = value;
}
inline void SelectDriversRequest::set_lvliter(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lvliter(value);
  // @@protoc_insertion_point(field_set:MailTaxi.SelectDriversRequest.lvlIter)
}

// -------------------------------------------------------------------

// SelectDriversResponse

// repeated uint64 driverId = 1;
inline int SelectDriversResponse::_internal_driverid_size() const {
  return driverid_.size();
}
inline int SelectDriversResponse::driverid_size() const {
  return _internal_driverid_size();
}
inline void SelectDriversResponse::clear_driverid() {
  driverid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SelectDriversResponse::_internal_driverid(int index) const {
  return driverid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SelectDriversResponse::driverid(int index) const {
  // @@protoc_insertion_point(field_get:MailTaxi.SelectDriversResponse.driverId)
  return _internal_driverid(index);
}
inline void SelectDriversResponse::set_driverid(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  driverid_.Set(index, value);
  // @@protoc_insertion_point(field_set:MailTaxi.SelectDriversResponse.driverId)
}
inline void SelectDriversResponse::_internal_add_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  driverid_.Add(value);
}
inline void SelectDriversResponse::add_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_driverid(value);
  // @@protoc_insertion_point(field_add:MailTaxi.SelectDriversResponse.driverId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
SelectDriversResponse::_internal_driverid() const {
  return driverid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
SelectDriversResponse::driverid() const {
  // @@protoc_insertion_point(field_list:MailTaxi.SelectDriversResponse.driverId)
  return _internal_driverid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
SelectDriversResponse::_internal_mutable_driverid() {
  return &driverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
SelectDriversResponse::mutable_driverid() {
  // @@protoc_insertion_point(field_mutable_list:MailTaxi.SelectDriversResponse.driverId)
  return _internal_mutable_driverid();
}

// repeated .MailTaxi.Driver drivers = 2;
inline int SelectDriversResponse::_internal_drivers_size() const {
  return drivers_.size();
}
inline int SelectDriversResponse::drivers_size() const {
  return _internal_drivers_size();
}
inline ::MailTaxi::Driver* SelectDriversResponse::mutable_drivers(int index) {
  // @@protoc_insertion_point(field_mutable:MailTaxi.SelectDriversResponse.drivers)
  return drivers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailTaxi::Driver >*
SelectDriversResponse::mutable_drivers() {
  // @@protoc_insertion_point(field_mutable_list:MailTaxi.SelectDriversResponse.drivers)
  return &drivers_;
}
inline const ::MailTaxi::Driver& SelectDriversResponse::_internal_drivers(int index) const {
  return drivers_.Get(index);
}
inline const ::MailTaxi::Driver& SelectDriversResponse::drivers(int index) const {
  // @@protoc_insertion_point(field_get:MailTaxi.SelectDriversResponse.drivers)
  return _internal_drivers(index);
}
inline ::MailTaxi::Driver* SelectDriversResponse::_internal_add_drivers() {
  return drivers_.Add();
}
inline ::MailTaxi::Driver* SelectDriversResponse::add_drivers() {
  // @@protoc_insertion_point(field_add:MailTaxi.SelectDriversResponse.drivers)
  return _internal_add_drivers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailTaxi::Driver >&
SelectDriversResponse::drivers() const {
  // @@protoc_insertion_point(field_list:MailTaxi.SelectDriversResponse.drivers)
  return drivers_;
}

// repeated .MailTaxi.Coordinate driverCoordinates = 3;
inline int SelectDriversResponse::_internal_drivercoordinates_size() const {
  return drivercoordinates_.size();
}
inline int SelectDriversResponse::drivercoordinates_size() const {
  return _internal_drivercoordinates_size();
}
inline ::MailTaxi::Coordinate* SelectDriversResponse::mutable_drivercoordinates(int index) {
  // @@protoc_insertion_point(field_mutable:MailTaxi.SelectDriversResponse.driverCoordinates)
  return drivercoordinates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailTaxi::Coordinate >*
SelectDriversResponse::mutable_drivercoordinates() {
  // @@protoc_insertion_point(field_mutable_list:MailTaxi.SelectDriversResponse.driverCoordinates)
  return &drivercoordinates_;
}
inline const ::MailTaxi::Coordinate& SelectDriversResponse::_internal_drivercoordinates(int index) const {
  return drivercoordinates_.Get(index);
}
inline const ::MailTaxi::Coordinate& SelectDriversResponse::drivercoordinates(int index) const {
  // @@protoc_insertion_point(field_get:MailTaxi.SelectDriversResponse.driverCoordinates)
  return _internal_drivercoordinates(index);
}
inline ::MailTaxi::Coordinate* SelectDriversResponse::_internal_add_drivercoordinates() {
  return drivercoordinates_.Add();
}
inline ::MailTaxi::Coordinate* SelectDriversResponse::add_drivercoordinates() {
  // @@protoc_insertion_point(field_add:MailTaxi.SelectDriversResponse.driverCoordinates)
  return _internal_add_drivercoordinates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailTaxi::Coordinate >&
SelectDriversResponse::drivercoordinates() const {
  // @@protoc_insertion_point(field_list:MailTaxi.SelectDriversResponse.driverCoordinates)
  return drivercoordinates_;
}

// -------------------------------------------------------------------

// MoveDriverRequest

// uint64 driverId = 1;
inline void MoveDriverRequest::clear_driverid() {
  driverid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MoveDriverRequest::_internal_driverid() const {
  return driverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MoveDriverRequest::driverid() const {
  // @@protoc_insertion_point(field_get:MailTaxi.MoveDriverRequest.driverId)
  return _internal_driverid();
}
inline void MoveDriverRequest::_internal_set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  driverid_ = value;
}
inline void MoveDriverRequest::set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_driverid(value);
  // @@protoc_insertion_point(field_set:MailTaxi.MoveDriverRequest.driverId)
}

// .MailTaxi.Coordinate coordinate = 2;
inline bool MoveDriverRequest::_internal_has_coordinate() const {
  return this != internal_default_instance() && coordinate_ != nullptr;
}
inline bool MoveDriverRequest::has_coordinate() const {
  return _internal_has_coordinate();
}
inline const ::MailTaxi::Coordinate& MoveDriverRequest::_internal_coordinate() const {
  const ::MailTaxi::Coordinate* p = coordinate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MailTaxi::Coordinate*>(
      &::MailTaxi::_Coordinate_default_instance_);
}
inline const ::MailTaxi::Coordinate& MoveDriverRequest::coordinate() const {
  // @@protoc_insertion_point(field_get:MailTaxi.MoveDriverRequest.coordinate)
  return _internal_coordinate();
}
inline void MoveDriverRequest::unsafe_arena_set_allocated_coordinate(
    ::MailTaxi::Coordinate* coordinate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinate_);
  }
  coordinate_ = coordinate;
  if (coordinate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MailTaxi.MoveDriverRequest.coordinate)
}
inline ::MailTaxi::Coordinate* MoveDriverRequest::release_coordinate() {
  
  ::MailTaxi::Coordinate* temp = coordinate_;
  coordinate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MailTaxi::Coordinate* MoveDriverRequest::unsafe_arena_release_coordinate() {
  // @@protoc_insertion_point(field_release:MailTaxi.MoveDriverRequest.coordinate)
  
  ::MailTaxi::Coordinate* temp = coordinate_;
  coordinate_ = nullptr;
  return temp;
}
inline ::MailTaxi::Coordinate* MoveDriverRequest::_internal_mutable_coordinate() {
  
  if (coordinate_ == nullptr) {
    auto* p = CreateMaybeMessage<::MailTaxi::Coordinate>(GetArena());
    coordinate_ = p;
  }
  return coordinate_;
}
inline ::MailTaxi::Coordinate* MoveDriverRequest::mutable_coordinate() {
  // @@protoc_insertion_point(field_mutable:MailTaxi.MoveDriverRequest.coordinate)
  return _internal_mutable_coordinate();
}
inline void MoveDriverRequest::set_allocated_coordinate(::MailTaxi::Coordinate* coordinate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinate_);
  }
  if (coordinate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinate)->GetArena();
    if (message_arena != submessage_arena) {
      coordinate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinate, submessage_arena);
    }
    
  } else {
    
  }
  coordinate_ = coordinate;
  // @@protoc_insertion_point(field_set_allocated:MailTaxi.MoveDriverRequest.coordinate)
}

// -------------------------------------------------------------------

// MoveDriverResponse

// bool driverFound = 1;
inline void MoveDriverResponse::clear_driverfound() {
  driverfound_ = false;
}
inline bool MoveDriverResponse::_internal_driverfound() const {
  return driverfound_;
}
inline bool MoveDriverResponse::driverfound() const {
  // @@protoc_insertion_point(field_get:MailTaxi.MoveDriverResponse.driverFound)
  return _internal_driverfound();
}
inline void MoveDriverResponse::_internal_set_driverfound(bool value) {
  
  driverfound_ = value;
}
inline void MoveDriverResponse::set_driverfound(bool value) {
  _internal_set_driverfound(value);
  // @@protoc_insertion_point(field_set:MailTaxi.MoveDriverResponse.driverFound)
}

// -------------------------------------------------------------------

// RemoveDriverRequest

// uint64 driverId = 1;
inline void RemoveDriverRequest::clear_driverid() {
  driverid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RemoveDriverRequest::_internal_driverid() const {
  return driverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RemoveDriverRequest::driverid() const {
  // @@protoc_insertion_point(field_get:MailTaxi.RemoveDriverRequest.driverId)
  return _internal_driverid();
}
inline void RemoveDriverRequest::_internal_set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  driverid_ = value;
}
inline void RemoveDriverRequest::set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_driverid(value);
  // @@protoc_insertion_point(field_set:MailTaxi.RemoveDriverRequest.driverId)
}

// -------------------------------------------------------------------

// RemoveDriverResponse

// bool driverFound = 1;
inline void RemoveDriverResponse::clear_driverfound() {
  driverfound_ = false;
}
inline bool RemoveDriverResponse::_internal_driverfound() const {
  return driverfound_;
}
inline bool RemoveDriverResponse::driverfound() const {
  // @@protoc_insertion_point(field_get:MailTaxi.RemoveDriverResponse.driverFound)
  return _internal_driverfound();
}
inline void RemoveDriverResponse::_internal_set_driverfound(bool value) {
  
  driverfound_ = value;
}
inline void RemoveDriverResponse::set_driverfound(bool value) {
  _internal_set_driverfound(value);
  // @@protoc_insertion_point(field_set:MailTaxi.RemoveDriverResponse.driverFound)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MailTaxi

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GeoIndex_2eproto
