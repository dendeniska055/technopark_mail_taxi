// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OrderManagement.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_OrderManagement_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_OrderManagement_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "TaxiFacilities.pb.h"
#include "GeoData.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_OrderManagement_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_OrderManagement_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OrderManagement_2eproto;
namespace MailTaxi {
class CloseDriverWorkRequest;
class CloseDriverWorkRequestDefaultTypeInternal;
extern CloseDriverWorkRequestDefaultTypeInternal _CloseDriverWorkRequest_default_instance_;
class CloseDriverWorkResponse;
class CloseDriverWorkResponseDefaultTypeInternal;
extern CloseDriverWorkResponseDefaultTypeInternal _CloseDriverWorkResponse_default_instance_;
class CreateOrderRequest;
class CreateOrderRequestDefaultTypeInternal;
extern CreateOrderRequestDefaultTypeInternal _CreateOrderRequest_default_instance_;
class CreateOrderResponse;
class CreateOrderResponseDefaultTypeInternal;
extern CreateOrderResponseDefaultTypeInternal _CreateOrderResponse_default_instance_;
class CreatingDriverWorkRequest;
class CreatingDriverWorkRequestDefaultTypeInternal;
extern CreatingDriverWorkRequestDefaultTypeInternal _CreatingDriverWorkRequest_default_instance_;
class CreatingDriverWorkResponse;
class CreatingDriverWorkResponseDefaultTypeInternal;
extern CreatingDriverWorkResponseDefaultTypeInternal _CreatingDriverWorkResponse_default_instance_;
class IdentificationData;
class IdentificationDataDefaultTypeInternal;
extern IdentificationDataDefaultTypeInternal _IdentificationData_default_instance_;
class ProposeOrderRequest;
class ProposeOrderRequestDefaultTypeInternal;
extern ProposeOrderRequestDefaultTypeInternal _ProposeOrderRequest_default_instance_;
class ProposeOrderResponse;
class ProposeOrderResponseDefaultTypeInternal;
extern ProposeOrderResponseDefaultTypeInternal _ProposeOrderResponse_default_instance_;
class RemoveOrderRequest;
class RemoveOrderRequestDefaultTypeInternal;
extern RemoveOrderRequestDefaultTypeInternal _RemoveOrderRequest_default_instance_;
class RemoveOrderResponse;
class RemoveOrderResponseDefaultTypeInternal;
extern RemoveOrderResponseDefaultTypeInternal _RemoveOrderResponse_default_instance_;
}  // namespace MailTaxi
PROTOBUF_NAMESPACE_OPEN
template<> ::MailTaxi::CloseDriverWorkRequest* Arena::CreateMaybeMessage<::MailTaxi::CloseDriverWorkRequest>(Arena*);
template<> ::MailTaxi::CloseDriverWorkResponse* Arena::CreateMaybeMessage<::MailTaxi::CloseDriverWorkResponse>(Arena*);
template<> ::MailTaxi::CreateOrderRequest* Arena::CreateMaybeMessage<::MailTaxi::CreateOrderRequest>(Arena*);
template<> ::MailTaxi::CreateOrderResponse* Arena::CreateMaybeMessage<::MailTaxi::CreateOrderResponse>(Arena*);
template<> ::MailTaxi::CreatingDriverWorkRequest* Arena::CreateMaybeMessage<::MailTaxi::CreatingDriverWorkRequest>(Arena*);
template<> ::MailTaxi::CreatingDriverWorkResponse* Arena::CreateMaybeMessage<::MailTaxi::CreatingDriverWorkResponse>(Arena*);
template<> ::MailTaxi::IdentificationData* Arena::CreateMaybeMessage<::MailTaxi::IdentificationData>(Arena*);
template<> ::MailTaxi::ProposeOrderRequest* Arena::CreateMaybeMessage<::MailTaxi::ProposeOrderRequest>(Arena*);
template<> ::MailTaxi::ProposeOrderResponse* Arena::CreateMaybeMessage<::MailTaxi::ProposeOrderResponse>(Arena*);
template<> ::MailTaxi::RemoveOrderRequest* Arena::CreateMaybeMessage<::MailTaxi::RemoveOrderRequest>(Arena*);
template<> ::MailTaxi::RemoveOrderResponse* Arena::CreateMaybeMessage<::MailTaxi::RemoveOrderResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MailTaxi {

// ===================================================================

class IdentificationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.IdentificationData) */ {
 public:
  inline IdentificationData() : IdentificationData(nullptr) {}
  virtual ~IdentificationData();

  IdentificationData(const IdentificationData& from);
  IdentificationData(IdentificationData&& from) noexcept
    : IdentificationData() {
    *this = ::std::move(from);
  }

  inline IdentificationData& operator=(const IdentificationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline IdentificationData& operator=(IdentificationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IdentificationData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IdentificationData* internal_default_instance() {
    return reinterpret_cast<const IdentificationData*>(
               &_IdentificationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IdentificationData& a, IdentificationData& b) {
    a.Swap(&b);
  }
  inline void Swap(IdentificationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IdentificationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IdentificationData* New() const final {
    return CreateMaybeMessage<IdentificationData>(nullptr);
  }

  IdentificationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IdentificationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IdentificationData& from);
  void MergeFrom(const IdentificationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdentificationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.IdentificationData";
  }
  protected:
  explicit IdentificationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OrderManagement_2eproto);
    return ::descriptor_table_OrderManagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // uint64 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:MailTaxi.IdentificationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrderManagement_2eproto;
};
// -------------------------------------------------------------------

class CreatingDriverWorkRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.CreatingDriverWorkRequest) */ {
 public:
  inline CreatingDriverWorkRequest() : CreatingDriverWorkRequest(nullptr) {}
  virtual ~CreatingDriverWorkRequest();

  CreatingDriverWorkRequest(const CreatingDriverWorkRequest& from);
  CreatingDriverWorkRequest(CreatingDriverWorkRequest&& from) noexcept
    : CreatingDriverWorkRequest() {
    *this = ::std::move(from);
  }

  inline CreatingDriverWorkRequest& operator=(const CreatingDriverWorkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatingDriverWorkRequest& operator=(CreatingDriverWorkRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatingDriverWorkRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatingDriverWorkRequest* internal_default_instance() {
    return reinterpret_cast<const CreatingDriverWorkRequest*>(
               &_CreatingDriverWorkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreatingDriverWorkRequest& a, CreatingDriverWorkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatingDriverWorkRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatingDriverWorkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatingDriverWorkRequest* New() const final {
    return CreateMaybeMessage<CreatingDriverWorkRequest>(nullptr);
  }

  CreatingDriverWorkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatingDriverWorkRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatingDriverWorkRequest& from);
  void MergeFrom(const CreatingDriverWorkRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatingDriverWorkRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.CreatingDriverWorkRequest";
  }
  protected:
  explicit CreatingDriverWorkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OrderManagement_2eproto);
    return ::descriptor_table_OrderManagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriverTokenFieldNumber = 2,
    kDriverIdFieldNumber = 1,
  };
  // string driverToken = 2;
  void clear_drivertoken();
  const std::string& drivertoken() const;
  void set_drivertoken(const std::string& value);
  void set_drivertoken(std::string&& value);
  void set_drivertoken(const char* value);
  void set_drivertoken(const char* value, size_t size);
  std::string* mutable_drivertoken();
  std::string* release_drivertoken();
  void set_allocated_drivertoken(std::string* drivertoken);
  private:
  const std::string& _internal_drivertoken() const;
  void _internal_set_drivertoken(const std::string& value);
  std::string* _internal_mutable_drivertoken();
  public:

  // uint64 driverId = 1;
  void clear_driverid();
  ::PROTOBUF_NAMESPACE_ID::uint64 driverid() const;
  void set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_driverid() const;
  void _internal_set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:MailTaxi.CreatingDriverWorkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr drivertoken_;
  ::PROTOBUF_NAMESPACE_ID::uint64 driverid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrderManagement_2eproto;
};
// -------------------------------------------------------------------

class CreatingDriverWorkResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.CreatingDriverWorkResponse) */ {
 public:
  inline CreatingDriverWorkResponse() : CreatingDriverWorkResponse(nullptr) {}
  virtual ~CreatingDriverWorkResponse();

  CreatingDriverWorkResponse(const CreatingDriverWorkResponse& from);
  CreatingDriverWorkResponse(CreatingDriverWorkResponse&& from) noexcept
    : CreatingDriverWorkResponse() {
    *this = ::std::move(from);
  }

  inline CreatingDriverWorkResponse& operator=(const CreatingDriverWorkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatingDriverWorkResponse& operator=(CreatingDriverWorkResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatingDriverWorkResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatingDriverWorkResponse* internal_default_instance() {
    return reinterpret_cast<const CreatingDriverWorkResponse*>(
               &_CreatingDriverWorkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreatingDriverWorkResponse& a, CreatingDriverWorkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatingDriverWorkResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatingDriverWorkResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatingDriverWorkResponse* New() const final {
    return CreateMaybeMessage<CreatingDriverWorkResponse>(nullptr);
  }

  CreatingDriverWorkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatingDriverWorkResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatingDriverWorkResponse& from);
  void MergeFrom(const CreatingDriverWorkResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatingDriverWorkResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.CreatingDriverWorkResponse";
  }
  protected:
  explicit CreatingDriverWorkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OrderManagement_2eproto);
    return ::descriptor_table_OrderManagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:MailTaxi.CreatingDriverWorkResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrderManagement_2eproto;
};
// -------------------------------------------------------------------

class CloseDriverWorkRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.CloseDriverWorkRequest) */ {
 public:
  inline CloseDriverWorkRequest() : CloseDriverWorkRequest(nullptr) {}
  virtual ~CloseDriverWorkRequest();

  CloseDriverWorkRequest(const CloseDriverWorkRequest& from);
  CloseDriverWorkRequest(CloseDriverWorkRequest&& from) noexcept
    : CloseDriverWorkRequest() {
    *this = ::std::move(from);
  }

  inline CloseDriverWorkRequest& operator=(const CloseDriverWorkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseDriverWorkRequest& operator=(CloseDriverWorkRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseDriverWorkRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseDriverWorkRequest* internal_default_instance() {
    return reinterpret_cast<const CloseDriverWorkRequest*>(
               &_CloseDriverWorkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CloseDriverWorkRequest& a, CloseDriverWorkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseDriverWorkRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseDriverWorkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseDriverWorkRequest* New() const final {
    return CreateMaybeMessage<CloseDriverWorkRequest>(nullptr);
  }

  CloseDriverWorkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseDriverWorkRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseDriverWorkRequest& from);
  void MergeFrom(const CloseDriverWorkRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseDriverWorkRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.CloseDriverWorkRequest";
  }
  protected:
  explicit CloseDriverWorkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OrderManagement_2eproto);
    return ::descriptor_table_OrderManagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriverIdFieldNumber = 1,
  };
  // uint64 driverId = 1;
  void clear_driverid();
  ::PROTOBUF_NAMESPACE_ID::uint64 driverid() const;
  void set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_driverid() const;
  void _internal_set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:MailTaxi.CloseDriverWorkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 driverid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrderManagement_2eproto;
};
// -------------------------------------------------------------------

class CloseDriverWorkResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.CloseDriverWorkResponse) */ {
 public:
  inline CloseDriverWorkResponse() : CloseDriverWorkResponse(nullptr) {}
  virtual ~CloseDriverWorkResponse();

  CloseDriverWorkResponse(const CloseDriverWorkResponse& from);
  CloseDriverWorkResponse(CloseDriverWorkResponse&& from) noexcept
    : CloseDriverWorkResponse() {
    *this = ::std::move(from);
  }

  inline CloseDriverWorkResponse& operator=(const CloseDriverWorkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseDriverWorkResponse& operator=(CloseDriverWorkResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseDriverWorkResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseDriverWorkResponse* internal_default_instance() {
    return reinterpret_cast<const CloseDriverWorkResponse*>(
               &_CloseDriverWorkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CloseDriverWorkResponse& a, CloseDriverWorkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseDriverWorkResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseDriverWorkResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseDriverWorkResponse* New() const final {
    return CreateMaybeMessage<CloseDriverWorkResponse>(nullptr);
  }

  CloseDriverWorkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseDriverWorkResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseDriverWorkResponse& from);
  void MergeFrom(const CloseDriverWorkResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseDriverWorkResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.CloseDriverWorkResponse";
  }
  protected:
  explicit CloseDriverWorkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OrderManagement_2eproto);
    return ::descriptor_table_OrderManagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:MailTaxi.CloseDriverWorkResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrderManagement_2eproto;
};
// -------------------------------------------------------------------

class ProposeOrderRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.ProposeOrderRequest) */ {
 public:
  inline ProposeOrderRequest() : ProposeOrderRequest(nullptr) {}
  virtual ~ProposeOrderRequest();

  ProposeOrderRequest(const ProposeOrderRequest& from);
  ProposeOrderRequest(ProposeOrderRequest&& from) noexcept
    : ProposeOrderRequest() {
    *this = ::std::move(from);
  }

  inline ProposeOrderRequest& operator=(const ProposeOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposeOrderRequest& operator=(ProposeOrderRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProposeOrderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProposeOrderRequest* internal_default_instance() {
    return reinterpret_cast<const ProposeOrderRequest*>(
               &_ProposeOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProposeOrderRequest& a, ProposeOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposeOrderRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposeOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProposeOrderRequest* New() const final {
    return CreateMaybeMessage<ProposeOrderRequest>(nullptr);
  }

  ProposeOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProposeOrderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProposeOrderRequest& from);
  void MergeFrom(const ProposeOrderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposeOrderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.ProposeOrderRequest";
  }
  protected:
  explicit ProposeOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OrderManagement_2eproto);
    return ::descriptor_table_OrderManagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderLocationDataFieldNumber = 2,
    kDriverIdFieldNumber = 1,
  };
  // .MailTaxi.OrderLocationData orderLocationData = 2;
  bool has_orderlocationdata() const;
  private:
  bool _internal_has_orderlocationdata() const;
  public:
  void clear_orderlocationdata();
  const ::MailTaxi::OrderLocationData& orderlocationdata() const;
  ::MailTaxi::OrderLocationData* release_orderlocationdata();
  ::MailTaxi::OrderLocationData* mutable_orderlocationdata();
  void set_allocated_orderlocationdata(::MailTaxi::OrderLocationData* orderlocationdata);
  private:
  const ::MailTaxi::OrderLocationData& _internal_orderlocationdata() const;
  ::MailTaxi::OrderLocationData* _internal_mutable_orderlocationdata();
  public:
  void unsafe_arena_set_allocated_orderlocationdata(
      ::MailTaxi::OrderLocationData* orderlocationdata);
  ::MailTaxi::OrderLocationData* unsafe_arena_release_orderlocationdata();

  // uint64 driverId = 1;
  void clear_driverid();
  ::PROTOBUF_NAMESPACE_ID::uint64 driverid() const;
  void set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_driverid() const;
  void _internal_set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:MailTaxi.ProposeOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MailTaxi::OrderLocationData* orderlocationdata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 driverid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrderManagement_2eproto;
};
// -------------------------------------------------------------------

class ProposeOrderResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.ProposeOrderResponse) */ {
 public:
  inline ProposeOrderResponse() : ProposeOrderResponse(nullptr) {}
  virtual ~ProposeOrderResponse();

  ProposeOrderResponse(const ProposeOrderResponse& from);
  ProposeOrderResponse(ProposeOrderResponse&& from) noexcept
    : ProposeOrderResponse() {
    *this = ::std::move(from);
  }

  inline ProposeOrderResponse& operator=(const ProposeOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposeOrderResponse& operator=(ProposeOrderResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProposeOrderResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProposeOrderResponse* internal_default_instance() {
    return reinterpret_cast<const ProposeOrderResponse*>(
               &_ProposeOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ProposeOrderResponse& a, ProposeOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposeOrderResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposeOrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProposeOrderResponse* New() const final {
    return CreateMaybeMessage<ProposeOrderResponse>(nullptr);
  }

  ProposeOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProposeOrderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProposeOrderResponse& from);
  void MergeFrom(const ProposeOrderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposeOrderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.ProposeOrderResponse";
  }
  protected:
  explicit ProposeOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OrderManagement_2eproto);
    return ::descriptor_table_OrderManagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriverIdFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // uint64 driverId = 1;
  void clear_driverid();
  ::PROTOBUF_NAMESPACE_ID::uint64 driverid() const;
  void set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_driverid() const;
  void _internal_set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:MailTaxi.ProposeOrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 driverid_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrderManagement_2eproto;
};
// -------------------------------------------------------------------

class CreateOrderRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.CreateOrderRequest) */ {
 public:
  inline CreateOrderRequest() : CreateOrderRequest(nullptr) {}
  virtual ~CreateOrderRequest();

  CreateOrderRequest(const CreateOrderRequest& from);
  CreateOrderRequest(CreateOrderRequest&& from) noexcept
    : CreateOrderRequest() {
    *this = ::std::move(from);
  }

  inline CreateOrderRequest& operator=(const CreateOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateOrderRequest& operator=(CreateOrderRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateOrderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateOrderRequest* internal_default_instance() {
    return reinterpret_cast<const CreateOrderRequest*>(
               &_CreateOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CreateOrderRequest& a, CreateOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateOrderRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateOrderRequest* New() const final {
    return CreateMaybeMessage<CreateOrderRequest>(nullptr);
  }

  CreateOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateOrderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateOrderRequest& from);
  void MergeFrom(const CreateOrderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateOrderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.CreateOrderRequest";
  }
  protected:
  explicit CreateOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OrderManagement_2eproto);
    return ::descriptor_table_OrderManagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientTokenFieldNumber = 3,
    kOrderNumFieldNumber = 1,
    kDriverIdFieldNumber = 2,
  };
  // string clientToken = 3;
  void clear_clienttoken();
  const std::string& clienttoken() const;
  void set_clienttoken(const std::string& value);
  void set_clienttoken(std::string&& value);
  void set_clienttoken(const char* value);
  void set_clienttoken(const char* value, size_t size);
  std::string* mutable_clienttoken();
  std::string* release_clienttoken();
  void set_allocated_clienttoken(std::string* clienttoken);
  private:
  const std::string& _internal_clienttoken() const;
  void _internal_set_clienttoken(const std::string& value);
  std::string* _internal_mutable_clienttoken();
  public:

  // uint64 orderNum = 1;
  void clear_ordernum();
  ::PROTOBUF_NAMESPACE_ID::uint64 ordernum() const;
  void set_ordernum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ordernum() const;
  void _internal_set_ordernum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 driverId = 2;
  void clear_driverid();
  ::PROTOBUF_NAMESPACE_ID::uint64 driverid() const;
  void set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_driverid() const;
  void _internal_set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:MailTaxi.CreateOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clienttoken_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ordernum_;
  ::PROTOBUF_NAMESPACE_ID::uint64 driverid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrderManagement_2eproto;
};
// -------------------------------------------------------------------

class CreateOrderResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.CreateOrderResponse) */ {
 public:
  inline CreateOrderResponse() : CreateOrderResponse(nullptr) {}
  virtual ~CreateOrderResponse();

  CreateOrderResponse(const CreateOrderResponse& from);
  CreateOrderResponse(CreateOrderResponse&& from) noexcept
    : CreateOrderResponse() {
    *this = ::std::move(from);
  }

  inline CreateOrderResponse& operator=(const CreateOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateOrderResponse& operator=(CreateOrderResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateOrderResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateOrderResponse* internal_default_instance() {
    return reinterpret_cast<const CreateOrderResponse*>(
               &_CreateOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CreateOrderResponse& a, CreateOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateOrderResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateOrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateOrderResponse* New() const final {
    return CreateMaybeMessage<CreateOrderResponse>(nullptr);
  }

  CreateOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateOrderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateOrderResponse& from);
  void MergeFrom(const CreateOrderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateOrderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.CreateOrderResponse";
  }
  protected:
  explicit CreateOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OrderManagement_2eproto);
    return ::descriptor_table_OrderManagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:MailTaxi.CreateOrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrderManagement_2eproto;
};
// -------------------------------------------------------------------

class RemoveOrderRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.RemoveOrderRequest) */ {
 public:
  inline RemoveOrderRequest() : RemoveOrderRequest(nullptr) {}
  virtual ~RemoveOrderRequest();

  RemoveOrderRequest(const RemoveOrderRequest& from);
  RemoveOrderRequest(RemoveOrderRequest&& from) noexcept
    : RemoveOrderRequest() {
    *this = ::std::move(from);
  }

  inline RemoveOrderRequest& operator=(const RemoveOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveOrderRequest& operator=(RemoveOrderRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveOrderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveOrderRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveOrderRequest*>(
               &_RemoveOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RemoveOrderRequest& a, RemoveOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveOrderRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveOrderRequest* New() const final {
    return CreateMaybeMessage<RemoveOrderRequest>(nullptr);
  }

  RemoveOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveOrderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveOrderRequest& from);
  void MergeFrom(const RemoveOrderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveOrderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.RemoveOrderRequest";
  }
  protected:
  explicit RemoveOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OrderManagement_2eproto);
    return ::descriptor_table_OrderManagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderNumFieldNumber = 1,
  };
  // uint64 orderNum = 1;
  void clear_ordernum();
  ::PROTOBUF_NAMESPACE_ID::uint64 ordernum() const;
  void set_ordernum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ordernum() const;
  void _internal_set_ordernum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:MailTaxi.RemoveOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ordernum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrderManagement_2eproto;
};
// -------------------------------------------------------------------

class RemoveOrderResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.RemoveOrderResponse) */ {
 public:
  inline RemoveOrderResponse() : RemoveOrderResponse(nullptr) {}
  virtual ~RemoveOrderResponse();

  RemoveOrderResponse(const RemoveOrderResponse& from);
  RemoveOrderResponse(RemoveOrderResponse&& from) noexcept
    : RemoveOrderResponse() {
    *this = ::std::move(from);
  }

  inline RemoveOrderResponse& operator=(const RemoveOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveOrderResponse& operator=(RemoveOrderResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveOrderResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveOrderResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveOrderResponse*>(
               &_RemoveOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RemoveOrderResponse& a, RemoveOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveOrderResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveOrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveOrderResponse* New() const final {
    return CreateMaybeMessage<RemoveOrderResponse>(nullptr);
  }

  RemoveOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveOrderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveOrderResponse& from);
  void MergeFrom(const RemoveOrderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveOrderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.RemoveOrderResponse";
  }
  protected:
  explicit RemoveOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OrderManagement_2eproto);
    return ::descriptor_table_OrderManagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:MailTaxi.RemoveOrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrderManagement_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IdentificationData

// string token = 1;
inline void IdentificationData::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IdentificationData::token() const {
  // @@protoc_insertion_point(field_get:MailTaxi.IdentificationData.token)
  return _internal_token();
}
inline void IdentificationData::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:MailTaxi.IdentificationData.token)
}
inline std::string* IdentificationData::mutable_token() {
  // @@protoc_insertion_point(field_mutable:MailTaxi.IdentificationData.token)
  return _internal_mutable_token();
}
inline const std::string& IdentificationData::_internal_token() const {
  return token_.Get();
}
inline void IdentificationData::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IdentificationData::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MailTaxi.IdentificationData.token)
}
inline void IdentificationData::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MailTaxi.IdentificationData.token)
}
inline void IdentificationData::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MailTaxi.IdentificationData.token)
}
inline std::string* IdentificationData::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IdentificationData::release_token() {
  // @@protoc_insertion_point(field_release:MailTaxi.IdentificationData.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IdentificationData::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MailTaxi.IdentificationData.token)
}

// uint64 id = 2;
inline void IdentificationData::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IdentificationData::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IdentificationData::id() const {
  // @@protoc_insertion_point(field_get:MailTaxi.IdentificationData.id)
  return _internal_id();
}
inline void IdentificationData::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void IdentificationData::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MailTaxi.IdentificationData.id)
}

// -------------------------------------------------------------------

// CreatingDriverWorkRequest

// uint64 driverId = 1;
inline void CreatingDriverWorkRequest::clear_driverid() {
  driverid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreatingDriverWorkRequest::_internal_driverid() const {
  return driverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreatingDriverWorkRequest::driverid() const {
  // @@protoc_insertion_point(field_get:MailTaxi.CreatingDriverWorkRequest.driverId)
  return _internal_driverid();
}
inline void CreatingDriverWorkRequest::_internal_set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  driverid_ = value;
}
inline void CreatingDriverWorkRequest::set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_driverid(value);
  // @@protoc_insertion_point(field_set:MailTaxi.CreatingDriverWorkRequest.driverId)
}

// string driverToken = 2;
inline void CreatingDriverWorkRequest::clear_drivertoken() {
  drivertoken_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreatingDriverWorkRequest::drivertoken() const {
  // @@protoc_insertion_point(field_get:MailTaxi.CreatingDriverWorkRequest.driverToken)
  return _internal_drivertoken();
}
inline void CreatingDriverWorkRequest::set_drivertoken(const std::string& value) {
  _internal_set_drivertoken(value);
  // @@protoc_insertion_point(field_set:MailTaxi.CreatingDriverWorkRequest.driverToken)
}
inline std::string* CreatingDriverWorkRequest::mutable_drivertoken() {
  // @@protoc_insertion_point(field_mutable:MailTaxi.CreatingDriverWorkRequest.driverToken)
  return _internal_mutable_drivertoken();
}
inline const std::string& CreatingDriverWorkRequest::_internal_drivertoken() const {
  return drivertoken_.Get();
}
inline void CreatingDriverWorkRequest::_internal_set_drivertoken(const std::string& value) {
  
  drivertoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreatingDriverWorkRequest::set_drivertoken(std::string&& value) {
  
  drivertoken_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MailTaxi.CreatingDriverWorkRequest.driverToken)
}
inline void CreatingDriverWorkRequest::set_drivertoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  drivertoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MailTaxi.CreatingDriverWorkRequest.driverToken)
}
inline void CreatingDriverWorkRequest::set_drivertoken(const char* value,
    size_t size) {
  
  drivertoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MailTaxi.CreatingDriverWorkRequest.driverToken)
}
inline std::string* CreatingDriverWorkRequest::_internal_mutable_drivertoken() {
  
  return drivertoken_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreatingDriverWorkRequest::release_drivertoken() {
  // @@protoc_insertion_point(field_release:MailTaxi.CreatingDriverWorkRequest.driverToken)
  return drivertoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreatingDriverWorkRequest::set_allocated_drivertoken(std::string* drivertoken) {
  if (drivertoken != nullptr) {
    
  } else {
    
  }
  drivertoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), drivertoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MailTaxi.CreatingDriverWorkRequest.driverToken)
}

// -------------------------------------------------------------------

// CreatingDriverWorkResponse

// bool success = 1;
inline void CreatingDriverWorkResponse::clear_success() {
  success_ = false;
}
inline bool CreatingDriverWorkResponse::_internal_success() const {
  return success_;
}
inline bool CreatingDriverWorkResponse::success() const {
  // @@protoc_insertion_point(field_get:MailTaxi.CreatingDriverWorkResponse.success)
  return _internal_success();
}
inline void CreatingDriverWorkResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void CreatingDriverWorkResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:MailTaxi.CreatingDriverWorkResponse.success)
}

// -------------------------------------------------------------------

// CloseDriverWorkRequest

// uint64 driverId = 1;
inline void CloseDriverWorkRequest::clear_driverid() {
  driverid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CloseDriverWorkRequest::_internal_driverid() const {
  return driverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CloseDriverWorkRequest::driverid() const {
  // @@protoc_insertion_point(field_get:MailTaxi.CloseDriverWorkRequest.driverId)
  return _internal_driverid();
}
inline void CloseDriverWorkRequest::_internal_set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  driverid_ = value;
}
inline void CloseDriverWorkRequest::set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_driverid(value);
  // @@protoc_insertion_point(field_set:MailTaxi.CloseDriverWorkRequest.driverId)
}

// -------------------------------------------------------------------

// CloseDriverWorkResponse

// bool success = 1;
inline void CloseDriverWorkResponse::clear_success() {
  success_ = false;
}
inline bool CloseDriverWorkResponse::_internal_success() const {
  return success_;
}
inline bool CloseDriverWorkResponse::success() const {
  // @@protoc_insertion_point(field_get:MailTaxi.CloseDriverWorkResponse.success)
  return _internal_success();
}
inline void CloseDriverWorkResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void CloseDriverWorkResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:MailTaxi.CloseDriverWorkResponse.success)
}

// -------------------------------------------------------------------

// ProposeOrderRequest

// uint64 driverId = 1;
inline void ProposeOrderRequest::clear_driverid() {
  driverid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProposeOrderRequest::_internal_driverid() const {
  return driverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProposeOrderRequest::driverid() const {
  // @@protoc_insertion_point(field_get:MailTaxi.ProposeOrderRequest.driverId)
  return _internal_driverid();
}
inline void ProposeOrderRequest::_internal_set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  driverid_ = value;
}
inline void ProposeOrderRequest::set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_driverid(value);
  // @@protoc_insertion_point(field_set:MailTaxi.ProposeOrderRequest.driverId)
}

// .MailTaxi.OrderLocationData orderLocationData = 2;
inline bool ProposeOrderRequest::_internal_has_orderlocationdata() const {
  return this != internal_default_instance() && orderlocationdata_ != nullptr;
}
inline bool ProposeOrderRequest::has_orderlocationdata() const {
  return _internal_has_orderlocationdata();
}
inline const ::MailTaxi::OrderLocationData& ProposeOrderRequest::_internal_orderlocationdata() const {
  const ::MailTaxi::OrderLocationData* p = orderlocationdata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MailTaxi::OrderLocationData*>(
      &::MailTaxi::_OrderLocationData_default_instance_);
}
inline const ::MailTaxi::OrderLocationData& ProposeOrderRequest::orderlocationdata() const {
  // @@protoc_insertion_point(field_get:MailTaxi.ProposeOrderRequest.orderLocationData)
  return _internal_orderlocationdata();
}
inline void ProposeOrderRequest::unsafe_arena_set_allocated_orderlocationdata(
    ::MailTaxi::OrderLocationData* orderlocationdata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orderlocationdata_);
  }
  orderlocationdata_ = orderlocationdata;
  if (orderlocationdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MailTaxi.ProposeOrderRequest.orderLocationData)
}
inline ::MailTaxi::OrderLocationData* ProposeOrderRequest::release_orderlocationdata() {
  
  ::MailTaxi::OrderLocationData* temp = orderlocationdata_;
  orderlocationdata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MailTaxi::OrderLocationData* ProposeOrderRequest::unsafe_arena_release_orderlocationdata() {
  // @@protoc_insertion_point(field_release:MailTaxi.ProposeOrderRequest.orderLocationData)
  
  ::MailTaxi::OrderLocationData* temp = orderlocationdata_;
  orderlocationdata_ = nullptr;
  return temp;
}
inline ::MailTaxi::OrderLocationData* ProposeOrderRequest::_internal_mutable_orderlocationdata() {
  
  if (orderlocationdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::MailTaxi::OrderLocationData>(GetArena());
    orderlocationdata_ = p;
  }
  return orderlocationdata_;
}
inline ::MailTaxi::OrderLocationData* ProposeOrderRequest::mutable_orderlocationdata() {
  // @@protoc_insertion_point(field_mutable:MailTaxi.ProposeOrderRequest.orderLocationData)
  return _internal_mutable_orderlocationdata();
}
inline void ProposeOrderRequest::set_allocated_orderlocationdata(::MailTaxi::OrderLocationData* orderlocationdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orderlocationdata_);
  }
  if (orderlocationdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orderlocationdata)->GetArena();
    if (message_arena != submessage_arena) {
      orderlocationdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orderlocationdata, submessage_arena);
    }
    
  } else {
    
  }
  orderlocationdata_ = orderlocationdata;
  // @@protoc_insertion_point(field_set_allocated:MailTaxi.ProposeOrderRequest.orderLocationData)
}

// -------------------------------------------------------------------

// ProposeOrderResponse

// uint64 driverId = 1;
inline void ProposeOrderResponse::clear_driverid() {
  driverid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProposeOrderResponse::_internal_driverid() const {
  return driverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProposeOrderResponse::driverid() const {
  // @@protoc_insertion_point(field_get:MailTaxi.ProposeOrderResponse.driverId)
  return _internal_driverid();
}
inline void ProposeOrderResponse::_internal_set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  driverid_ = value;
}
inline void ProposeOrderResponse::set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_driverid(value);
  // @@protoc_insertion_point(field_set:MailTaxi.ProposeOrderResponse.driverId)
}

// bool success = 2;
inline void ProposeOrderResponse::clear_success() {
  success_ = false;
}
inline bool ProposeOrderResponse::_internal_success() const {
  return success_;
}
inline bool ProposeOrderResponse::success() const {
  // @@protoc_insertion_point(field_get:MailTaxi.ProposeOrderResponse.success)
  return _internal_success();
}
inline void ProposeOrderResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ProposeOrderResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:MailTaxi.ProposeOrderResponse.success)
}

// -------------------------------------------------------------------

// CreateOrderRequest

// uint64 orderNum = 1;
inline void CreateOrderRequest::clear_ordernum() {
  ordernum_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateOrderRequest::_internal_ordernum() const {
  return ordernum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateOrderRequest::ordernum() const {
  // @@protoc_insertion_point(field_get:MailTaxi.CreateOrderRequest.orderNum)
  return _internal_ordernum();
}
inline void CreateOrderRequest::_internal_set_ordernum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ordernum_ = value;
}
inline void CreateOrderRequest::set_ordernum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ordernum(value);
  // @@protoc_insertion_point(field_set:MailTaxi.CreateOrderRequest.orderNum)
}

// uint64 driverId = 2;
inline void CreateOrderRequest::clear_driverid() {
  driverid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateOrderRequest::_internal_driverid() const {
  return driverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateOrderRequest::driverid() const {
  // @@protoc_insertion_point(field_get:MailTaxi.CreateOrderRequest.driverId)
  return _internal_driverid();
}
inline void CreateOrderRequest::_internal_set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  driverid_ = value;
}
inline void CreateOrderRequest::set_driverid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_driverid(value);
  // @@protoc_insertion_point(field_set:MailTaxi.CreateOrderRequest.driverId)
}

// string clientToken = 3;
inline void CreateOrderRequest::clear_clienttoken() {
  clienttoken_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateOrderRequest::clienttoken() const {
  // @@protoc_insertion_point(field_get:MailTaxi.CreateOrderRequest.clientToken)
  return _internal_clienttoken();
}
inline void CreateOrderRequest::set_clienttoken(const std::string& value) {
  _internal_set_clienttoken(value);
  // @@protoc_insertion_point(field_set:MailTaxi.CreateOrderRequest.clientToken)
}
inline std::string* CreateOrderRequest::mutable_clienttoken() {
  // @@protoc_insertion_point(field_mutable:MailTaxi.CreateOrderRequest.clientToken)
  return _internal_mutable_clienttoken();
}
inline const std::string& CreateOrderRequest::_internal_clienttoken() const {
  return clienttoken_.Get();
}
inline void CreateOrderRequest::_internal_set_clienttoken(const std::string& value) {
  
  clienttoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateOrderRequest::set_clienttoken(std::string&& value) {
  
  clienttoken_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MailTaxi.CreateOrderRequest.clientToken)
}
inline void CreateOrderRequest::set_clienttoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clienttoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MailTaxi.CreateOrderRequest.clientToken)
}
inline void CreateOrderRequest::set_clienttoken(const char* value,
    size_t size) {
  
  clienttoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MailTaxi.CreateOrderRequest.clientToken)
}
inline std::string* CreateOrderRequest::_internal_mutable_clienttoken() {
  
  return clienttoken_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateOrderRequest::release_clienttoken() {
  // @@protoc_insertion_point(field_release:MailTaxi.CreateOrderRequest.clientToken)
  return clienttoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateOrderRequest::set_allocated_clienttoken(std::string* clienttoken) {
  if (clienttoken != nullptr) {
    
  } else {
    
  }
  clienttoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clienttoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MailTaxi.CreateOrderRequest.clientToken)
}

// -------------------------------------------------------------------

// CreateOrderResponse

// bool success = 1;
inline void CreateOrderResponse::clear_success() {
  success_ = false;
}
inline bool CreateOrderResponse::_internal_success() const {
  return success_;
}
inline bool CreateOrderResponse::success() const {
  // @@protoc_insertion_point(field_get:MailTaxi.CreateOrderResponse.success)
  return _internal_success();
}
inline void CreateOrderResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void CreateOrderResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:MailTaxi.CreateOrderResponse.success)
}

// -------------------------------------------------------------------

// RemoveOrderRequest

// uint64 orderNum = 1;
inline void RemoveOrderRequest::clear_ordernum() {
  ordernum_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RemoveOrderRequest::_internal_ordernum() const {
  return ordernum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RemoveOrderRequest::ordernum() const {
  // @@protoc_insertion_point(field_get:MailTaxi.RemoveOrderRequest.orderNum)
  return _internal_ordernum();
}
inline void RemoveOrderRequest::_internal_set_ordernum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ordernum_ = value;
}
inline void RemoveOrderRequest::set_ordernum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ordernum(value);
  // @@protoc_insertion_point(field_set:MailTaxi.RemoveOrderRequest.orderNum)
}

// -------------------------------------------------------------------

// RemoveOrderResponse

// bool success = 1;
inline void RemoveOrderResponse::clear_success() {
  success_ = false;
}
inline bool RemoveOrderResponse::_internal_success() const {
  return success_;
}
inline bool RemoveOrderResponse::success() const {
  // @@protoc_insertion_point(field_get:MailTaxi.RemoveOrderResponse.success)
  return _internal_success();
}
inline void RemoveOrderResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void RemoveOrderResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:MailTaxi.RemoveOrderResponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MailTaxi

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_OrderManagement_2eproto
