// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: GeoIndex.proto
#ifndef GRPC_GeoIndex_2eproto__INCLUDED
#define GRPC_GeoIndex_2eproto__INCLUDED

#include "GeoIndex.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace MailTaxi {

class GeoIndex final {
 public:
  static constexpr char const* service_full_name() {
    return "MailTaxi.GeoIndex";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RegisterDriver(::grpc::ClientContext* context, const ::MailTaxi::RegisterDriverRequest& request, ::MailTaxi::RegisterDriverResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::RegisterDriverResponse>> AsyncRegisterDriver(::grpc::ClientContext* context, const ::MailTaxi::RegisterDriverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::RegisterDriverResponse>>(AsyncRegisterDriverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::RegisterDriverResponse>> PrepareAsyncRegisterDriver(::grpc::ClientContext* context, const ::MailTaxi::RegisterDriverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::RegisterDriverResponse>>(PrepareAsyncRegisterDriverRaw(context, request, cq));
    }
    virtual ::grpc::Status SelectDrivers(::grpc::ClientContext* context, const ::MailTaxi::SelectDriversRequest& request, ::MailTaxi::SelectDriversResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::SelectDriversResponse>> AsyncSelectDrivers(::grpc::ClientContext* context, const ::MailTaxi::SelectDriversRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::SelectDriversResponse>>(AsyncSelectDriversRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::SelectDriversResponse>> PrepareAsyncSelectDrivers(::grpc::ClientContext* context, const ::MailTaxi::SelectDriversRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::SelectDriversResponse>>(PrepareAsyncSelectDriversRaw(context, request, cq));
    }
    virtual ::grpc::Status MoveDriver(::grpc::ClientContext* context, const ::MailTaxi::MoveDriverRequest& request, ::MailTaxi::MoveDriverResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::MoveDriverResponse>> AsyncMoveDriver(::grpc::ClientContext* context, const ::MailTaxi::MoveDriverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::MoveDriverResponse>>(AsyncMoveDriverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::MoveDriverResponse>> PrepareAsyncMoveDriver(::grpc::ClientContext* context, const ::MailTaxi::MoveDriverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::MoveDriverResponse>>(PrepareAsyncMoveDriverRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveDriver(::grpc::ClientContext* context, const ::MailTaxi::RemoveDriverRequest& request, ::MailTaxi::RemoveDriverResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::RemoveDriverResponse>> AsyncRemoveDriver(::grpc::ClientContext* context, const ::MailTaxi::RemoveDriverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::RemoveDriverResponse>>(AsyncRemoveDriverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::RemoveDriverResponse>> PrepareAsyncRemoveDriver(::grpc::ClientContext* context, const ::MailTaxi::RemoveDriverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::RemoveDriverResponse>>(PrepareAsyncRemoveDriverRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void RegisterDriver(::grpc::ClientContext* context, const ::MailTaxi::RegisterDriverRequest* request, ::MailTaxi::RegisterDriverResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterDriver(::grpc::ClientContext* context, const ::MailTaxi::RegisterDriverRequest* request, ::MailTaxi::RegisterDriverResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterDriver(::grpc::ClientContext* context, const ::MailTaxi::RegisterDriverRequest* request, ::MailTaxi::RegisterDriverResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SelectDrivers(::grpc::ClientContext* context, const ::MailTaxi::SelectDriversRequest* request, ::MailTaxi::SelectDriversResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SelectDrivers(::grpc::ClientContext* context, const ::MailTaxi::SelectDriversRequest* request, ::MailTaxi::SelectDriversResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SelectDrivers(::grpc::ClientContext* context, const ::MailTaxi::SelectDriversRequest* request, ::MailTaxi::SelectDriversResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void MoveDriver(::grpc::ClientContext* context, const ::MailTaxi::MoveDriverRequest* request, ::MailTaxi::MoveDriverResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void MoveDriver(::grpc::ClientContext* context, const ::MailTaxi::MoveDriverRequest* request, ::MailTaxi::MoveDriverResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void MoveDriver(::grpc::ClientContext* context, const ::MailTaxi::MoveDriverRequest* request, ::MailTaxi::MoveDriverResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RemoveDriver(::grpc::ClientContext* context, const ::MailTaxi::RemoveDriverRequest* request, ::MailTaxi::RemoveDriverResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveDriver(::grpc::ClientContext* context, const ::MailTaxi::RemoveDriverRequest* request, ::MailTaxi::RemoveDriverResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveDriver(::grpc::ClientContext* context, const ::MailTaxi::RemoveDriverRequest* request, ::MailTaxi::RemoveDriverResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::RegisterDriverResponse>* AsyncRegisterDriverRaw(::grpc::ClientContext* context, const ::MailTaxi::RegisterDriverRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::RegisterDriverResponse>* PrepareAsyncRegisterDriverRaw(::grpc::ClientContext* context, const ::MailTaxi::RegisterDriverRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::SelectDriversResponse>* AsyncSelectDriversRaw(::grpc::ClientContext* context, const ::MailTaxi::SelectDriversRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::SelectDriversResponse>* PrepareAsyncSelectDriversRaw(::grpc::ClientContext* context, const ::MailTaxi::SelectDriversRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::MoveDriverResponse>* AsyncMoveDriverRaw(::grpc::ClientContext* context, const ::MailTaxi::MoveDriverRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::MoveDriverResponse>* PrepareAsyncMoveDriverRaw(::grpc::ClientContext* context, const ::MailTaxi::MoveDriverRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::RemoveDriverResponse>* AsyncRemoveDriverRaw(::grpc::ClientContext* context, const ::MailTaxi::RemoveDriverRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::RemoveDriverResponse>* PrepareAsyncRemoveDriverRaw(::grpc::ClientContext* context, const ::MailTaxi::RemoveDriverRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RegisterDriver(::grpc::ClientContext* context, const ::MailTaxi::RegisterDriverRequest& request, ::MailTaxi::RegisterDriverResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::RegisterDriverResponse>> AsyncRegisterDriver(::grpc::ClientContext* context, const ::MailTaxi::RegisterDriverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::RegisterDriverResponse>>(AsyncRegisterDriverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::RegisterDriverResponse>> PrepareAsyncRegisterDriver(::grpc::ClientContext* context, const ::MailTaxi::RegisterDriverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::RegisterDriverResponse>>(PrepareAsyncRegisterDriverRaw(context, request, cq));
    }
    ::grpc::Status SelectDrivers(::grpc::ClientContext* context, const ::MailTaxi::SelectDriversRequest& request, ::MailTaxi::SelectDriversResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::SelectDriversResponse>> AsyncSelectDrivers(::grpc::ClientContext* context, const ::MailTaxi::SelectDriversRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::SelectDriversResponse>>(AsyncSelectDriversRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::SelectDriversResponse>> PrepareAsyncSelectDrivers(::grpc::ClientContext* context, const ::MailTaxi::SelectDriversRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::SelectDriversResponse>>(PrepareAsyncSelectDriversRaw(context, request, cq));
    }
    ::grpc::Status MoveDriver(::grpc::ClientContext* context, const ::MailTaxi::MoveDriverRequest& request, ::MailTaxi::MoveDriverResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::MoveDriverResponse>> AsyncMoveDriver(::grpc::ClientContext* context, const ::MailTaxi::MoveDriverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::MoveDriverResponse>>(AsyncMoveDriverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::MoveDriverResponse>> PrepareAsyncMoveDriver(::grpc::ClientContext* context, const ::MailTaxi::MoveDriverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::MoveDriverResponse>>(PrepareAsyncMoveDriverRaw(context, request, cq));
    }
    ::grpc::Status RemoveDriver(::grpc::ClientContext* context, const ::MailTaxi::RemoveDriverRequest& request, ::MailTaxi::RemoveDriverResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::RemoveDriverResponse>> AsyncRemoveDriver(::grpc::ClientContext* context, const ::MailTaxi::RemoveDriverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::RemoveDriverResponse>>(AsyncRemoveDriverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::RemoveDriverResponse>> PrepareAsyncRemoveDriver(::grpc::ClientContext* context, const ::MailTaxi::RemoveDriverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::RemoveDriverResponse>>(PrepareAsyncRemoveDriverRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RegisterDriver(::grpc::ClientContext* context, const ::MailTaxi::RegisterDriverRequest* request, ::MailTaxi::RegisterDriverResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterDriver(::grpc::ClientContext* context, const ::MailTaxi::RegisterDriverRequest* request, ::MailTaxi::RegisterDriverResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterDriver(::grpc::ClientContext* context, const ::MailTaxi::RegisterDriverRequest* request, ::MailTaxi::RegisterDriverResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SelectDrivers(::grpc::ClientContext* context, const ::MailTaxi::SelectDriversRequest* request, ::MailTaxi::SelectDriversResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SelectDrivers(::grpc::ClientContext* context, const ::MailTaxi::SelectDriversRequest* request, ::MailTaxi::SelectDriversResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SelectDrivers(::grpc::ClientContext* context, const ::MailTaxi::SelectDriversRequest* request, ::MailTaxi::SelectDriversResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void MoveDriver(::grpc::ClientContext* context, const ::MailTaxi::MoveDriverRequest* request, ::MailTaxi::MoveDriverResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void MoveDriver(::grpc::ClientContext* context, const ::MailTaxi::MoveDriverRequest* request, ::MailTaxi::MoveDriverResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void MoveDriver(::grpc::ClientContext* context, const ::MailTaxi::MoveDriverRequest* request, ::MailTaxi::MoveDriverResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RemoveDriver(::grpc::ClientContext* context, const ::MailTaxi::RemoveDriverRequest* request, ::MailTaxi::RemoveDriverResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveDriver(::grpc::ClientContext* context, const ::MailTaxi::RemoveDriverRequest* request, ::MailTaxi::RemoveDriverResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveDriver(::grpc::ClientContext* context, const ::MailTaxi::RemoveDriverRequest* request, ::MailTaxi::RemoveDriverResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::MailTaxi::RegisterDriverResponse>* AsyncRegisterDriverRaw(::grpc::ClientContext* context, const ::MailTaxi::RegisterDriverRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MailTaxi::RegisterDriverResponse>* PrepareAsyncRegisterDriverRaw(::grpc::ClientContext* context, const ::MailTaxi::RegisterDriverRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MailTaxi::SelectDriversResponse>* AsyncSelectDriversRaw(::grpc::ClientContext* context, const ::MailTaxi::SelectDriversRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MailTaxi::SelectDriversResponse>* PrepareAsyncSelectDriversRaw(::grpc::ClientContext* context, const ::MailTaxi::SelectDriversRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MailTaxi::MoveDriverResponse>* AsyncMoveDriverRaw(::grpc::ClientContext* context, const ::MailTaxi::MoveDriverRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MailTaxi::MoveDriverResponse>* PrepareAsyncMoveDriverRaw(::grpc::ClientContext* context, const ::MailTaxi::MoveDriverRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MailTaxi::RemoveDriverResponse>* AsyncRemoveDriverRaw(::grpc::ClientContext* context, const ::MailTaxi::RemoveDriverRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MailTaxi::RemoveDriverResponse>* PrepareAsyncRemoveDriverRaw(::grpc::ClientContext* context, const ::MailTaxi::RemoveDriverRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterDriver_;
    const ::grpc::internal::RpcMethod rpcmethod_SelectDrivers_;
    const ::grpc::internal::RpcMethod rpcmethod_MoveDriver_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveDriver_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RegisterDriver(::grpc::ServerContext* context, const ::MailTaxi::RegisterDriverRequest* request, ::MailTaxi::RegisterDriverResponse* response);
    virtual ::grpc::Status SelectDrivers(::grpc::ServerContext* context, const ::MailTaxi::SelectDriversRequest* request, ::MailTaxi::SelectDriversResponse* response);
    virtual ::grpc::Status MoveDriver(::grpc::ServerContext* context, const ::MailTaxi::MoveDriverRequest* request, ::MailTaxi::MoveDriverResponse* response);
    virtual ::grpc::Status RemoveDriver(::grpc::ServerContext* context, const ::MailTaxi::RemoveDriverRequest* request, ::MailTaxi::RemoveDriverResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterDriver() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDriver(::grpc::ServerContext* /*context*/, const ::MailTaxi::RegisterDriverRequest* /*request*/, ::MailTaxi::RegisterDriverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterDriver(::grpc::ServerContext* context, ::MailTaxi::RegisterDriverRequest* request, ::grpc::ServerAsyncResponseWriter< ::MailTaxi::RegisterDriverResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SelectDrivers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SelectDrivers() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SelectDrivers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectDrivers(::grpc::ServerContext* /*context*/, const ::MailTaxi::SelectDriversRequest* /*request*/, ::MailTaxi::SelectDriversResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSelectDrivers(::grpc::ServerContext* context, ::MailTaxi::SelectDriversRequest* request, ::grpc::ServerAsyncResponseWriter< ::MailTaxi::SelectDriversResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MoveDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MoveDriver() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_MoveDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveDriver(::grpc::ServerContext* /*context*/, const ::MailTaxi::MoveDriverRequest* /*request*/, ::MailTaxi::MoveDriverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveDriver(::grpc::ServerContext* context, ::MailTaxi::MoveDriverRequest* request, ::grpc::ServerAsyncResponseWriter< ::MailTaxi::MoveDriverResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveDriver() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RemoveDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveDriver(::grpc::ServerContext* /*context*/, const ::MailTaxi::RemoveDriverRequest* /*request*/, ::MailTaxi::RemoveDriverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveDriver(::grpc::ServerContext* context, ::MailTaxi::RemoveDriverRequest* request, ::grpc::ServerAsyncResponseWriter< ::MailTaxi::RemoveDriverResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterDriver<WithAsyncMethod_SelectDrivers<WithAsyncMethod_MoveDriver<WithAsyncMethod_RemoveDriver<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RegisterDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RegisterDriver() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::MailTaxi::RegisterDriverRequest, ::MailTaxi::RegisterDriverResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::MailTaxi::RegisterDriverRequest* request, ::MailTaxi::RegisterDriverResponse* response) { return this->RegisterDriver(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterDriver(
        ::grpc::experimental::MessageAllocator< ::MailTaxi::RegisterDriverRequest, ::MailTaxi::RegisterDriverResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MailTaxi::RegisterDriverRequest, ::MailTaxi::RegisterDriverResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RegisterDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDriver(::grpc::ServerContext* /*context*/, const ::MailTaxi::RegisterDriverRequest* /*request*/, ::MailTaxi::RegisterDriverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterDriver(
      ::grpc::CallbackServerContext* /*context*/, const ::MailTaxi::RegisterDriverRequest* /*request*/, ::MailTaxi::RegisterDriverResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterDriver(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::MailTaxi::RegisterDriverRequest* /*request*/, ::MailTaxi::RegisterDriverResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SelectDrivers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SelectDrivers() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::MailTaxi::SelectDriversRequest, ::MailTaxi::SelectDriversResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::MailTaxi::SelectDriversRequest* request, ::MailTaxi::SelectDriversResponse* response) { return this->SelectDrivers(context, request, response); }));}
    void SetMessageAllocatorFor_SelectDrivers(
        ::grpc::experimental::MessageAllocator< ::MailTaxi::SelectDriversRequest, ::MailTaxi::SelectDriversResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MailTaxi::SelectDriversRequest, ::MailTaxi::SelectDriversResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SelectDrivers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectDrivers(::grpc::ServerContext* /*context*/, const ::MailTaxi::SelectDriversRequest* /*request*/, ::MailTaxi::SelectDriversResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SelectDrivers(
      ::grpc::CallbackServerContext* /*context*/, const ::MailTaxi::SelectDriversRequest* /*request*/, ::MailTaxi::SelectDriversResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SelectDrivers(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::MailTaxi::SelectDriversRequest* /*request*/, ::MailTaxi::SelectDriversResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_MoveDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_MoveDriver() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::MailTaxi::MoveDriverRequest, ::MailTaxi::MoveDriverResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::MailTaxi::MoveDriverRequest* request, ::MailTaxi::MoveDriverResponse* response) { return this->MoveDriver(context, request, response); }));}
    void SetMessageAllocatorFor_MoveDriver(
        ::grpc::experimental::MessageAllocator< ::MailTaxi::MoveDriverRequest, ::MailTaxi::MoveDriverResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MailTaxi::MoveDriverRequest, ::MailTaxi::MoveDriverResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_MoveDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveDriver(::grpc::ServerContext* /*context*/, const ::MailTaxi::MoveDriverRequest* /*request*/, ::MailTaxi::MoveDriverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* MoveDriver(
      ::grpc::CallbackServerContext* /*context*/, const ::MailTaxi::MoveDriverRequest* /*request*/, ::MailTaxi::MoveDriverResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* MoveDriver(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::MailTaxi::MoveDriverRequest* /*request*/, ::MailTaxi::MoveDriverResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemoveDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RemoveDriver() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::MailTaxi::RemoveDriverRequest, ::MailTaxi::RemoveDriverResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::MailTaxi::RemoveDriverRequest* request, ::MailTaxi::RemoveDriverResponse* response) { return this->RemoveDriver(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveDriver(
        ::grpc::experimental::MessageAllocator< ::MailTaxi::RemoveDriverRequest, ::MailTaxi::RemoveDriverResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MailTaxi::RemoveDriverRequest, ::MailTaxi::RemoveDriverResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemoveDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveDriver(::grpc::ServerContext* /*context*/, const ::MailTaxi::RemoveDriverRequest* /*request*/, ::MailTaxi::RemoveDriverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveDriver(
      ::grpc::CallbackServerContext* /*context*/, const ::MailTaxi::RemoveDriverRequest* /*request*/, ::MailTaxi::RemoveDriverResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveDriver(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::MailTaxi::RemoveDriverRequest* /*request*/, ::MailTaxi::RemoveDriverResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_RegisterDriver<ExperimentalWithCallbackMethod_SelectDrivers<ExperimentalWithCallbackMethod_MoveDriver<ExperimentalWithCallbackMethod_RemoveDriver<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_RegisterDriver<ExperimentalWithCallbackMethod_SelectDrivers<ExperimentalWithCallbackMethod_MoveDriver<ExperimentalWithCallbackMethod_RemoveDriver<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterDriver() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDriver(::grpc::ServerContext* /*context*/, const ::MailTaxi::RegisterDriverRequest* /*request*/, ::MailTaxi::RegisterDriverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SelectDrivers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SelectDrivers() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SelectDrivers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectDrivers(::grpc::ServerContext* /*context*/, const ::MailTaxi::SelectDriversRequest* /*request*/, ::MailTaxi::SelectDriversResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MoveDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MoveDriver() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_MoveDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveDriver(::grpc::ServerContext* /*context*/, const ::MailTaxi::MoveDriverRequest* /*request*/, ::MailTaxi::MoveDriverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveDriver() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RemoveDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveDriver(::grpc::ServerContext* /*context*/, const ::MailTaxi::RemoveDriverRequest* /*request*/, ::MailTaxi::RemoveDriverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterDriver() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDriver(::grpc::ServerContext* /*context*/, const ::MailTaxi::RegisterDriverRequest* /*request*/, ::MailTaxi::RegisterDriverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterDriver(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SelectDrivers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SelectDrivers() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SelectDrivers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectDrivers(::grpc::ServerContext* /*context*/, const ::MailTaxi::SelectDriversRequest* /*request*/, ::MailTaxi::SelectDriversResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSelectDrivers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MoveDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MoveDriver() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_MoveDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveDriver(::grpc::ServerContext* /*context*/, const ::MailTaxi::MoveDriverRequest* /*request*/, ::MailTaxi::MoveDriverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveDriver(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveDriver() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RemoveDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveDriver(::grpc::ServerContext* /*context*/, const ::MailTaxi::RemoveDriverRequest* /*request*/, ::MailTaxi::RemoveDriverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveDriver(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RegisterDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RegisterDriver() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterDriver(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RegisterDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDriver(::grpc::ServerContext* /*context*/, const ::MailTaxi::RegisterDriverRequest* /*request*/, ::MailTaxi::RegisterDriverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterDriver(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterDriver(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SelectDrivers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SelectDrivers() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SelectDrivers(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SelectDrivers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectDrivers(::grpc::ServerContext* /*context*/, const ::MailTaxi::SelectDriversRequest* /*request*/, ::MailTaxi::SelectDriversResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SelectDrivers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SelectDrivers(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_MoveDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_MoveDriver() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MoveDriver(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_MoveDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveDriver(::grpc::ServerContext* /*context*/, const ::MailTaxi::MoveDriverRequest* /*request*/, ::MailTaxi::MoveDriverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* MoveDriver(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* MoveDriver(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemoveDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RemoveDriver() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveDriver(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RemoveDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveDriver(::grpc::ServerContext* /*context*/, const ::MailTaxi::RemoveDriverRequest* /*request*/, ::MailTaxi::RemoveDriverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveDriver(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveDriver(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterDriver() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MailTaxi::RegisterDriverRequest, ::MailTaxi::RegisterDriverResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MailTaxi::RegisterDriverRequest, ::MailTaxi::RegisterDriverResponse>* streamer) {
                       return this->StreamedRegisterDriver(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterDriver(::grpc::ServerContext* /*context*/, const ::MailTaxi::RegisterDriverRequest* /*request*/, ::MailTaxi::RegisterDriverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterDriver(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MailTaxi::RegisterDriverRequest,::MailTaxi::RegisterDriverResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SelectDrivers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SelectDrivers() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MailTaxi::SelectDriversRequest, ::MailTaxi::SelectDriversResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MailTaxi::SelectDriversRequest, ::MailTaxi::SelectDriversResponse>* streamer) {
                       return this->StreamedSelectDrivers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SelectDrivers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SelectDrivers(::grpc::ServerContext* /*context*/, const ::MailTaxi::SelectDriversRequest* /*request*/, ::MailTaxi::SelectDriversResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSelectDrivers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MailTaxi::SelectDriversRequest,::MailTaxi::SelectDriversResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MoveDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MoveDriver() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MailTaxi::MoveDriverRequest, ::MailTaxi::MoveDriverResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MailTaxi::MoveDriverRequest, ::MailTaxi::MoveDriverResponse>* streamer) {
                       return this->StreamedMoveDriver(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MoveDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MoveDriver(::grpc::ServerContext* /*context*/, const ::MailTaxi::MoveDriverRequest* /*request*/, ::MailTaxi::MoveDriverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMoveDriver(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MailTaxi::MoveDriverRequest,::MailTaxi::MoveDriverResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveDriver() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MailTaxi::RemoveDriverRequest, ::MailTaxi::RemoveDriverResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MailTaxi::RemoveDriverRequest, ::MailTaxi::RemoveDriverResponse>* streamer) {
                       return this->StreamedRemoveDriver(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveDriver(::grpc::ServerContext* /*context*/, const ::MailTaxi::RemoveDriverRequest* /*request*/, ::MailTaxi::RemoveDriverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveDriver(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MailTaxi::RemoveDriverRequest,::MailTaxi::RemoveDriverResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterDriver<WithStreamedUnaryMethod_SelectDrivers<WithStreamedUnaryMethod_MoveDriver<WithStreamedUnaryMethod_RemoveDriver<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterDriver<WithStreamedUnaryMethod_SelectDrivers<WithStreamedUnaryMethod_MoveDriver<WithStreamedUnaryMethod_RemoveDriver<Service > > > > StreamedService;
};

}  // namespace MailTaxi


#endif  // GRPC_GeoIndex_2eproto__INCLUDED
