// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: OrderManagement.proto

#include "OrderManagement.pb.h"
#include "OrderManagement.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace MailTaxi {

static const char* OrderManager_method_names[] = {
  "/MailTaxi.OrderManager/CreatingDriverWork",
  "/MailTaxi.OrderManager/CloseDriverWork",
  "/MailTaxi.OrderManager/ProposeOrder",
  "/MailTaxi.OrderManager/CreateOrder",
  "/MailTaxi.OrderManager/RemoveOrder",
};

std::unique_ptr< OrderManager::Stub> OrderManager::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OrderManager::Stub> stub(new OrderManager::Stub(channel));
  return stub;
}

OrderManager::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreatingDriverWork_(OrderManager_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CloseDriverWork_(OrderManager_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ProposeOrder_(OrderManager_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateOrder_(OrderManager_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveOrder_(OrderManager_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OrderManager::Stub::CreatingDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CreatingDriverWorkRequest& request, ::MailTaxi::CreatingDriverWorkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreatingDriverWork_, context, request, response);
}

void OrderManager::Stub::experimental_async::CreatingDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CreatingDriverWorkRequest* request, ::MailTaxi::CreatingDriverWorkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreatingDriverWork_, context, request, response, std::move(f));
}

void OrderManager::Stub::experimental_async::CreatingDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CreatingDriverWorkRequest* request, ::MailTaxi::CreatingDriverWorkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreatingDriverWork_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MailTaxi::CreatingDriverWorkResponse>* OrderManager::Stub::PrepareAsyncCreatingDriverWorkRaw(::grpc::ClientContext* context, const ::MailTaxi::CreatingDriverWorkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MailTaxi::CreatingDriverWorkResponse>::Create(channel_.get(), cq, rpcmethod_CreatingDriverWork_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::MailTaxi::CreatingDriverWorkResponse>* OrderManager::Stub::AsyncCreatingDriverWorkRaw(::grpc::ClientContext* context, const ::MailTaxi::CreatingDriverWorkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreatingDriverWorkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrderManager::Stub::CloseDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CloseDriverWorkRequest& request, ::MailTaxi::CloseDriverWorkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CloseDriverWork_, context, request, response);
}

void OrderManager::Stub::experimental_async::CloseDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CloseDriverWorkRequest* request, ::MailTaxi::CloseDriverWorkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CloseDriverWork_, context, request, response, std::move(f));
}

void OrderManager::Stub::experimental_async::CloseDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CloseDriverWorkRequest* request, ::MailTaxi::CloseDriverWorkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CloseDriverWork_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MailTaxi::CloseDriverWorkResponse>* OrderManager::Stub::PrepareAsyncCloseDriverWorkRaw(::grpc::ClientContext* context, const ::MailTaxi::CloseDriverWorkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MailTaxi::CloseDriverWorkResponse>::Create(channel_.get(), cq, rpcmethod_CloseDriverWork_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::MailTaxi::CloseDriverWorkResponse>* OrderManager::Stub::AsyncCloseDriverWorkRaw(::grpc::ClientContext* context, const ::MailTaxi::CloseDriverWorkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCloseDriverWorkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrderManager::Stub::ProposeOrder(::grpc::ClientContext* context, const ::MailTaxi::ProposeOrderRequest& request, ::MailTaxi::ProposeOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ProposeOrder_, context, request, response);
}

void OrderManager::Stub::experimental_async::ProposeOrder(::grpc::ClientContext* context, const ::MailTaxi::ProposeOrderRequest* request, ::MailTaxi::ProposeOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ProposeOrder_, context, request, response, std::move(f));
}

void OrderManager::Stub::experimental_async::ProposeOrder(::grpc::ClientContext* context, const ::MailTaxi::ProposeOrderRequest* request, ::MailTaxi::ProposeOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ProposeOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MailTaxi::ProposeOrderResponse>* OrderManager::Stub::PrepareAsyncProposeOrderRaw(::grpc::ClientContext* context, const ::MailTaxi::ProposeOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MailTaxi::ProposeOrderResponse>::Create(channel_.get(), cq, rpcmethod_ProposeOrder_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::MailTaxi::ProposeOrderResponse>* OrderManager::Stub::AsyncProposeOrderRaw(::grpc::ClientContext* context, const ::MailTaxi::ProposeOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProposeOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrderManager::Stub::CreateOrder(::grpc::ClientContext* context, const ::MailTaxi::CreateOrderRequest& request, ::MailTaxi::CreateOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateOrder_, context, request, response);
}

void OrderManager::Stub::experimental_async::CreateOrder(::grpc::ClientContext* context, const ::MailTaxi::CreateOrderRequest* request, ::MailTaxi::CreateOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateOrder_, context, request, response, std::move(f));
}

void OrderManager::Stub::experimental_async::CreateOrder(::grpc::ClientContext* context, const ::MailTaxi::CreateOrderRequest* request, ::MailTaxi::CreateOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MailTaxi::CreateOrderResponse>* OrderManager::Stub::PrepareAsyncCreateOrderRaw(::grpc::ClientContext* context, const ::MailTaxi::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MailTaxi::CreateOrderResponse>::Create(channel_.get(), cq, rpcmethod_CreateOrder_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::MailTaxi::CreateOrderResponse>* OrderManager::Stub::AsyncCreateOrderRaw(::grpc::ClientContext* context, const ::MailTaxi::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrderManager::Stub::RemoveOrder(::grpc::ClientContext* context, const ::MailTaxi::RemoveOrderRequest& request, ::MailTaxi::RemoveOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveOrder_, context, request, response);
}

void OrderManager::Stub::experimental_async::RemoveOrder(::grpc::ClientContext* context, const ::MailTaxi::RemoveOrderRequest* request, ::MailTaxi::RemoveOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveOrder_, context, request, response, std::move(f));
}

void OrderManager::Stub::experimental_async::RemoveOrder(::grpc::ClientContext* context, const ::MailTaxi::RemoveOrderRequest* request, ::MailTaxi::RemoveOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MailTaxi::RemoveOrderResponse>* OrderManager::Stub::PrepareAsyncRemoveOrderRaw(::grpc::ClientContext* context, const ::MailTaxi::RemoveOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MailTaxi::RemoveOrderResponse>::Create(channel_.get(), cq, rpcmethod_RemoveOrder_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::MailTaxi::RemoveOrderResponse>* OrderManager::Stub::AsyncRemoveOrderRaw(::grpc::ClientContext* context, const ::MailTaxi::RemoveOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

OrderManager::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderManager_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderManager::Service, ::MailTaxi::CreatingDriverWorkRequest, ::MailTaxi::CreatingDriverWorkResponse>(
          [](OrderManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MailTaxi::CreatingDriverWorkRequest* req,
             ::MailTaxi::CreatingDriverWorkResponse* resp) {
               return service->CreatingDriverWork(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderManager_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderManager::Service, ::MailTaxi::CloseDriverWorkRequest, ::MailTaxi::CloseDriverWorkResponse>(
          [](OrderManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MailTaxi::CloseDriverWorkRequest* req,
             ::MailTaxi::CloseDriverWorkResponse* resp) {
               return service->CloseDriverWork(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderManager_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderManager::Service, ::MailTaxi::ProposeOrderRequest, ::MailTaxi::ProposeOrderResponse>(
          [](OrderManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MailTaxi::ProposeOrderRequest* req,
             ::MailTaxi::ProposeOrderResponse* resp) {
               return service->ProposeOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderManager_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderManager::Service, ::MailTaxi::CreateOrderRequest, ::MailTaxi::CreateOrderResponse>(
          [](OrderManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MailTaxi::CreateOrderRequest* req,
             ::MailTaxi::CreateOrderResponse* resp) {
               return service->CreateOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderManager_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderManager::Service, ::MailTaxi::RemoveOrderRequest, ::MailTaxi::RemoveOrderResponse>(
          [](OrderManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MailTaxi::RemoveOrderRequest* req,
             ::MailTaxi::RemoveOrderResponse* resp) {
               return service->RemoveOrder(ctx, req, resp);
             }, this)));
}

OrderManager::Service::~Service() {
}

::grpc::Status OrderManager::Service::CreatingDriverWork(::grpc::ServerContext* context, const ::MailTaxi::CreatingDriverWorkRequest* request, ::MailTaxi::CreatingDriverWorkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrderManager::Service::CloseDriverWork(::grpc::ServerContext* context, const ::MailTaxi::CloseDriverWorkRequest* request, ::MailTaxi::CloseDriverWorkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrderManager::Service::ProposeOrder(::grpc::ServerContext* context, const ::MailTaxi::ProposeOrderRequest* request, ::MailTaxi::ProposeOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrderManager::Service::CreateOrder(::grpc::ServerContext* context, const ::MailTaxi::CreateOrderRequest* request, ::MailTaxi::CreateOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrderManager::Service::RemoveOrder(::grpc::ServerContext* context, const ::MailTaxi::RemoveOrderRequest* request, ::MailTaxi::RemoveOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace MailTaxi

