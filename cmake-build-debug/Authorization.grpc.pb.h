// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Authorization.proto
#ifndef GRPC_Authorization_2eproto__INCLUDED
#define GRPC_Authorization_2eproto__INCLUDED

#include "Authorization.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace MailTaxi {

class Authorization final {
 public:
  static constexpr char const* service_full_name() {
    return "MailTaxi.Authorization";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Registration(::grpc::ClientContext* context, const ::MailTaxi::RegistrationRequest& request, ::MailTaxi::RegistrationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::RegistrationResponse>> AsyncRegistration(::grpc::ClientContext* context, const ::MailTaxi::RegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::RegistrationResponse>>(AsyncRegistrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::RegistrationResponse>> PrepareAsyncRegistration(::grpc::ClientContext* context, const ::MailTaxi::RegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::RegistrationResponse>>(PrepareAsyncRegistrationRaw(context, request, cq));
    }
    virtual ::grpc::Status Authorization(::grpc::ClientContext* context, const ::MailTaxi::AuthorizationRequest& request, ::MailTaxi::AuthorizationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::AuthorizationResponse>> AsyncAuthorization(::grpc::ClientContext* context, const ::MailTaxi::AuthorizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::AuthorizationResponse>>(AsyncAuthorizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::AuthorizationResponse>> PrepareAsyncAuthorization(::grpc::ClientContext* context, const ::MailTaxi::AuthorizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::AuthorizationResponse>>(PrepareAsyncAuthorizationRaw(context, request, cq));
    }
    virtual ::grpc::Status StartDriverWork(::grpc::ClientContext* context, const ::MailTaxi::StartDriverWorkRequest& request, ::MailTaxi::StartDriverWorkResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::StartDriverWorkResponse>> AsyncStartDriverWork(::grpc::ClientContext* context, const ::MailTaxi::StartDriverWorkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::StartDriverWorkResponse>>(AsyncStartDriverWorkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::StartDriverWorkResponse>> PrepareAsyncStartDriverWork(::grpc::ClientContext* context, const ::MailTaxi::StartDriverWorkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::StartDriverWorkResponse>>(PrepareAsyncStartDriverWorkRaw(context, request, cq));
    }
    virtual ::grpc::Status EndDriverWork(::grpc::ClientContext* context, const ::MailTaxi::EndDriverWorkRequest& request, ::MailTaxi::EndDriverWorkResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::EndDriverWorkResponse>> AsyncEndDriverWork(::grpc::ClientContext* context, const ::MailTaxi::EndDriverWorkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::EndDriverWorkResponse>>(AsyncEndDriverWorkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::EndDriverWorkResponse>> PrepareAsyncEndDriverWork(::grpc::ClientContext* context, const ::MailTaxi::EndDriverWorkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::EndDriverWorkResponse>>(PrepareAsyncEndDriverWorkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::MailTaxi::MakeOrderResponse>> MakeOrder(::grpc::ClientContext* context, const ::MailTaxi::MakeOrderRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::MailTaxi::MakeOrderResponse>>(MakeOrderRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MailTaxi::MakeOrderResponse>> AsyncMakeOrder(::grpc::ClientContext* context, const ::MailTaxi::MakeOrderRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MailTaxi::MakeOrderResponse>>(AsyncMakeOrderRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MailTaxi::MakeOrderResponse>> PrepareAsyncMakeOrder(::grpc::ClientContext* context, const ::MailTaxi::MakeOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MailTaxi::MakeOrderResponse>>(PrepareAsyncMakeOrderRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Registration(::grpc::ClientContext* context, const ::MailTaxi::RegistrationRequest* request, ::MailTaxi::RegistrationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Registration(::grpc::ClientContext* context, const ::MailTaxi::RegistrationRequest* request, ::MailTaxi::RegistrationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Registration(::grpc::ClientContext* context, const ::MailTaxi::RegistrationRequest* request, ::MailTaxi::RegistrationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Authorization(::grpc::ClientContext* context, const ::MailTaxi::AuthorizationRequest* request, ::MailTaxi::AuthorizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Authorization(::grpc::ClientContext* context, const ::MailTaxi::AuthorizationRequest* request, ::MailTaxi::AuthorizationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Authorization(::grpc::ClientContext* context, const ::MailTaxi::AuthorizationRequest* request, ::MailTaxi::AuthorizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void StartDriverWork(::grpc::ClientContext* context, const ::MailTaxi::StartDriverWorkRequest* request, ::MailTaxi::StartDriverWorkResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartDriverWork(::grpc::ClientContext* context, const ::MailTaxi::StartDriverWorkRequest* request, ::MailTaxi::StartDriverWorkResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StartDriverWork(::grpc::ClientContext* context, const ::MailTaxi::StartDriverWorkRequest* request, ::MailTaxi::StartDriverWorkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void EndDriverWork(::grpc::ClientContext* context, const ::MailTaxi::EndDriverWorkRequest* request, ::MailTaxi::EndDriverWorkResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void EndDriverWork(::grpc::ClientContext* context, const ::MailTaxi::EndDriverWorkRequest* request, ::MailTaxi::EndDriverWorkResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void EndDriverWork(::grpc::ClientContext* context, const ::MailTaxi::EndDriverWorkRequest* request, ::MailTaxi::EndDriverWorkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void MakeOrder(::grpc::ClientContext* context, ::MailTaxi::MakeOrderRequest* request, ::grpc::ClientReadReactor< ::MailTaxi::MakeOrderResponse>* reactor) = 0;
      #else
      virtual void MakeOrder(::grpc::ClientContext* context, ::MailTaxi::MakeOrderRequest* request, ::grpc::experimental::ClientReadReactor< ::MailTaxi::MakeOrderResponse>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::RegistrationResponse>* AsyncRegistrationRaw(::grpc::ClientContext* context, const ::MailTaxi::RegistrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::RegistrationResponse>* PrepareAsyncRegistrationRaw(::grpc::ClientContext* context, const ::MailTaxi::RegistrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::AuthorizationResponse>* AsyncAuthorizationRaw(::grpc::ClientContext* context, const ::MailTaxi::AuthorizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::AuthorizationResponse>* PrepareAsyncAuthorizationRaw(::grpc::ClientContext* context, const ::MailTaxi::AuthorizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::StartDriverWorkResponse>* AsyncStartDriverWorkRaw(::grpc::ClientContext* context, const ::MailTaxi::StartDriverWorkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::StartDriverWorkResponse>* PrepareAsyncStartDriverWorkRaw(::grpc::ClientContext* context, const ::MailTaxi::StartDriverWorkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::EndDriverWorkResponse>* AsyncEndDriverWorkRaw(::grpc::ClientContext* context, const ::MailTaxi::EndDriverWorkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::EndDriverWorkResponse>* PrepareAsyncEndDriverWorkRaw(::grpc::ClientContext* context, const ::MailTaxi::EndDriverWorkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::MailTaxi::MakeOrderResponse>* MakeOrderRaw(::grpc::ClientContext* context, const ::MailTaxi::MakeOrderRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::MailTaxi::MakeOrderResponse>* AsyncMakeOrderRaw(::grpc::ClientContext* context, const ::MailTaxi::MakeOrderRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::MailTaxi::MakeOrderResponse>* PrepareAsyncMakeOrderRaw(::grpc::ClientContext* context, const ::MailTaxi::MakeOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Registration(::grpc::ClientContext* context, const ::MailTaxi::RegistrationRequest& request, ::MailTaxi::RegistrationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::RegistrationResponse>> AsyncRegistration(::grpc::ClientContext* context, const ::MailTaxi::RegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::RegistrationResponse>>(AsyncRegistrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::RegistrationResponse>> PrepareAsyncRegistration(::grpc::ClientContext* context, const ::MailTaxi::RegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::RegistrationResponse>>(PrepareAsyncRegistrationRaw(context, request, cq));
    }
    ::grpc::Status Authorization(::grpc::ClientContext* context, const ::MailTaxi::AuthorizationRequest& request, ::MailTaxi::AuthorizationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::AuthorizationResponse>> AsyncAuthorization(::grpc::ClientContext* context, const ::MailTaxi::AuthorizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::AuthorizationResponse>>(AsyncAuthorizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::AuthorizationResponse>> PrepareAsyncAuthorization(::grpc::ClientContext* context, const ::MailTaxi::AuthorizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::AuthorizationResponse>>(PrepareAsyncAuthorizationRaw(context, request, cq));
    }
    ::grpc::Status StartDriverWork(::grpc::ClientContext* context, const ::MailTaxi::StartDriverWorkRequest& request, ::MailTaxi::StartDriverWorkResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::StartDriverWorkResponse>> AsyncStartDriverWork(::grpc::ClientContext* context, const ::MailTaxi::StartDriverWorkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::StartDriverWorkResponse>>(AsyncStartDriverWorkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::StartDriverWorkResponse>> PrepareAsyncStartDriverWork(::grpc::ClientContext* context, const ::MailTaxi::StartDriverWorkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::StartDriverWorkResponse>>(PrepareAsyncStartDriverWorkRaw(context, request, cq));
    }
    ::grpc::Status EndDriverWork(::grpc::ClientContext* context, const ::MailTaxi::EndDriverWorkRequest& request, ::MailTaxi::EndDriverWorkResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::EndDriverWorkResponse>> AsyncEndDriverWork(::grpc::ClientContext* context, const ::MailTaxi::EndDriverWorkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::EndDriverWorkResponse>>(AsyncEndDriverWorkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::EndDriverWorkResponse>> PrepareAsyncEndDriverWork(::grpc::ClientContext* context, const ::MailTaxi::EndDriverWorkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::EndDriverWorkResponse>>(PrepareAsyncEndDriverWorkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::MailTaxi::MakeOrderResponse>> MakeOrder(::grpc::ClientContext* context, const ::MailTaxi::MakeOrderRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::MailTaxi::MakeOrderResponse>>(MakeOrderRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::MailTaxi::MakeOrderResponse>> AsyncMakeOrder(::grpc::ClientContext* context, const ::MailTaxi::MakeOrderRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::MailTaxi::MakeOrderResponse>>(AsyncMakeOrderRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::MailTaxi::MakeOrderResponse>> PrepareAsyncMakeOrder(::grpc::ClientContext* context, const ::MailTaxi::MakeOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::MailTaxi::MakeOrderResponse>>(PrepareAsyncMakeOrderRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Registration(::grpc::ClientContext* context, const ::MailTaxi::RegistrationRequest* request, ::MailTaxi::RegistrationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Registration(::grpc::ClientContext* context, const ::MailTaxi::RegistrationRequest* request, ::MailTaxi::RegistrationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Registration(::grpc::ClientContext* context, const ::MailTaxi::RegistrationRequest* request, ::MailTaxi::RegistrationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Authorization(::grpc::ClientContext* context, const ::MailTaxi::AuthorizationRequest* request, ::MailTaxi::AuthorizationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Authorization(::grpc::ClientContext* context, const ::MailTaxi::AuthorizationRequest* request, ::MailTaxi::AuthorizationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Authorization(::grpc::ClientContext* context, const ::MailTaxi::AuthorizationRequest* request, ::MailTaxi::AuthorizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void StartDriverWork(::grpc::ClientContext* context, const ::MailTaxi::StartDriverWorkRequest* request, ::MailTaxi::StartDriverWorkResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartDriverWork(::grpc::ClientContext* context, const ::MailTaxi::StartDriverWorkRequest* request, ::MailTaxi::StartDriverWorkResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StartDriverWork(::grpc::ClientContext* context, const ::MailTaxi::StartDriverWorkRequest* request, ::MailTaxi::StartDriverWorkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void EndDriverWork(::grpc::ClientContext* context, const ::MailTaxi::EndDriverWorkRequest* request, ::MailTaxi::EndDriverWorkResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void EndDriverWork(::grpc::ClientContext* context, const ::MailTaxi::EndDriverWorkRequest* request, ::MailTaxi::EndDriverWorkResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void EndDriverWork(::grpc::ClientContext* context, const ::MailTaxi::EndDriverWorkRequest* request, ::MailTaxi::EndDriverWorkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void MakeOrder(::grpc::ClientContext* context, ::MailTaxi::MakeOrderRequest* request, ::grpc::ClientReadReactor< ::MailTaxi::MakeOrderResponse>* reactor) override;
      #else
      void MakeOrder(::grpc::ClientContext* context, ::MailTaxi::MakeOrderRequest* request, ::grpc::experimental::ClientReadReactor< ::MailTaxi::MakeOrderResponse>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::MailTaxi::RegistrationResponse>* AsyncRegistrationRaw(::grpc::ClientContext* context, const ::MailTaxi::RegistrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MailTaxi::RegistrationResponse>* PrepareAsyncRegistrationRaw(::grpc::ClientContext* context, const ::MailTaxi::RegistrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MailTaxi::AuthorizationResponse>* AsyncAuthorizationRaw(::grpc::ClientContext* context, const ::MailTaxi::AuthorizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MailTaxi::AuthorizationResponse>* PrepareAsyncAuthorizationRaw(::grpc::ClientContext* context, const ::MailTaxi::AuthorizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MailTaxi::StartDriverWorkResponse>* AsyncStartDriverWorkRaw(::grpc::ClientContext* context, const ::MailTaxi::StartDriverWorkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MailTaxi::StartDriverWorkResponse>* PrepareAsyncStartDriverWorkRaw(::grpc::ClientContext* context, const ::MailTaxi::StartDriverWorkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MailTaxi::EndDriverWorkResponse>* AsyncEndDriverWorkRaw(::grpc::ClientContext* context, const ::MailTaxi::EndDriverWorkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MailTaxi::EndDriverWorkResponse>* PrepareAsyncEndDriverWorkRaw(::grpc::ClientContext* context, const ::MailTaxi::EndDriverWorkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::MailTaxi::MakeOrderResponse>* MakeOrderRaw(::grpc::ClientContext* context, const ::MailTaxi::MakeOrderRequest& request) override;
    ::grpc::ClientAsyncReader< ::MailTaxi::MakeOrderResponse>* AsyncMakeOrderRaw(::grpc::ClientContext* context, const ::MailTaxi::MakeOrderRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::MailTaxi::MakeOrderResponse>* PrepareAsyncMakeOrderRaw(::grpc::ClientContext* context, const ::MailTaxi::MakeOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Registration_;
    const ::grpc::internal::RpcMethod rpcmethod_Authorization_;
    const ::grpc::internal::RpcMethod rpcmethod_StartDriverWork_;
    const ::grpc::internal::RpcMethod rpcmethod_EndDriverWork_;
    const ::grpc::internal::RpcMethod rpcmethod_MakeOrder_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Registration(::grpc::ServerContext* context, const ::MailTaxi::RegistrationRequest* request, ::MailTaxi::RegistrationResponse* response);
    virtual ::grpc::Status Authorization(::grpc::ServerContext* context, const ::MailTaxi::AuthorizationRequest* request, ::MailTaxi::AuthorizationResponse* response);
    virtual ::grpc::Status StartDriverWork(::grpc::ServerContext* context, const ::MailTaxi::StartDriverWorkRequest* request, ::MailTaxi::StartDriverWorkResponse* response);
    virtual ::grpc::Status EndDriverWork(::grpc::ServerContext* context, const ::MailTaxi::EndDriverWorkRequest* request, ::MailTaxi::EndDriverWorkResponse* response);
    virtual ::grpc::Status MakeOrder(::grpc::ServerContext* context, const ::MailTaxi::MakeOrderRequest* request, ::grpc::ServerWriter< ::MailTaxi::MakeOrderResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Registration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Registration() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Registration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Registration(::grpc::ServerContext* /*context*/, const ::MailTaxi::RegistrationRequest* /*request*/, ::MailTaxi::RegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegistration(::grpc::ServerContext* context, ::MailTaxi::RegistrationRequest* request, ::grpc::ServerAsyncResponseWriter< ::MailTaxi::RegistrationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Authorization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Authorization() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Authorization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authorization(::grpc::ServerContext* /*context*/, const ::MailTaxi::AuthorizationRequest* /*request*/, ::MailTaxi::AuthorizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthorization(::grpc::ServerContext* context, ::MailTaxi::AuthorizationRequest* request, ::grpc::ServerAsyncResponseWriter< ::MailTaxi::AuthorizationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartDriverWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartDriverWork() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StartDriverWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartDriverWork(::grpc::ServerContext* /*context*/, const ::MailTaxi::StartDriverWorkRequest* /*request*/, ::MailTaxi::StartDriverWorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartDriverWork(::grpc::ServerContext* context, ::MailTaxi::StartDriverWorkRequest* request, ::grpc::ServerAsyncResponseWriter< ::MailTaxi::StartDriverWorkResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EndDriverWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EndDriverWork() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_EndDriverWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndDriverWork(::grpc::ServerContext* /*context*/, const ::MailTaxi::EndDriverWorkRequest* /*request*/, ::MailTaxi::EndDriverWorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEndDriverWork(::grpc::ServerContext* context, ::MailTaxi::EndDriverWorkRequest* request, ::grpc::ServerAsyncResponseWriter< ::MailTaxi::EndDriverWorkResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MakeOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MakeOrder() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_MakeOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeOrder(::grpc::ServerContext* /*context*/, const ::MailTaxi::MakeOrderRequest* /*request*/, ::grpc::ServerWriter< ::MailTaxi::MakeOrderResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMakeOrder(::grpc::ServerContext* context, ::MailTaxi::MakeOrderRequest* request, ::grpc::ServerAsyncWriter< ::MailTaxi::MakeOrderResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Registration<WithAsyncMethod_Authorization<WithAsyncMethod_StartDriverWork<WithAsyncMethod_EndDriverWork<WithAsyncMethod_MakeOrder<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Registration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Registration() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::MailTaxi::RegistrationRequest, ::MailTaxi::RegistrationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::MailTaxi::RegistrationRequest* request, ::MailTaxi::RegistrationResponse* response) { return this->Registration(context, request, response); }));}
    void SetMessageAllocatorFor_Registration(
        ::grpc::experimental::MessageAllocator< ::MailTaxi::RegistrationRequest, ::MailTaxi::RegistrationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MailTaxi::RegistrationRequest, ::MailTaxi::RegistrationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Registration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Registration(::grpc::ServerContext* /*context*/, const ::MailTaxi::RegistrationRequest* /*request*/, ::MailTaxi::RegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Registration(
      ::grpc::CallbackServerContext* /*context*/, const ::MailTaxi::RegistrationRequest* /*request*/, ::MailTaxi::RegistrationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Registration(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::MailTaxi::RegistrationRequest* /*request*/, ::MailTaxi::RegistrationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Authorization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Authorization() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::MailTaxi::AuthorizationRequest, ::MailTaxi::AuthorizationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::MailTaxi::AuthorizationRequest* request, ::MailTaxi::AuthorizationResponse* response) { return this->Authorization(context, request, response); }));}
    void SetMessageAllocatorFor_Authorization(
        ::grpc::experimental::MessageAllocator< ::MailTaxi::AuthorizationRequest, ::MailTaxi::AuthorizationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MailTaxi::AuthorizationRequest, ::MailTaxi::AuthorizationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Authorization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authorization(::grpc::ServerContext* /*context*/, const ::MailTaxi::AuthorizationRequest* /*request*/, ::MailTaxi::AuthorizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Authorization(
      ::grpc::CallbackServerContext* /*context*/, const ::MailTaxi::AuthorizationRequest* /*request*/, ::MailTaxi::AuthorizationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Authorization(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::MailTaxi::AuthorizationRequest* /*request*/, ::MailTaxi::AuthorizationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StartDriverWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StartDriverWork() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::MailTaxi::StartDriverWorkRequest, ::MailTaxi::StartDriverWorkResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::MailTaxi::StartDriverWorkRequest* request, ::MailTaxi::StartDriverWorkResponse* response) { return this->StartDriverWork(context, request, response); }));}
    void SetMessageAllocatorFor_StartDriverWork(
        ::grpc::experimental::MessageAllocator< ::MailTaxi::StartDriverWorkRequest, ::MailTaxi::StartDriverWorkResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MailTaxi::StartDriverWorkRequest, ::MailTaxi::StartDriverWorkResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StartDriverWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartDriverWork(::grpc::ServerContext* /*context*/, const ::MailTaxi::StartDriverWorkRequest* /*request*/, ::MailTaxi::StartDriverWorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartDriverWork(
      ::grpc::CallbackServerContext* /*context*/, const ::MailTaxi::StartDriverWorkRequest* /*request*/, ::MailTaxi::StartDriverWorkResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartDriverWork(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::MailTaxi::StartDriverWorkRequest* /*request*/, ::MailTaxi::StartDriverWorkResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_EndDriverWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_EndDriverWork() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::MailTaxi::EndDriverWorkRequest, ::MailTaxi::EndDriverWorkResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::MailTaxi::EndDriverWorkRequest* request, ::MailTaxi::EndDriverWorkResponse* response) { return this->EndDriverWork(context, request, response); }));}
    void SetMessageAllocatorFor_EndDriverWork(
        ::grpc::experimental::MessageAllocator< ::MailTaxi::EndDriverWorkRequest, ::MailTaxi::EndDriverWorkResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MailTaxi::EndDriverWorkRequest, ::MailTaxi::EndDriverWorkResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_EndDriverWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndDriverWork(::grpc::ServerContext* /*context*/, const ::MailTaxi::EndDriverWorkRequest* /*request*/, ::MailTaxi::EndDriverWorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* EndDriverWork(
      ::grpc::CallbackServerContext* /*context*/, const ::MailTaxi::EndDriverWorkRequest* /*request*/, ::MailTaxi::EndDriverWorkResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* EndDriverWork(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::MailTaxi::EndDriverWorkRequest* /*request*/, ::MailTaxi::EndDriverWorkResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_MakeOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_MakeOrder() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::MailTaxi::MakeOrderRequest, ::MailTaxi::MakeOrderResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::MailTaxi::MakeOrderRequest* request) { return this->MakeOrder(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_MakeOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeOrder(::grpc::ServerContext* /*context*/, const ::MailTaxi::MakeOrderRequest* /*request*/, ::grpc::ServerWriter< ::MailTaxi::MakeOrderResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::MailTaxi::MakeOrderResponse>* MakeOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::MailTaxi::MakeOrderRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::MailTaxi::MakeOrderResponse>* MakeOrder(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::MailTaxi::MakeOrderRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Registration<ExperimentalWithCallbackMethod_Authorization<ExperimentalWithCallbackMethod_StartDriverWork<ExperimentalWithCallbackMethod_EndDriverWork<ExperimentalWithCallbackMethod_MakeOrder<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Registration<ExperimentalWithCallbackMethod_Authorization<ExperimentalWithCallbackMethod_StartDriverWork<ExperimentalWithCallbackMethod_EndDriverWork<ExperimentalWithCallbackMethod_MakeOrder<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Registration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Registration() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Registration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Registration(::grpc::ServerContext* /*context*/, const ::MailTaxi::RegistrationRequest* /*request*/, ::MailTaxi::RegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Authorization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Authorization() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Authorization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authorization(::grpc::ServerContext* /*context*/, const ::MailTaxi::AuthorizationRequest* /*request*/, ::MailTaxi::AuthorizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartDriverWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartDriverWork() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StartDriverWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartDriverWork(::grpc::ServerContext* /*context*/, const ::MailTaxi::StartDriverWorkRequest* /*request*/, ::MailTaxi::StartDriverWorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EndDriverWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EndDriverWork() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_EndDriverWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndDriverWork(::grpc::ServerContext* /*context*/, const ::MailTaxi::EndDriverWorkRequest* /*request*/, ::MailTaxi::EndDriverWorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MakeOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MakeOrder() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_MakeOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeOrder(::grpc::ServerContext* /*context*/, const ::MailTaxi::MakeOrderRequest* /*request*/, ::grpc::ServerWriter< ::MailTaxi::MakeOrderResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Registration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Registration() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Registration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Registration(::grpc::ServerContext* /*context*/, const ::MailTaxi::RegistrationRequest* /*request*/, ::MailTaxi::RegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegistration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Authorization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Authorization() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Authorization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authorization(::grpc::ServerContext* /*context*/, const ::MailTaxi::AuthorizationRequest* /*request*/, ::MailTaxi::AuthorizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthorization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartDriverWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartDriverWork() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_StartDriverWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartDriverWork(::grpc::ServerContext* /*context*/, const ::MailTaxi::StartDriverWorkRequest* /*request*/, ::MailTaxi::StartDriverWorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartDriverWork(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EndDriverWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EndDriverWork() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_EndDriverWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndDriverWork(::grpc::ServerContext* /*context*/, const ::MailTaxi::EndDriverWorkRequest* /*request*/, ::MailTaxi::EndDriverWorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEndDriverWork(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MakeOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MakeOrder() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_MakeOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeOrder(::grpc::ServerContext* /*context*/, const ::MailTaxi::MakeOrderRequest* /*request*/, ::grpc::ServerWriter< ::MailTaxi::MakeOrderResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMakeOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Registration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Registration() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Registration(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Registration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Registration(::grpc::ServerContext* /*context*/, const ::MailTaxi::RegistrationRequest* /*request*/, ::MailTaxi::RegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Registration(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Registration(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Authorization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Authorization() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Authorization(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Authorization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authorization(::grpc::ServerContext* /*context*/, const ::MailTaxi::AuthorizationRequest* /*request*/, ::MailTaxi::AuthorizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Authorization(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Authorization(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StartDriverWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StartDriverWork() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartDriverWork(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StartDriverWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartDriverWork(::grpc::ServerContext* /*context*/, const ::MailTaxi::StartDriverWorkRequest* /*request*/, ::MailTaxi::StartDriverWorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartDriverWork(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartDriverWork(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_EndDriverWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_EndDriverWork() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EndDriverWork(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_EndDriverWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndDriverWork(::grpc::ServerContext* /*context*/, const ::MailTaxi::EndDriverWorkRequest* /*request*/, ::MailTaxi::EndDriverWorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* EndDriverWork(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* EndDriverWork(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_MakeOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_MakeOrder() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->MakeOrder(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_MakeOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeOrder(::grpc::ServerContext* /*context*/, const ::MailTaxi::MakeOrderRequest* /*request*/, ::grpc::ServerWriter< ::MailTaxi::MakeOrderResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* MakeOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* MakeOrder(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Registration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Registration() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MailTaxi::RegistrationRequest, ::MailTaxi::RegistrationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MailTaxi::RegistrationRequest, ::MailTaxi::RegistrationResponse>* streamer) {
                       return this->StreamedRegistration(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Registration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Registration(::grpc::ServerContext* /*context*/, const ::MailTaxi::RegistrationRequest* /*request*/, ::MailTaxi::RegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegistration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MailTaxi::RegistrationRequest,::MailTaxi::RegistrationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Authorization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Authorization() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MailTaxi::AuthorizationRequest, ::MailTaxi::AuthorizationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MailTaxi::AuthorizationRequest, ::MailTaxi::AuthorizationResponse>* streamer) {
                       return this->StreamedAuthorization(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Authorization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Authorization(::grpc::ServerContext* /*context*/, const ::MailTaxi::AuthorizationRequest* /*request*/, ::MailTaxi::AuthorizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAuthorization(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MailTaxi::AuthorizationRequest,::MailTaxi::AuthorizationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartDriverWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartDriverWork() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MailTaxi::StartDriverWorkRequest, ::MailTaxi::StartDriverWorkResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MailTaxi::StartDriverWorkRequest, ::MailTaxi::StartDriverWorkResponse>* streamer) {
                       return this->StreamedStartDriverWork(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StartDriverWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartDriverWork(::grpc::ServerContext* /*context*/, const ::MailTaxi::StartDriverWorkRequest* /*request*/, ::MailTaxi::StartDriverWorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartDriverWork(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MailTaxi::StartDriverWorkRequest,::MailTaxi::StartDriverWorkResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EndDriverWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EndDriverWork() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MailTaxi::EndDriverWorkRequest, ::MailTaxi::EndDriverWorkResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MailTaxi::EndDriverWorkRequest, ::MailTaxi::EndDriverWorkResponse>* streamer) {
                       return this->StreamedEndDriverWork(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EndDriverWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EndDriverWork(::grpc::ServerContext* /*context*/, const ::MailTaxi::EndDriverWorkRequest* /*request*/, ::MailTaxi::EndDriverWorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEndDriverWork(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MailTaxi::EndDriverWorkRequest,::MailTaxi::EndDriverWorkResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Registration<WithStreamedUnaryMethod_Authorization<WithStreamedUnaryMethod_StartDriverWork<WithStreamedUnaryMethod_EndDriverWork<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_MakeOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_MakeOrder() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::MailTaxi::MakeOrderRequest, ::MailTaxi::MakeOrderResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::MailTaxi::MakeOrderRequest, ::MailTaxi::MakeOrderResponse>* streamer) {
                       return this->StreamedMakeOrder(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_MakeOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MakeOrder(::grpc::ServerContext* /*context*/, const ::MailTaxi::MakeOrderRequest* /*request*/, ::grpc::ServerWriter< ::MailTaxi::MakeOrderResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedMakeOrder(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::MailTaxi::MakeOrderRequest,::MailTaxi::MakeOrderResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_MakeOrder<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Registration<WithStreamedUnaryMethod_Authorization<WithStreamedUnaryMethod_StartDriverWork<WithStreamedUnaryMethod_EndDriverWork<WithSplitStreamingMethod_MakeOrder<Service > > > > > StreamedService;
};

}  // namespace MailTaxi


#endif  // GRPC_Authorization_2eproto__INCLUDED
