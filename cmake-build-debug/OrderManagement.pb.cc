// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OrderManagement.proto

#include "OrderManagement.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_GeoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderLocationData_GeoData_2eproto;
namespace MailTaxi {
class IdentificationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IdentificationData> _instance;
} _IdentificationData_default_instance_;
class CreatingDriverWorkRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreatingDriverWorkRequest> _instance;
} _CreatingDriverWorkRequest_default_instance_;
class CreatingDriverWorkResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreatingDriverWorkResponse> _instance;
} _CreatingDriverWorkResponse_default_instance_;
class CloseDriverWorkRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseDriverWorkRequest> _instance;
} _CloseDriverWorkRequest_default_instance_;
class CloseDriverWorkResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseDriverWorkResponse> _instance;
} _CloseDriverWorkResponse_default_instance_;
class ProposeOrderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProposeOrderRequest> _instance;
} _ProposeOrderRequest_default_instance_;
class ProposeOrderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProposeOrderResponse> _instance;
} _ProposeOrderResponse_default_instance_;
class CreateOrderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateOrderRequest> _instance;
} _CreateOrderRequest_default_instance_;
class CreateOrderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateOrderResponse> _instance;
} _CreateOrderResponse_default_instance_;
class RemoveOrderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveOrderRequest> _instance;
} _RemoveOrderRequest_default_instance_;
class RemoveOrderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveOrderResponse> _instance;
} _RemoveOrderResponse_default_instance_;
}  // namespace MailTaxi
static void InitDefaultsscc_info_CloseDriverWorkRequest_OrderManagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_CloseDriverWorkRequest_default_instance_;
    new (ptr) ::MailTaxi::CloseDriverWorkRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::CloseDriverWorkRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloseDriverWorkRequest_OrderManagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CloseDriverWorkRequest_OrderManagement_2eproto}, {}};

static void InitDefaultsscc_info_CloseDriverWorkResponse_OrderManagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_CloseDriverWorkResponse_default_instance_;
    new (ptr) ::MailTaxi::CloseDriverWorkResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::CloseDriverWorkResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloseDriverWorkResponse_OrderManagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CloseDriverWorkResponse_OrderManagement_2eproto}, {}};

static void InitDefaultsscc_info_CreateOrderRequest_OrderManagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_CreateOrderRequest_default_instance_;
    new (ptr) ::MailTaxi::CreateOrderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::CreateOrderRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateOrderRequest_OrderManagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateOrderRequest_OrderManagement_2eproto}, {}};

static void InitDefaultsscc_info_CreateOrderResponse_OrderManagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_CreateOrderResponse_default_instance_;
    new (ptr) ::MailTaxi::CreateOrderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::CreateOrderResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateOrderResponse_OrderManagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateOrderResponse_OrderManagement_2eproto}, {}};

static void InitDefaultsscc_info_CreatingDriverWorkRequest_OrderManagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_CreatingDriverWorkRequest_default_instance_;
    new (ptr) ::MailTaxi::CreatingDriverWorkRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::CreatingDriverWorkRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreatingDriverWorkRequest_OrderManagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreatingDriverWorkRequest_OrderManagement_2eproto}, {}};

static void InitDefaultsscc_info_CreatingDriverWorkResponse_OrderManagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_CreatingDriverWorkResponse_default_instance_;
    new (ptr) ::MailTaxi::CreatingDriverWorkResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::CreatingDriverWorkResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreatingDriverWorkResponse_OrderManagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreatingDriverWorkResponse_OrderManagement_2eproto}, {}};

static void InitDefaultsscc_info_IdentificationData_OrderManagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_IdentificationData_default_instance_;
    new (ptr) ::MailTaxi::IdentificationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::IdentificationData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IdentificationData_OrderManagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IdentificationData_OrderManagement_2eproto}, {}};

static void InitDefaultsscc_info_ProposeOrderRequest_OrderManagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_ProposeOrderRequest_default_instance_;
    new (ptr) ::MailTaxi::ProposeOrderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::ProposeOrderRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProposeOrderRequest_OrderManagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProposeOrderRequest_OrderManagement_2eproto}, {
      &scc_info_OrderLocationData_GeoData_2eproto.base,}};

static void InitDefaultsscc_info_ProposeOrderResponse_OrderManagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_ProposeOrderResponse_default_instance_;
    new (ptr) ::MailTaxi::ProposeOrderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::ProposeOrderResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProposeOrderResponse_OrderManagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProposeOrderResponse_OrderManagement_2eproto}, {}};

static void InitDefaultsscc_info_RemoveOrderRequest_OrderManagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_RemoveOrderRequest_default_instance_;
    new (ptr) ::MailTaxi::RemoveOrderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::RemoveOrderRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveOrderRequest_OrderManagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveOrderRequest_OrderManagement_2eproto}, {}};

static void InitDefaultsscc_info_RemoveOrderResponse_OrderManagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_RemoveOrderResponse_default_instance_;
    new (ptr) ::MailTaxi::RemoveOrderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::RemoveOrderResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveOrderResponse_OrderManagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveOrderResponse_OrderManagement_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_OrderManagement_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_OrderManagement_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_OrderManagement_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_OrderManagement_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::IdentificationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::IdentificationData, token_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::IdentificationData, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::CreatingDriverWorkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::CreatingDriverWorkRequest, driverid_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::CreatingDriverWorkRequest, drivertoken_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::CreatingDriverWorkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::CreatingDriverWorkResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::CloseDriverWorkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::CloseDriverWorkRequest, driverid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::CloseDriverWorkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::CloseDriverWorkResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::ProposeOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::ProposeOrderRequest, driverid_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::ProposeOrderRequest, orderlocationdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::ProposeOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::ProposeOrderResponse, driverid_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::ProposeOrderResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::CreateOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::CreateOrderRequest, ordernum_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::CreateOrderRequest, driverid_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::CreateOrderRequest, clienttoken_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::CreateOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::CreateOrderResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::RemoveOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::RemoveOrderRequest, ordernum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::RemoveOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::RemoveOrderResponse, success_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MailTaxi::IdentificationData)},
  { 7, -1, sizeof(::MailTaxi::CreatingDriverWorkRequest)},
  { 14, -1, sizeof(::MailTaxi::CreatingDriverWorkResponse)},
  { 20, -1, sizeof(::MailTaxi::CloseDriverWorkRequest)},
  { 26, -1, sizeof(::MailTaxi::CloseDriverWorkResponse)},
  { 32, -1, sizeof(::MailTaxi::ProposeOrderRequest)},
  { 39, -1, sizeof(::MailTaxi::ProposeOrderResponse)},
  { 46, -1, sizeof(::MailTaxi::CreateOrderRequest)},
  { 54, -1, sizeof(::MailTaxi::CreateOrderResponse)},
  { 60, -1, sizeof(::MailTaxi::RemoveOrderRequest)},
  { 66, -1, sizeof(::MailTaxi::RemoveOrderResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_IdentificationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_CreatingDriverWorkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_CreatingDriverWorkResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_CloseDriverWorkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_CloseDriverWorkResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_ProposeOrderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_ProposeOrderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_CreateOrderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_CreateOrderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_RemoveOrderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_RemoveOrderResponse_default_instance_),
};

const char descriptor_table_protodef_OrderManagement_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025OrderManagement.proto\022\010MailTaxi\032\024TaxiF"
  "acilities.proto\032\rGeoData.proto\"/\n\022Identi"
  "ficationData\022\r\n\005token\030\001 \001(\t\022\n\n\002id\030\002 \001(\004\""
  "B\n\031CreatingDriverWorkRequest\022\020\n\010driverId"
  "\030\001 \001(\004\022\023\n\013driverToken\030\002 \001(\t\"-\n\032CreatingD"
  "riverWorkResponse\022\017\n\007success\030\001 \001(\010\"*\n\026Cl"
  "oseDriverWorkRequest\022\020\n\010driverId\030\001 \001(\004\"*"
  "\n\027CloseDriverWorkResponse\022\017\n\007success\030\001 \001"
  "(\010\"_\n\023ProposeOrderRequest\022\020\n\010driverId\030\001 "
  "\001(\004\0226\n\021orderLocationData\030\002 \001(\0132\033.MailTax"
  "i.OrderLocationData\"9\n\024ProposeOrderRespo"
  "nse\022\020\n\010driverId\030\001 \001(\004\022\017\n\007success\030\002 \001(\010\"M"
  "\n\022CreateOrderRequest\022\020\n\010orderNum\030\001 \001(\004\022\020"
  "\n\010driverId\030\002 \001(\004\022\023\n\013clientToken\030\003 \001(\t\"&\n"
  "\023CreateOrderResponse\022\017\n\007success\030\001 \001(\010\"&\n"
  "\022RemoveOrderRequest\022\020\n\010orderNum\030\001 \001(\004\"&\n"
  "\023RemoveOrderResponse\022\017\n\007success\030\001 \001(\0102\270\003"
  "\n\014OrderManager\022a\n\022CreatingDriverWork\022#.M"
  "ailTaxi.CreatingDriverWorkRequest\032$.Mail"
  "Taxi.CreatingDriverWorkResponse\"\000\022X\n\017Clo"
  "seDriverWork\022 .MailTaxi.CloseDriverWorkR"
  "equest\032!.MailTaxi.CloseDriverWorkRespons"
  "e\"\000\022O\n\014ProposeOrder\022\035.MailTaxi.ProposeOr"
  "derRequest\032\036.MailTaxi.ProposeOrderRespon"
  "se\"\000\022L\n\013CreateOrder\022\034.MailTaxi.CreateOrd"
  "erRequest\032\035.MailTaxi.CreateOrderResponse"
  "\"\000\022L\n\013RemoveOrder\022\034.MailTaxi.RemoveOrder"
  "Request\032\035.MailTaxi.RemoveOrderResponse\"\000"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_OrderManagement_2eproto_deps[2] = {
  &::descriptor_table_GeoData_2eproto,
  &::descriptor_table_TaxiFacilities_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_OrderManagement_2eproto_sccs[11] = {
  &scc_info_CloseDriverWorkRequest_OrderManagement_2eproto.base,
  &scc_info_CloseDriverWorkResponse_OrderManagement_2eproto.base,
  &scc_info_CreateOrderRequest_OrderManagement_2eproto.base,
  &scc_info_CreateOrderResponse_OrderManagement_2eproto.base,
  &scc_info_CreatingDriverWorkRequest_OrderManagement_2eproto.base,
  &scc_info_CreatingDriverWorkResponse_OrderManagement_2eproto.base,
  &scc_info_IdentificationData_OrderManagement_2eproto.base,
  &scc_info_ProposeOrderRequest_OrderManagement_2eproto.base,
  &scc_info_ProposeOrderResponse_OrderManagement_2eproto.base,
  &scc_info_RemoveOrderRequest_OrderManagement_2eproto.base,
  &scc_info_RemoveOrderResponse_OrderManagement_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_OrderManagement_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OrderManagement_2eproto = {
  false, false, descriptor_table_protodef_OrderManagement_2eproto, "OrderManagement.proto", 1128,
  &descriptor_table_OrderManagement_2eproto_once, descriptor_table_OrderManagement_2eproto_sccs, descriptor_table_OrderManagement_2eproto_deps, 11, 2,
  schemas, file_default_instances, TableStruct_OrderManagement_2eproto::offsets,
  file_level_metadata_OrderManagement_2eproto, 11, file_level_enum_descriptors_OrderManagement_2eproto, file_level_service_descriptors_OrderManagement_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_OrderManagement_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_OrderManagement_2eproto)), true);
namespace MailTaxi {

// ===================================================================

void IdentificationData::InitAsDefaultInstance() {
}
class IdentificationData::_Internal {
 public:
};

IdentificationData::IdentificationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.IdentificationData)
}
IdentificationData::IdentificationData(const IdentificationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:MailTaxi.IdentificationData)
}

void IdentificationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IdentificationData_OrderManagement_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_ULONGLONG(0);
}

IdentificationData::~IdentificationData() {
  // @@protoc_insertion_point(destructor:MailTaxi.IdentificationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IdentificationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IdentificationData::ArenaDtor(void* object) {
  IdentificationData* _this = reinterpret_cast< IdentificationData* >(object);
  (void)_this;
}
void IdentificationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IdentificationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IdentificationData& IdentificationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IdentificationData_OrderManagement_2eproto.base);
  return *internal_default_instance();
}


void IdentificationData::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.IdentificationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdentificationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MailTaxi.IdentificationData.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IdentificationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.IdentificationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MailTaxi.IdentificationData.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.IdentificationData)
  return target;
}

size_t IdentificationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.IdentificationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IdentificationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.IdentificationData)
  GOOGLE_DCHECK_NE(&from, this);
  const IdentificationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IdentificationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.IdentificationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.IdentificationData)
    MergeFrom(*source);
  }
}

void IdentificationData::MergeFrom(const IdentificationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.IdentificationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void IdentificationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.IdentificationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdentificationData::CopyFrom(const IdentificationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.IdentificationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdentificationData::IsInitialized() const {
  return true;
}

void IdentificationData::InternalSwap(IdentificationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IdentificationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreatingDriverWorkRequest::InitAsDefaultInstance() {
}
class CreatingDriverWorkRequest::_Internal {
 public:
};

CreatingDriverWorkRequest::CreatingDriverWorkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.CreatingDriverWorkRequest)
}
CreatingDriverWorkRequest::CreatingDriverWorkRequest(const CreatingDriverWorkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  drivertoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_drivertoken().empty()) {
    drivertoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_drivertoken(),
      GetArena());
  }
  driverid_ = from.driverid_;
  // @@protoc_insertion_point(copy_constructor:MailTaxi.CreatingDriverWorkRequest)
}

void CreatingDriverWorkRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreatingDriverWorkRequest_OrderManagement_2eproto.base);
  drivertoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  driverid_ = PROTOBUF_ULONGLONG(0);
}

CreatingDriverWorkRequest::~CreatingDriverWorkRequest() {
  // @@protoc_insertion_point(destructor:MailTaxi.CreatingDriverWorkRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreatingDriverWorkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  drivertoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreatingDriverWorkRequest::ArenaDtor(void* object) {
  CreatingDriverWorkRequest* _this = reinterpret_cast< CreatingDriverWorkRequest* >(object);
  (void)_this;
}
void CreatingDriverWorkRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreatingDriverWorkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreatingDriverWorkRequest& CreatingDriverWorkRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreatingDriverWorkRequest_OrderManagement_2eproto.base);
  return *internal_default_instance();
}


void CreatingDriverWorkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.CreatingDriverWorkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drivertoken_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  driverid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreatingDriverWorkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 driverId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          driverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string driverToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_drivertoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MailTaxi.CreatingDriverWorkRequest.driverToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreatingDriverWorkRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.CreatingDriverWorkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 driverId = 1;
  if (this->driverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_driverid(), target);
  }

  // string driverToken = 2;
  if (this->drivertoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_drivertoken().data(), static_cast<int>(this->_internal_drivertoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MailTaxi.CreatingDriverWorkRequest.driverToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_drivertoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.CreatingDriverWorkRequest)
  return target;
}

size_t CreatingDriverWorkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.CreatingDriverWorkRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string driverToken = 2;
  if (this->drivertoken().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_drivertoken());
  }

  // uint64 driverId = 1;
  if (this->driverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_driverid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreatingDriverWorkRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.CreatingDriverWorkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatingDriverWorkRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreatingDriverWorkRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.CreatingDriverWorkRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.CreatingDriverWorkRequest)
    MergeFrom(*source);
  }
}

void CreatingDriverWorkRequest::MergeFrom(const CreatingDriverWorkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.CreatingDriverWorkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.drivertoken().size() > 0) {
    _internal_set_drivertoken(from._internal_drivertoken());
  }
  if (from.driverid() != 0) {
    _internal_set_driverid(from._internal_driverid());
  }
}

void CreatingDriverWorkRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.CreatingDriverWorkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatingDriverWorkRequest::CopyFrom(const CreatingDriverWorkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.CreatingDriverWorkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatingDriverWorkRequest::IsInitialized() const {
  return true;
}

void CreatingDriverWorkRequest::InternalSwap(CreatingDriverWorkRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  drivertoken_.Swap(&other->drivertoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(driverid_, other->driverid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatingDriverWorkRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreatingDriverWorkResponse::InitAsDefaultInstance() {
}
class CreatingDriverWorkResponse::_Internal {
 public:
};

CreatingDriverWorkResponse::CreatingDriverWorkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.CreatingDriverWorkResponse)
}
CreatingDriverWorkResponse::CreatingDriverWorkResponse(const CreatingDriverWorkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:MailTaxi.CreatingDriverWorkResponse)
}

void CreatingDriverWorkResponse::SharedCtor() {
  success_ = false;
}

CreatingDriverWorkResponse::~CreatingDriverWorkResponse() {
  // @@protoc_insertion_point(destructor:MailTaxi.CreatingDriverWorkResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreatingDriverWorkResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreatingDriverWorkResponse::ArenaDtor(void* object) {
  CreatingDriverWorkResponse* _this = reinterpret_cast< CreatingDriverWorkResponse* >(object);
  (void)_this;
}
void CreatingDriverWorkResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreatingDriverWorkResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreatingDriverWorkResponse& CreatingDriverWorkResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreatingDriverWorkResponse_OrderManagement_2eproto.base);
  return *internal_default_instance();
}


void CreatingDriverWorkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.CreatingDriverWorkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreatingDriverWorkResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreatingDriverWorkResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.CreatingDriverWorkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.CreatingDriverWorkResponse)
  return target;
}

size_t CreatingDriverWorkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.CreatingDriverWorkResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreatingDriverWorkResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.CreatingDriverWorkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatingDriverWorkResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreatingDriverWorkResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.CreatingDriverWorkResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.CreatingDriverWorkResponse)
    MergeFrom(*source);
  }
}

void CreatingDriverWorkResponse::MergeFrom(const CreatingDriverWorkResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.CreatingDriverWorkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void CreatingDriverWorkResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.CreatingDriverWorkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatingDriverWorkResponse::CopyFrom(const CreatingDriverWorkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.CreatingDriverWorkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatingDriverWorkResponse::IsInitialized() const {
  return true;
}

void CreatingDriverWorkResponse::InternalSwap(CreatingDriverWorkResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatingDriverWorkResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloseDriverWorkRequest::InitAsDefaultInstance() {
}
class CloseDriverWorkRequest::_Internal {
 public:
};

CloseDriverWorkRequest::CloseDriverWorkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.CloseDriverWorkRequest)
}
CloseDriverWorkRequest::CloseDriverWorkRequest(const CloseDriverWorkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  driverid_ = from.driverid_;
  // @@protoc_insertion_point(copy_constructor:MailTaxi.CloseDriverWorkRequest)
}

void CloseDriverWorkRequest::SharedCtor() {
  driverid_ = PROTOBUF_ULONGLONG(0);
}

CloseDriverWorkRequest::~CloseDriverWorkRequest() {
  // @@protoc_insertion_point(destructor:MailTaxi.CloseDriverWorkRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CloseDriverWorkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CloseDriverWorkRequest::ArenaDtor(void* object) {
  CloseDriverWorkRequest* _this = reinterpret_cast< CloseDriverWorkRequest* >(object);
  (void)_this;
}
void CloseDriverWorkRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloseDriverWorkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseDriverWorkRequest& CloseDriverWorkRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseDriverWorkRequest_OrderManagement_2eproto.base);
  return *internal_default_instance();
}


void CloseDriverWorkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.CloseDriverWorkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  driverid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseDriverWorkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 driverId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          driverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseDriverWorkRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.CloseDriverWorkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 driverId = 1;
  if (this->driverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_driverid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.CloseDriverWorkRequest)
  return target;
}

size_t CloseDriverWorkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.CloseDriverWorkRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 driverId = 1;
  if (this->driverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_driverid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseDriverWorkRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.CloseDriverWorkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseDriverWorkRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseDriverWorkRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.CloseDriverWorkRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.CloseDriverWorkRequest)
    MergeFrom(*source);
  }
}

void CloseDriverWorkRequest::MergeFrom(const CloseDriverWorkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.CloseDriverWorkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.driverid() != 0) {
    _internal_set_driverid(from._internal_driverid());
  }
}

void CloseDriverWorkRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.CloseDriverWorkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseDriverWorkRequest::CopyFrom(const CloseDriverWorkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.CloseDriverWorkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseDriverWorkRequest::IsInitialized() const {
  return true;
}

void CloseDriverWorkRequest::InternalSwap(CloseDriverWorkRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(driverid_, other->driverid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseDriverWorkRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloseDriverWorkResponse::InitAsDefaultInstance() {
}
class CloseDriverWorkResponse::_Internal {
 public:
};

CloseDriverWorkResponse::CloseDriverWorkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.CloseDriverWorkResponse)
}
CloseDriverWorkResponse::CloseDriverWorkResponse(const CloseDriverWorkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:MailTaxi.CloseDriverWorkResponse)
}

void CloseDriverWorkResponse::SharedCtor() {
  success_ = false;
}

CloseDriverWorkResponse::~CloseDriverWorkResponse() {
  // @@protoc_insertion_point(destructor:MailTaxi.CloseDriverWorkResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CloseDriverWorkResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CloseDriverWorkResponse::ArenaDtor(void* object) {
  CloseDriverWorkResponse* _this = reinterpret_cast< CloseDriverWorkResponse* >(object);
  (void)_this;
}
void CloseDriverWorkResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloseDriverWorkResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseDriverWorkResponse& CloseDriverWorkResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseDriverWorkResponse_OrderManagement_2eproto.base);
  return *internal_default_instance();
}


void CloseDriverWorkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.CloseDriverWorkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseDriverWorkResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseDriverWorkResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.CloseDriverWorkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.CloseDriverWorkResponse)
  return target;
}

size_t CloseDriverWorkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.CloseDriverWorkResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseDriverWorkResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.CloseDriverWorkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseDriverWorkResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseDriverWorkResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.CloseDriverWorkResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.CloseDriverWorkResponse)
    MergeFrom(*source);
  }
}

void CloseDriverWorkResponse::MergeFrom(const CloseDriverWorkResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.CloseDriverWorkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void CloseDriverWorkResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.CloseDriverWorkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseDriverWorkResponse::CopyFrom(const CloseDriverWorkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.CloseDriverWorkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseDriverWorkResponse::IsInitialized() const {
  return true;
}

void CloseDriverWorkResponse::InternalSwap(CloseDriverWorkResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseDriverWorkResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProposeOrderRequest::InitAsDefaultInstance() {
  ::MailTaxi::_ProposeOrderRequest_default_instance_._instance.get_mutable()->orderlocationdata_ = const_cast< ::MailTaxi::OrderLocationData*>(
      ::MailTaxi::OrderLocationData::internal_default_instance());
}
class ProposeOrderRequest::_Internal {
 public:
  static const ::MailTaxi::OrderLocationData& orderlocationdata(const ProposeOrderRequest* msg);
};

const ::MailTaxi::OrderLocationData&
ProposeOrderRequest::_Internal::orderlocationdata(const ProposeOrderRequest* msg) {
  return *msg->orderlocationdata_;
}
void ProposeOrderRequest::clear_orderlocationdata() {
  if (GetArena() == nullptr && orderlocationdata_ != nullptr) {
    delete orderlocationdata_;
  }
  orderlocationdata_ = nullptr;
}
ProposeOrderRequest::ProposeOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.ProposeOrderRequest)
}
ProposeOrderRequest::ProposeOrderRequest(const ProposeOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_orderlocationdata()) {
    orderlocationdata_ = new ::MailTaxi::OrderLocationData(*from.orderlocationdata_);
  } else {
    orderlocationdata_ = nullptr;
  }
  driverid_ = from.driverid_;
  // @@protoc_insertion_point(copy_constructor:MailTaxi.ProposeOrderRequest)
}

void ProposeOrderRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProposeOrderRequest_OrderManagement_2eproto.base);
  ::memset(&orderlocationdata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&driverid_) -
      reinterpret_cast<char*>(&orderlocationdata_)) + sizeof(driverid_));
}

ProposeOrderRequest::~ProposeOrderRequest() {
  // @@protoc_insertion_point(destructor:MailTaxi.ProposeOrderRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProposeOrderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete orderlocationdata_;
}

void ProposeOrderRequest::ArenaDtor(void* object) {
  ProposeOrderRequest* _this = reinterpret_cast< ProposeOrderRequest* >(object);
  (void)_this;
}
void ProposeOrderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProposeOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProposeOrderRequest& ProposeOrderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProposeOrderRequest_OrderManagement_2eproto.base);
  return *internal_default_instance();
}


void ProposeOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.ProposeOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && orderlocationdata_ != nullptr) {
    delete orderlocationdata_;
  }
  orderlocationdata_ = nullptr;
  driverid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProposeOrderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 driverId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          driverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MailTaxi.OrderLocationData orderLocationData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orderlocationdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProposeOrderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.ProposeOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 driverId = 1;
  if (this->driverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_driverid(), target);
  }

  // .MailTaxi.OrderLocationData orderLocationData = 2;
  if (this->has_orderlocationdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::orderlocationdata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.ProposeOrderRequest)
  return target;
}

size_t ProposeOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.ProposeOrderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MailTaxi.OrderLocationData orderLocationData = 2;
  if (this->has_orderlocationdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orderlocationdata_);
  }

  // uint64 driverId = 1;
  if (this->driverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_driverid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProposeOrderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.ProposeOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProposeOrderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProposeOrderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.ProposeOrderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.ProposeOrderRequest)
    MergeFrom(*source);
  }
}

void ProposeOrderRequest::MergeFrom(const ProposeOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.ProposeOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_orderlocationdata()) {
    _internal_mutable_orderlocationdata()->::MailTaxi::OrderLocationData::MergeFrom(from._internal_orderlocationdata());
  }
  if (from.driverid() != 0) {
    _internal_set_driverid(from._internal_driverid());
  }
}

void ProposeOrderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.ProposeOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProposeOrderRequest::CopyFrom(const ProposeOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.ProposeOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposeOrderRequest::IsInitialized() const {
  return true;
}

void ProposeOrderRequest::InternalSwap(ProposeOrderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProposeOrderRequest, driverid_)
      + sizeof(ProposeOrderRequest::driverid_)
      - PROTOBUF_FIELD_OFFSET(ProposeOrderRequest, orderlocationdata_)>(
          reinterpret_cast<char*>(&orderlocationdata_),
          reinterpret_cast<char*>(&other->orderlocationdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProposeOrderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProposeOrderResponse::InitAsDefaultInstance() {
}
class ProposeOrderResponse::_Internal {
 public:
};

ProposeOrderResponse::ProposeOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.ProposeOrderResponse)
}
ProposeOrderResponse::ProposeOrderResponse(const ProposeOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&driverid_, &from.driverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&driverid_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:MailTaxi.ProposeOrderResponse)
}

void ProposeOrderResponse::SharedCtor() {
  ::memset(&driverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&driverid_)) + sizeof(success_));
}

ProposeOrderResponse::~ProposeOrderResponse() {
  // @@protoc_insertion_point(destructor:MailTaxi.ProposeOrderResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProposeOrderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProposeOrderResponse::ArenaDtor(void* object) {
  ProposeOrderResponse* _this = reinterpret_cast< ProposeOrderResponse* >(object);
  (void)_this;
}
void ProposeOrderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProposeOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProposeOrderResponse& ProposeOrderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProposeOrderResponse_OrderManagement_2eproto.base);
  return *internal_default_instance();
}


void ProposeOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.ProposeOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&driverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&driverid_)) + sizeof(success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProposeOrderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 driverId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          driverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProposeOrderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.ProposeOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 driverId = 1;
  if (this->driverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_driverid(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.ProposeOrderResponse)
  return target;
}

size_t ProposeOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.ProposeOrderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 driverId = 1;
  if (this->driverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_driverid());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProposeOrderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.ProposeOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ProposeOrderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProposeOrderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.ProposeOrderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.ProposeOrderResponse)
    MergeFrom(*source);
  }
}

void ProposeOrderResponse::MergeFrom(const ProposeOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.ProposeOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.driverid() != 0) {
    _internal_set_driverid(from._internal_driverid());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void ProposeOrderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.ProposeOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProposeOrderResponse::CopyFrom(const ProposeOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.ProposeOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposeOrderResponse::IsInitialized() const {
  return true;
}

void ProposeOrderResponse::InternalSwap(ProposeOrderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProposeOrderResponse, success_)
      + sizeof(ProposeOrderResponse::success_)
      - PROTOBUF_FIELD_OFFSET(ProposeOrderResponse, driverid_)>(
          reinterpret_cast<char*>(&driverid_),
          reinterpret_cast<char*>(&other->driverid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProposeOrderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateOrderRequest::InitAsDefaultInstance() {
}
class CreateOrderRequest::_Internal {
 public:
};

CreateOrderRequest::CreateOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.CreateOrderRequest)
}
CreateOrderRequest::CreateOrderRequest(const CreateOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clienttoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clienttoken().empty()) {
    clienttoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_clienttoken(),
      GetArena());
  }
  ::memcpy(&ordernum_, &from.ordernum_,
    static_cast<size_t>(reinterpret_cast<char*>(&driverid_) -
    reinterpret_cast<char*>(&ordernum_)) + sizeof(driverid_));
  // @@protoc_insertion_point(copy_constructor:MailTaxi.CreateOrderRequest)
}

void CreateOrderRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateOrderRequest_OrderManagement_2eproto.base);
  clienttoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ordernum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&driverid_) -
      reinterpret_cast<char*>(&ordernum_)) + sizeof(driverid_));
}

CreateOrderRequest::~CreateOrderRequest() {
  // @@protoc_insertion_point(destructor:MailTaxi.CreateOrderRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateOrderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clienttoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateOrderRequest::ArenaDtor(void* object) {
  CreateOrderRequest* _this = reinterpret_cast< CreateOrderRequest* >(object);
  (void)_this;
}
void CreateOrderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateOrderRequest& CreateOrderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateOrderRequest_OrderManagement_2eproto.base);
  return *internal_default_instance();
}


void CreateOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.CreateOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clienttoken_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&ordernum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&driverid_) -
      reinterpret_cast<char*>(&ordernum_)) + sizeof(driverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateOrderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 orderNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ordernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 driverId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          driverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string clientToken = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_clienttoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MailTaxi.CreateOrderRequest.clientToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateOrderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.CreateOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 orderNum = 1;
  if (this->ordernum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ordernum(), target);
  }

  // uint64 driverId = 2;
  if (this->driverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_driverid(), target);
  }

  // string clientToken = 3;
  if (this->clienttoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clienttoken().data(), static_cast<int>(this->_internal_clienttoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MailTaxi.CreateOrderRequest.clientToken");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clienttoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.CreateOrderRequest)
  return target;
}

size_t CreateOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.CreateOrderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientToken = 3;
  if (this->clienttoken().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clienttoken());
  }

  // uint64 orderNum = 1;
  if (this->ordernum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ordernum());
  }

  // uint64 driverId = 2;
  if (this->driverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_driverid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateOrderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.CreateOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateOrderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateOrderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.CreateOrderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.CreateOrderRequest)
    MergeFrom(*source);
  }
}

void CreateOrderRequest::MergeFrom(const CreateOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.CreateOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clienttoken().size() > 0) {
    _internal_set_clienttoken(from._internal_clienttoken());
  }
  if (from.ordernum() != 0) {
    _internal_set_ordernum(from._internal_ordernum());
  }
  if (from.driverid() != 0) {
    _internal_set_driverid(from._internal_driverid());
  }
}

void CreateOrderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.CreateOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateOrderRequest::CopyFrom(const CreateOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.CreateOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateOrderRequest::IsInitialized() const {
  return true;
}

void CreateOrderRequest::InternalSwap(CreateOrderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  clienttoken_.Swap(&other->clienttoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateOrderRequest, driverid_)
      + sizeof(CreateOrderRequest::driverid_)
      - PROTOBUF_FIELD_OFFSET(CreateOrderRequest, ordernum_)>(
          reinterpret_cast<char*>(&ordernum_),
          reinterpret_cast<char*>(&other->ordernum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateOrderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateOrderResponse::InitAsDefaultInstance() {
}
class CreateOrderResponse::_Internal {
 public:
};

CreateOrderResponse::CreateOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.CreateOrderResponse)
}
CreateOrderResponse::CreateOrderResponse(const CreateOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:MailTaxi.CreateOrderResponse)
}

void CreateOrderResponse::SharedCtor() {
  success_ = false;
}

CreateOrderResponse::~CreateOrderResponse() {
  // @@protoc_insertion_point(destructor:MailTaxi.CreateOrderResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateOrderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateOrderResponse::ArenaDtor(void* object) {
  CreateOrderResponse* _this = reinterpret_cast< CreateOrderResponse* >(object);
  (void)_this;
}
void CreateOrderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateOrderResponse& CreateOrderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateOrderResponse_OrderManagement_2eproto.base);
  return *internal_default_instance();
}


void CreateOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.CreateOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateOrderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateOrderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.CreateOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.CreateOrderResponse)
  return target;
}

size_t CreateOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.CreateOrderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateOrderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.CreateOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateOrderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateOrderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.CreateOrderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.CreateOrderResponse)
    MergeFrom(*source);
  }
}

void CreateOrderResponse::MergeFrom(const CreateOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.CreateOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void CreateOrderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.CreateOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateOrderResponse::CopyFrom(const CreateOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.CreateOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateOrderResponse::IsInitialized() const {
  return true;
}

void CreateOrderResponse::InternalSwap(CreateOrderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateOrderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveOrderRequest::InitAsDefaultInstance() {
}
class RemoveOrderRequest::_Internal {
 public:
};

RemoveOrderRequest::RemoveOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.RemoveOrderRequest)
}
RemoveOrderRequest::RemoveOrderRequest(const RemoveOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ordernum_ = from.ordernum_;
  // @@protoc_insertion_point(copy_constructor:MailTaxi.RemoveOrderRequest)
}

void RemoveOrderRequest::SharedCtor() {
  ordernum_ = PROTOBUF_ULONGLONG(0);
}

RemoveOrderRequest::~RemoveOrderRequest() {
  // @@protoc_insertion_point(destructor:MailTaxi.RemoveOrderRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveOrderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemoveOrderRequest::ArenaDtor(void* object) {
  RemoveOrderRequest* _this = reinterpret_cast< RemoveOrderRequest* >(object);
  (void)_this;
}
void RemoveOrderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveOrderRequest& RemoveOrderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveOrderRequest_OrderManagement_2eproto.base);
  return *internal_default_instance();
}


void RemoveOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.RemoveOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ordernum_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveOrderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 orderNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ordernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveOrderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.RemoveOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 orderNum = 1;
  if (this->ordernum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ordernum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.RemoveOrderRequest)
  return target;
}

size_t RemoveOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.RemoveOrderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 orderNum = 1;
  if (this->ordernum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ordernum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveOrderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.RemoveOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveOrderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveOrderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.RemoveOrderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.RemoveOrderRequest)
    MergeFrom(*source);
  }
}

void RemoveOrderRequest::MergeFrom(const RemoveOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.RemoveOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ordernum() != 0) {
    _internal_set_ordernum(from._internal_ordernum());
  }
}

void RemoveOrderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.RemoveOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveOrderRequest::CopyFrom(const RemoveOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.RemoveOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveOrderRequest::IsInitialized() const {
  return true;
}

void RemoveOrderRequest::InternalSwap(RemoveOrderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ordernum_, other->ordernum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveOrderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveOrderResponse::InitAsDefaultInstance() {
}
class RemoveOrderResponse::_Internal {
 public:
};

RemoveOrderResponse::RemoveOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.RemoveOrderResponse)
}
RemoveOrderResponse::RemoveOrderResponse(const RemoveOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:MailTaxi.RemoveOrderResponse)
}

void RemoveOrderResponse::SharedCtor() {
  success_ = false;
}

RemoveOrderResponse::~RemoveOrderResponse() {
  // @@protoc_insertion_point(destructor:MailTaxi.RemoveOrderResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveOrderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemoveOrderResponse::ArenaDtor(void* object) {
  RemoveOrderResponse* _this = reinterpret_cast< RemoveOrderResponse* >(object);
  (void)_this;
}
void RemoveOrderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveOrderResponse& RemoveOrderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveOrderResponse_OrderManagement_2eproto.base);
  return *internal_default_instance();
}


void RemoveOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.RemoveOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveOrderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveOrderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.RemoveOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.RemoveOrderResponse)
  return target;
}

size_t RemoveOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.RemoveOrderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveOrderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.RemoveOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveOrderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveOrderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.RemoveOrderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.RemoveOrderResponse)
    MergeFrom(*source);
  }
}

void RemoveOrderResponse::MergeFrom(const RemoveOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.RemoveOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void RemoveOrderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.RemoveOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveOrderResponse::CopyFrom(const RemoveOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.RemoveOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveOrderResponse::IsInitialized() const {
  return true;
}

void RemoveOrderResponse::InternalSwap(RemoveOrderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveOrderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace MailTaxi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MailTaxi::IdentificationData* Arena::CreateMaybeMessage< ::MailTaxi::IdentificationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::IdentificationData >(arena);
}
template<> PROTOBUF_NOINLINE ::MailTaxi::CreatingDriverWorkRequest* Arena::CreateMaybeMessage< ::MailTaxi::CreatingDriverWorkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::CreatingDriverWorkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MailTaxi::CreatingDriverWorkResponse* Arena::CreateMaybeMessage< ::MailTaxi::CreatingDriverWorkResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::CreatingDriverWorkResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::MailTaxi::CloseDriverWorkRequest* Arena::CreateMaybeMessage< ::MailTaxi::CloseDriverWorkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::CloseDriverWorkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MailTaxi::CloseDriverWorkResponse* Arena::CreateMaybeMessage< ::MailTaxi::CloseDriverWorkResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::CloseDriverWorkResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::MailTaxi::ProposeOrderRequest* Arena::CreateMaybeMessage< ::MailTaxi::ProposeOrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::ProposeOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MailTaxi::ProposeOrderResponse* Arena::CreateMaybeMessage< ::MailTaxi::ProposeOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::ProposeOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::MailTaxi::CreateOrderRequest* Arena::CreateMaybeMessage< ::MailTaxi::CreateOrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::CreateOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MailTaxi::CreateOrderResponse* Arena::CreateMaybeMessage< ::MailTaxi::CreateOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::CreateOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::MailTaxi::RemoveOrderRequest* Arena::CreateMaybeMessage< ::MailTaxi::RemoveOrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::RemoveOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MailTaxi::RemoveOrderResponse* Arena::CreateMaybeMessage< ::MailTaxi::RemoveOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::RemoveOrderResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
