// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: OrderManagement.proto
#ifndef GRPC_OrderManagement_2eproto__INCLUDED
#define GRPC_OrderManagement_2eproto__INCLUDED

#include "OrderManagement.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace MailTaxi {

class OrderManager final {
 public:
  static constexpr char const* service_full_name() {
    return "MailTaxi.OrderManager";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreatingDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CreatingDriverWorkRequest& request, ::MailTaxi::CreatingDriverWorkResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::CreatingDriverWorkResponse>> AsyncCreatingDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CreatingDriverWorkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::CreatingDriverWorkResponse>>(AsyncCreatingDriverWorkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::CreatingDriverWorkResponse>> PrepareAsyncCreatingDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CreatingDriverWorkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::CreatingDriverWorkResponse>>(PrepareAsyncCreatingDriverWorkRaw(context, request, cq));
    }
    virtual ::grpc::Status CloseDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CloseDriverWorkRequest& request, ::MailTaxi::CloseDriverWorkResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::CloseDriverWorkResponse>> AsyncCloseDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CloseDriverWorkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::CloseDriverWorkResponse>>(AsyncCloseDriverWorkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::CloseDriverWorkResponse>> PrepareAsyncCloseDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CloseDriverWorkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::CloseDriverWorkResponse>>(PrepareAsyncCloseDriverWorkRaw(context, request, cq));
    }
    virtual ::grpc::Status ProposeOrder(::grpc::ClientContext* context, const ::MailTaxi::ProposeOrderRequest& request, ::MailTaxi::ProposeOrderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::ProposeOrderResponse>> AsyncProposeOrder(::grpc::ClientContext* context, const ::MailTaxi::ProposeOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::ProposeOrderResponse>>(AsyncProposeOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::ProposeOrderResponse>> PrepareAsyncProposeOrder(::grpc::ClientContext* context, const ::MailTaxi::ProposeOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::ProposeOrderResponse>>(PrepareAsyncProposeOrderRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateOrder(::grpc::ClientContext* context, const ::MailTaxi::CreateOrderRequest& request, ::MailTaxi::CreateOrderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::CreateOrderResponse>> AsyncCreateOrder(::grpc::ClientContext* context, const ::MailTaxi::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::CreateOrderResponse>>(AsyncCreateOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::CreateOrderResponse>> PrepareAsyncCreateOrder(::grpc::ClientContext* context, const ::MailTaxi::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::CreateOrderResponse>>(PrepareAsyncCreateOrderRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveOrder(::grpc::ClientContext* context, const ::MailTaxi::RemoveOrderRequest& request, ::MailTaxi::RemoveOrderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::RemoveOrderResponse>> AsyncRemoveOrder(::grpc::ClientContext* context, const ::MailTaxi::RemoveOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::RemoveOrderResponse>>(AsyncRemoveOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::RemoveOrderResponse>> PrepareAsyncRemoveOrder(::grpc::ClientContext* context, const ::MailTaxi::RemoveOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::RemoveOrderResponse>>(PrepareAsyncRemoveOrderRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void CreatingDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CreatingDriverWorkRequest* request, ::MailTaxi::CreatingDriverWorkResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreatingDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CreatingDriverWorkRequest* request, ::MailTaxi::CreatingDriverWorkResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreatingDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CreatingDriverWorkRequest* request, ::MailTaxi::CreatingDriverWorkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CloseDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CloseDriverWorkRequest* request, ::MailTaxi::CloseDriverWorkResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CloseDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CloseDriverWorkRequest* request, ::MailTaxi::CloseDriverWorkResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CloseDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CloseDriverWorkRequest* request, ::MailTaxi::CloseDriverWorkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ProposeOrder(::grpc::ClientContext* context, const ::MailTaxi::ProposeOrderRequest* request, ::MailTaxi::ProposeOrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ProposeOrder(::grpc::ClientContext* context, const ::MailTaxi::ProposeOrderRequest* request, ::MailTaxi::ProposeOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ProposeOrder(::grpc::ClientContext* context, const ::MailTaxi::ProposeOrderRequest* request, ::MailTaxi::ProposeOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CreateOrder(::grpc::ClientContext* context, const ::MailTaxi::CreateOrderRequest* request, ::MailTaxi::CreateOrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateOrder(::grpc::ClientContext* context, const ::MailTaxi::CreateOrderRequest* request, ::MailTaxi::CreateOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateOrder(::grpc::ClientContext* context, const ::MailTaxi::CreateOrderRequest* request, ::MailTaxi::CreateOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RemoveOrder(::grpc::ClientContext* context, const ::MailTaxi::RemoveOrderRequest* request, ::MailTaxi::RemoveOrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveOrder(::grpc::ClientContext* context, const ::MailTaxi::RemoveOrderRequest* request, ::MailTaxi::RemoveOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveOrder(::grpc::ClientContext* context, const ::MailTaxi::RemoveOrderRequest* request, ::MailTaxi::RemoveOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::CreatingDriverWorkResponse>* AsyncCreatingDriverWorkRaw(::grpc::ClientContext* context, const ::MailTaxi::CreatingDriverWorkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::CreatingDriverWorkResponse>* PrepareAsyncCreatingDriverWorkRaw(::grpc::ClientContext* context, const ::MailTaxi::CreatingDriverWorkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::CloseDriverWorkResponse>* AsyncCloseDriverWorkRaw(::grpc::ClientContext* context, const ::MailTaxi::CloseDriverWorkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::CloseDriverWorkResponse>* PrepareAsyncCloseDriverWorkRaw(::grpc::ClientContext* context, const ::MailTaxi::CloseDriverWorkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::ProposeOrderResponse>* AsyncProposeOrderRaw(::grpc::ClientContext* context, const ::MailTaxi::ProposeOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::ProposeOrderResponse>* PrepareAsyncProposeOrderRaw(::grpc::ClientContext* context, const ::MailTaxi::ProposeOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::CreateOrderResponse>* AsyncCreateOrderRaw(::grpc::ClientContext* context, const ::MailTaxi::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::CreateOrderResponse>* PrepareAsyncCreateOrderRaw(::grpc::ClientContext* context, const ::MailTaxi::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::RemoveOrderResponse>* AsyncRemoveOrderRaw(::grpc::ClientContext* context, const ::MailTaxi::RemoveOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MailTaxi::RemoveOrderResponse>* PrepareAsyncRemoveOrderRaw(::grpc::ClientContext* context, const ::MailTaxi::RemoveOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreatingDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CreatingDriverWorkRequest& request, ::MailTaxi::CreatingDriverWorkResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::CreatingDriverWorkResponse>> AsyncCreatingDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CreatingDriverWorkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::CreatingDriverWorkResponse>>(AsyncCreatingDriverWorkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::CreatingDriverWorkResponse>> PrepareAsyncCreatingDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CreatingDriverWorkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::CreatingDriverWorkResponse>>(PrepareAsyncCreatingDriverWorkRaw(context, request, cq));
    }
    ::grpc::Status CloseDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CloseDriverWorkRequest& request, ::MailTaxi::CloseDriverWorkResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::CloseDriverWorkResponse>> AsyncCloseDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CloseDriverWorkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::CloseDriverWorkResponse>>(AsyncCloseDriverWorkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::CloseDriverWorkResponse>> PrepareAsyncCloseDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CloseDriverWorkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::CloseDriverWorkResponse>>(PrepareAsyncCloseDriverWorkRaw(context, request, cq));
    }
    ::grpc::Status ProposeOrder(::grpc::ClientContext* context, const ::MailTaxi::ProposeOrderRequest& request, ::MailTaxi::ProposeOrderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::ProposeOrderResponse>> AsyncProposeOrder(::grpc::ClientContext* context, const ::MailTaxi::ProposeOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::ProposeOrderResponse>>(AsyncProposeOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::ProposeOrderResponse>> PrepareAsyncProposeOrder(::grpc::ClientContext* context, const ::MailTaxi::ProposeOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::ProposeOrderResponse>>(PrepareAsyncProposeOrderRaw(context, request, cq));
    }
    ::grpc::Status CreateOrder(::grpc::ClientContext* context, const ::MailTaxi::CreateOrderRequest& request, ::MailTaxi::CreateOrderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::CreateOrderResponse>> AsyncCreateOrder(::grpc::ClientContext* context, const ::MailTaxi::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::CreateOrderResponse>>(AsyncCreateOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::CreateOrderResponse>> PrepareAsyncCreateOrder(::grpc::ClientContext* context, const ::MailTaxi::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::CreateOrderResponse>>(PrepareAsyncCreateOrderRaw(context, request, cq));
    }
    ::grpc::Status RemoveOrder(::grpc::ClientContext* context, const ::MailTaxi::RemoveOrderRequest& request, ::MailTaxi::RemoveOrderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::RemoveOrderResponse>> AsyncRemoveOrder(::grpc::ClientContext* context, const ::MailTaxi::RemoveOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::RemoveOrderResponse>>(AsyncRemoveOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::RemoveOrderResponse>> PrepareAsyncRemoveOrder(::grpc::ClientContext* context, const ::MailTaxi::RemoveOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MailTaxi::RemoveOrderResponse>>(PrepareAsyncRemoveOrderRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreatingDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CreatingDriverWorkRequest* request, ::MailTaxi::CreatingDriverWorkResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreatingDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CreatingDriverWorkRequest* request, ::MailTaxi::CreatingDriverWorkResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreatingDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CreatingDriverWorkRequest* request, ::MailTaxi::CreatingDriverWorkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CloseDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CloseDriverWorkRequest* request, ::MailTaxi::CloseDriverWorkResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CloseDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CloseDriverWorkRequest* request, ::MailTaxi::CloseDriverWorkResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CloseDriverWork(::grpc::ClientContext* context, const ::MailTaxi::CloseDriverWorkRequest* request, ::MailTaxi::CloseDriverWorkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ProposeOrder(::grpc::ClientContext* context, const ::MailTaxi::ProposeOrderRequest* request, ::MailTaxi::ProposeOrderResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ProposeOrder(::grpc::ClientContext* context, const ::MailTaxi::ProposeOrderRequest* request, ::MailTaxi::ProposeOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ProposeOrder(::grpc::ClientContext* context, const ::MailTaxi::ProposeOrderRequest* request, ::MailTaxi::ProposeOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateOrder(::grpc::ClientContext* context, const ::MailTaxi::CreateOrderRequest* request, ::MailTaxi::CreateOrderResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateOrder(::grpc::ClientContext* context, const ::MailTaxi::CreateOrderRequest* request, ::MailTaxi::CreateOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateOrder(::grpc::ClientContext* context, const ::MailTaxi::CreateOrderRequest* request, ::MailTaxi::CreateOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RemoveOrder(::grpc::ClientContext* context, const ::MailTaxi::RemoveOrderRequest* request, ::MailTaxi::RemoveOrderResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveOrder(::grpc::ClientContext* context, const ::MailTaxi::RemoveOrderRequest* request, ::MailTaxi::RemoveOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveOrder(::grpc::ClientContext* context, const ::MailTaxi::RemoveOrderRequest* request, ::MailTaxi::RemoveOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::MailTaxi::CreatingDriverWorkResponse>* AsyncCreatingDriverWorkRaw(::grpc::ClientContext* context, const ::MailTaxi::CreatingDriverWorkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MailTaxi::CreatingDriverWorkResponse>* PrepareAsyncCreatingDriverWorkRaw(::grpc::ClientContext* context, const ::MailTaxi::CreatingDriverWorkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MailTaxi::CloseDriverWorkResponse>* AsyncCloseDriverWorkRaw(::grpc::ClientContext* context, const ::MailTaxi::CloseDriverWorkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MailTaxi::CloseDriverWorkResponse>* PrepareAsyncCloseDriverWorkRaw(::grpc::ClientContext* context, const ::MailTaxi::CloseDriverWorkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MailTaxi::ProposeOrderResponse>* AsyncProposeOrderRaw(::grpc::ClientContext* context, const ::MailTaxi::ProposeOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MailTaxi::ProposeOrderResponse>* PrepareAsyncProposeOrderRaw(::grpc::ClientContext* context, const ::MailTaxi::ProposeOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MailTaxi::CreateOrderResponse>* AsyncCreateOrderRaw(::grpc::ClientContext* context, const ::MailTaxi::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MailTaxi::CreateOrderResponse>* PrepareAsyncCreateOrderRaw(::grpc::ClientContext* context, const ::MailTaxi::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MailTaxi::RemoveOrderResponse>* AsyncRemoveOrderRaw(::grpc::ClientContext* context, const ::MailTaxi::RemoveOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MailTaxi::RemoveOrderResponse>* PrepareAsyncRemoveOrderRaw(::grpc::ClientContext* context, const ::MailTaxi::RemoveOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreatingDriverWork_;
    const ::grpc::internal::RpcMethod rpcmethod_CloseDriverWork_;
    const ::grpc::internal::RpcMethod rpcmethod_ProposeOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveOrder_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreatingDriverWork(::grpc::ServerContext* context, const ::MailTaxi::CreatingDriverWorkRequest* request, ::MailTaxi::CreatingDriverWorkResponse* response);
    virtual ::grpc::Status CloseDriverWork(::grpc::ServerContext* context, const ::MailTaxi::CloseDriverWorkRequest* request, ::MailTaxi::CloseDriverWorkResponse* response);
    virtual ::grpc::Status ProposeOrder(::grpc::ServerContext* context, const ::MailTaxi::ProposeOrderRequest* request, ::MailTaxi::ProposeOrderResponse* response);
    virtual ::grpc::Status CreateOrder(::grpc::ServerContext* context, const ::MailTaxi::CreateOrderRequest* request, ::MailTaxi::CreateOrderResponse* response);
    virtual ::grpc::Status RemoveOrder(::grpc::ServerContext* context, const ::MailTaxi::RemoveOrderRequest* request, ::MailTaxi::RemoveOrderResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreatingDriverWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreatingDriverWork() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreatingDriverWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatingDriverWork(::grpc::ServerContext* /*context*/, const ::MailTaxi::CreatingDriverWorkRequest* /*request*/, ::MailTaxi::CreatingDriverWorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatingDriverWork(::grpc::ServerContext* context, ::MailTaxi::CreatingDriverWorkRequest* request, ::grpc::ServerAsyncResponseWriter< ::MailTaxi::CreatingDriverWorkResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseDriverWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CloseDriverWork() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CloseDriverWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDriverWork(::grpc::ServerContext* /*context*/, const ::MailTaxi::CloseDriverWorkRequest* /*request*/, ::MailTaxi::CloseDriverWorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseDriverWork(::grpc::ServerContext* context, ::MailTaxi::CloseDriverWorkRequest* request, ::grpc::ServerAsyncResponseWriter< ::MailTaxi::CloseDriverWorkResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ProposeOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ProposeOrder() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ProposeOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProposeOrder(::grpc::ServerContext* /*context*/, const ::MailTaxi::ProposeOrderRequest* /*request*/, ::MailTaxi::ProposeOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProposeOrder(::grpc::ServerContext* context, ::MailTaxi::ProposeOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::MailTaxi::ProposeOrderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateOrder() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CreateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrder(::grpc::ServerContext* /*context*/, const ::MailTaxi::CreateOrderRequest* /*request*/, ::MailTaxi::CreateOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOrder(::grpc::ServerContext* context, ::MailTaxi::CreateOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::MailTaxi::CreateOrderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveOrder() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RemoveOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveOrder(::grpc::ServerContext* /*context*/, const ::MailTaxi::RemoveOrderRequest* /*request*/, ::MailTaxi::RemoveOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveOrder(::grpc::ServerContext* context, ::MailTaxi::RemoveOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::MailTaxi::RemoveOrderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreatingDriverWork<WithAsyncMethod_CloseDriverWork<WithAsyncMethod_ProposeOrder<WithAsyncMethod_CreateOrder<WithAsyncMethod_RemoveOrder<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreatingDriverWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreatingDriverWork() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::MailTaxi::CreatingDriverWorkRequest, ::MailTaxi::CreatingDriverWorkResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::MailTaxi::CreatingDriverWorkRequest* request, ::MailTaxi::CreatingDriverWorkResponse* response) { return this->CreatingDriverWork(context, request, response); }));}
    void SetMessageAllocatorFor_CreatingDriverWork(
        ::grpc::experimental::MessageAllocator< ::MailTaxi::CreatingDriverWorkRequest, ::MailTaxi::CreatingDriverWorkResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MailTaxi::CreatingDriverWorkRequest, ::MailTaxi::CreatingDriverWorkResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreatingDriverWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatingDriverWork(::grpc::ServerContext* /*context*/, const ::MailTaxi::CreatingDriverWorkRequest* /*request*/, ::MailTaxi::CreatingDriverWorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreatingDriverWork(
      ::grpc::CallbackServerContext* /*context*/, const ::MailTaxi::CreatingDriverWorkRequest* /*request*/, ::MailTaxi::CreatingDriverWorkResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreatingDriverWork(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::MailTaxi::CreatingDriverWorkRequest* /*request*/, ::MailTaxi::CreatingDriverWorkResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CloseDriverWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CloseDriverWork() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::MailTaxi::CloseDriverWorkRequest, ::MailTaxi::CloseDriverWorkResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::MailTaxi::CloseDriverWorkRequest* request, ::MailTaxi::CloseDriverWorkResponse* response) { return this->CloseDriverWork(context, request, response); }));}
    void SetMessageAllocatorFor_CloseDriverWork(
        ::grpc::experimental::MessageAllocator< ::MailTaxi::CloseDriverWorkRequest, ::MailTaxi::CloseDriverWorkResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MailTaxi::CloseDriverWorkRequest, ::MailTaxi::CloseDriverWorkResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CloseDriverWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDriverWork(::grpc::ServerContext* /*context*/, const ::MailTaxi::CloseDriverWorkRequest* /*request*/, ::MailTaxi::CloseDriverWorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CloseDriverWork(
      ::grpc::CallbackServerContext* /*context*/, const ::MailTaxi::CloseDriverWorkRequest* /*request*/, ::MailTaxi::CloseDriverWorkResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CloseDriverWork(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::MailTaxi::CloseDriverWorkRequest* /*request*/, ::MailTaxi::CloseDriverWorkResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ProposeOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ProposeOrder() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::MailTaxi::ProposeOrderRequest, ::MailTaxi::ProposeOrderResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::MailTaxi::ProposeOrderRequest* request, ::MailTaxi::ProposeOrderResponse* response) { return this->ProposeOrder(context, request, response); }));}
    void SetMessageAllocatorFor_ProposeOrder(
        ::grpc::experimental::MessageAllocator< ::MailTaxi::ProposeOrderRequest, ::MailTaxi::ProposeOrderResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MailTaxi::ProposeOrderRequest, ::MailTaxi::ProposeOrderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ProposeOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProposeOrder(::grpc::ServerContext* /*context*/, const ::MailTaxi::ProposeOrderRequest* /*request*/, ::MailTaxi::ProposeOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ProposeOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::MailTaxi::ProposeOrderRequest* /*request*/, ::MailTaxi::ProposeOrderResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ProposeOrder(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::MailTaxi::ProposeOrderRequest* /*request*/, ::MailTaxi::ProposeOrderResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateOrder() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::MailTaxi::CreateOrderRequest, ::MailTaxi::CreateOrderResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::MailTaxi::CreateOrderRequest* request, ::MailTaxi::CreateOrderResponse* response) { return this->CreateOrder(context, request, response); }));}
    void SetMessageAllocatorFor_CreateOrder(
        ::grpc::experimental::MessageAllocator< ::MailTaxi::CreateOrderRequest, ::MailTaxi::CreateOrderResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MailTaxi::CreateOrderRequest, ::MailTaxi::CreateOrderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrder(::grpc::ServerContext* /*context*/, const ::MailTaxi::CreateOrderRequest* /*request*/, ::MailTaxi::CreateOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::MailTaxi::CreateOrderRequest* /*request*/, ::MailTaxi::CreateOrderResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateOrder(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::MailTaxi::CreateOrderRequest* /*request*/, ::MailTaxi::CreateOrderResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemoveOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RemoveOrder() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::MailTaxi::RemoveOrderRequest, ::MailTaxi::RemoveOrderResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::MailTaxi::RemoveOrderRequest* request, ::MailTaxi::RemoveOrderResponse* response) { return this->RemoveOrder(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveOrder(
        ::grpc::experimental::MessageAllocator< ::MailTaxi::RemoveOrderRequest, ::MailTaxi::RemoveOrderResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MailTaxi::RemoveOrderRequest, ::MailTaxi::RemoveOrderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemoveOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveOrder(::grpc::ServerContext* /*context*/, const ::MailTaxi::RemoveOrderRequest* /*request*/, ::MailTaxi::RemoveOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::MailTaxi::RemoveOrderRequest* /*request*/, ::MailTaxi::RemoveOrderResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveOrder(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::MailTaxi::RemoveOrderRequest* /*request*/, ::MailTaxi::RemoveOrderResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreatingDriverWork<ExperimentalWithCallbackMethod_CloseDriverWork<ExperimentalWithCallbackMethod_ProposeOrder<ExperimentalWithCallbackMethod_CreateOrder<ExperimentalWithCallbackMethod_RemoveOrder<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreatingDriverWork<ExperimentalWithCallbackMethod_CloseDriverWork<ExperimentalWithCallbackMethod_ProposeOrder<ExperimentalWithCallbackMethod_CreateOrder<ExperimentalWithCallbackMethod_RemoveOrder<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreatingDriverWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreatingDriverWork() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreatingDriverWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatingDriverWork(::grpc::ServerContext* /*context*/, const ::MailTaxi::CreatingDriverWorkRequest* /*request*/, ::MailTaxi::CreatingDriverWorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseDriverWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CloseDriverWork() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CloseDriverWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDriverWork(::grpc::ServerContext* /*context*/, const ::MailTaxi::CloseDriverWorkRequest* /*request*/, ::MailTaxi::CloseDriverWorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ProposeOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ProposeOrder() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ProposeOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProposeOrder(::grpc::ServerContext* /*context*/, const ::MailTaxi::ProposeOrderRequest* /*request*/, ::MailTaxi::ProposeOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateOrder() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CreateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrder(::grpc::ServerContext* /*context*/, const ::MailTaxi::CreateOrderRequest* /*request*/, ::MailTaxi::CreateOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveOrder() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RemoveOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveOrder(::grpc::ServerContext* /*context*/, const ::MailTaxi::RemoveOrderRequest* /*request*/, ::MailTaxi::RemoveOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreatingDriverWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreatingDriverWork() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreatingDriverWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatingDriverWork(::grpc::ServerContext* /*context*/, const ::MailTaxi::CreatingDriverWorkRequest* /*request*/, ::MailTaxi::CreatingDriverWorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatingDriverWork(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CloseDriverWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CloseDriverWork() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CloseDriverWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDriverWork(::grpc::ServerContext* /*context*/, const ::MailTaxi::CloseDriverWorkRequest* /*request*/, ::MailTaxi::CloseDriverWorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseDriverWork(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ProposeOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ProposeOrder() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ProposeOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProposeOrder(::grpc::ServerContext* /*context*/, const ::MailTaxi::ProposeOrderRequest* /*request*/, ::MailTaxi::ProposeOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProposeOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateOrder() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CreateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrder(::grpc::ServerContext* /*context*/, const ::MailTaxi::CreateOrderRequest* /*request*/, ::MailTaxi::CreateOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveOrder() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RemoveOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveOrder(::grpc::ServerContext* /*context*/, const ::MailTaxi::RemoveOrderRequest* /*request*/, ::MailTaxi::RemoveOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreatingDriverWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreatingDriverWork() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreatingDriverWork(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreatingDriverWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatingDriverWork(::grpc::ServerContext* /*context*/, const ::MailTaxi::CreatingDriverWorkRequest* /*request*/, ::MailTaxi::CreatingDriverWorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreatingDriverWork(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreatingDriverWork(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CloseDriverWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CloseDriverWork() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CloseDriverWork(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CloseDriverWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDriverWork(::grpc::ServerContext* /*context*/, const ::MailTaxi::CloseDriverWorkRequest* /*request*/, ::MailTaxi::CloseDriverWorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CloseDriverWork(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CloseDriverWork(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ProposeOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ProposeOrder() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ProposeOrder(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ProposeOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProposeOrder(::grpc::ServerContext* /*context*/, const ::MailTaxi::ProposeOrderRequest* /*request*/, ::MailTaxi::ProposeOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ProposeOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ProposeOrder(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateOrder() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateOrder(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrder(::grpc::ServerContext* /*context*/, const ::MailTaxi::CreateOrderRequest* /*request*/, ::MailTaxi::CreateOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateOrder(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemoveOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RemoveOrder() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveOrder(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RemoveOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveOrder(::grpc::ServerContext* /*context*/, const ::MailTaxi::RemoveOrderRequest* /*request*/, ::MailTaxi::RemoveOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveOrder(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreatingDriverWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreatingDriverWork() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MailTaxi::CreatingDriverWorkRequest, ::MailTaxi::CreatingDriverWorkResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MailTaxi::CreatingDriverWorkRequest, ::MailTaxi::CreatingDriverWorkResponse>* streamer) {
                       return this->StreamedCreatingDriverWork(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreatingDriverWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreatingDriverWork(::grpc::ServerContext* /*context*/, const ::MailTaxi::CreatingDriverWorkRequest* /*request*/, ::MailTaxi::CreatingDriverWorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreatingDriverWork(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MailTaxi::CreatingDriverWorkRequest,::MailTaxi::CreatingDriverWorkResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloseDriverWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CloseDriverWork() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MailTaxi::CloseDriverWorkRequest, ::MailTaxi::CloseDriverWorkResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MailTaxi::CloseDriverWorkRequest, ::MailTaxi::CloseDriverWorkResponse>* streamer) {
                       return this->StreamedCloseDriverWork(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CloseDriverWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloseDriverWork(::grpc::ServerContext* /*context*/, const ::MailTaxi::CloseDriverWorkRequest* /*request*/, ::MailTaxi::CloseDriverWorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloseDriverWork(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MailTaxi::CloseDriverWorkRequest,::MailTaxi::CloseDriverWorkResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ProposeOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ProposeOrder() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MailTaxi::ProposeOrderRequest, ::MailTaxi::ProposeOrderResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MailTaxi::ProposeOrderRequest, ::MailTaxi::ProposeOrderResponse>* streamer) {
                       return this->StreamedProposeOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ProposeOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ProposeOrder(::grpc::ServerContext* /*context*/, const ::MailTaxi::ProposeOrderRequest* /*request*/, ::MailTaxi::ProposeOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProposeOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MailTaxi::ProposeOrderRequest,::MailTaxi::ProposeOrderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateOrder() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MailTaxi::CreateOrderRequest, ::MailTaxi::CreateOrderResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MailTaxi::CreateOrderRequest, ::MailTaxi::CreateOrderResponse>* streamer) {
                       return this->StreamedCreateOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateOrder(::grpc::ServerContext* /*context*/, const ::MailTaxi::CreateOrderRequest* /*request*/, ::MailTaxi::CreateOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MailTaxi::CreateOrderRequest,::MailTaxi::CreateOrderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveOrder() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MailTaxi::RemoveOrderRequest, ::MailTaxi::RemoveOrderResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MailTaxi::RemoveOrderRequest, ::MailTaxi::RemoveOrderResponse>* streamer) {
                       return this->StreamedRemoveOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveOrder(::grpc::ServerContext* /*context*/, const ::MailTaxi::RemoveOrderRequest* /*request*/, ::MailTaxi::RemoveOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MailTaxi::RemoveOrderRequest,::MailTaxi::RemoveOrderResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreatingDriverWork<WithStreamedUnaryMethod_CloseDriverWork<WithStreamedUnaryMethod_ProposeOrder<WithStreamedUnaryMethod_CreateOrder<WithStreamedUnaryMethod_RemoveOrder<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreatingDriverWork<WithStreamedUnaryMethod_CloseDriverWork<WithStreamedUnaryMethod_ProposeOrder<WithStreamedUnaryMethod_CreateOrder<WithStreamedUnaryMethod_RemoveOrder<Service > > > > > StreamedService;
};

}  // namespace MailTaxi


#endif  // GRPC_OrderManagement_2eproto__INCLUDED
