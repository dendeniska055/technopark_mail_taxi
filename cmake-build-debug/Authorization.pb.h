// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Authorization.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Authorization_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Authorization_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TaxiFacilities.pb.h"
#include "GeoData.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Authorization_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Authorization_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Authorization_2eproto;
namespace MailTaxi {
class AuthorizationRequest;
class AuthorizationRequestDefaultTypeInternal;
extern AuthorizationRequestDefaultTypeInternal _AuthorizationRequest_default_instance_;
class AuthorizationResponse;
class AuthorizationResponseDefaultTypeInternal;
extern AuthorizationResponseDefaultTypeInternal _AuthorizationResponse_default_instance_;
class EndDriverWorkRequest;
class EndDriverWorkRequestDefaultTypeInternal;
extern EndDriverWorkRequestDefaultTypeInternal _EndDriverWorkRequest_default_instance_;
class EndDriverWorkResponse;
class EndDriverWorkResponseDefaultTypeInternal;
extern EndDriverWorkResponseDefaultTypeInternal _EndDriverWorkResponse_default_instance_;
class MakeOrderRequest;
class MakeOrderRequestDefaultTypeInternal;
extern MakeOrderRequestDefaultTypeInternal _MakeOrderRequest_default_instance_;
class MakeOrderResponse;
class MakeOrderResponseDefaultTypeInternal;
extern MakeOrderResponseDefaultTypeInternal _MakeOrderResponse_default_instance_;
class RegistrationRequest;
class RegistrationRequestDefaultTypeInternal;
extern RegistrationRequestDefaultTypeInternal _RegistrationRequest_default_instance_;
class RegistrationResponse;
class RegistrationResponseDefaultTypeInternal;
extern RegistrationResponseDefaultTypeInternal _RegistrationResponse_default_instance_;
class StartDriverWorkRequest;
class StartDriverWorkRequestDefaultTypeInternal;
extern StartDriverWorkRequestDefaultTypeInternal _StartDriverWorkRequest_default_instance_;
class StartDriverWorkResponse;
class StartDriverWorkResponseDefaultTypeInternal;
extern StartDriverWorkResponseDefaultTypeInternal _StartDriverWorkResponse_default_instance_;
}  // namespace MailTaxi
PROTOBUF_NAMESPACE_OPEN
template<> ::MailTaxi::AuthorizationRequest* Arena::CreateMaybeMessage<::MailTaxi::AuthorizationRequest>(Arena*);
template<> ::MailTaxi::AuthorizationResponse* Arena::CreateMaybeMessage<::MailTaxi::AuthorizationResponse>(Arena*);
template<> ::MailTaxi::EndDriverWorkRequest* Arena::CreateMaybeMessage<::MailTaxi::EndDriverWorkRequest>(Arena*);
template<> ::MailTaxi::EndDriverWorkResponse* Arena::CreateMaybeMessage<::MailTaxi::EndDriverWorkResponse>(Arena*);
template<> ::MailTaxi::MakeOrderRequest* Arena::CreateMaybeMessage<::MailTaxi::MakeOrderRequest>(Arena*);
template<> ::MailTaxi::MakeOrderResponse* Arena::CreateMaybeMessage<::MailTaxi::MakeOrderResponse>(Arena*);
template<> ::MailTaxi::RegistrationRequest* Arena::CreateMaybeMessage<::MailTaxi::RegistrationRequest>(Arena*);
template<> ::MailTaxi::RegistrationResponse* Arena::CreateMaybeMessage<::MailTaxi::RegistrationResponse>(Arena*);
template<> ::MailTaxi::StartDriverWorkRequest* Arena::CreateMaybeMessage<::MailTaxi::StartDriverWorkRequest>(Arena*);
template<> ::MailTaxi::StartDriverWorkResponse* Arena::CreateMaybeMessage<::MailTaxi::StartDriverWorkResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MailTaxi {

enum UserType : int {
  driver = 0,
  client = 1,
  UserType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserType_IsValid(int value);
constexpr UserType UserType_MIN = driver;
constexpr UserType UserType_MAX = client;
constexpr int UserType_ARRAYSIZE = UserType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserType_descriptor();
template<typename T>
inline const std::string& UserType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserType_descriptor(), enum_t_value);
}
inline bool UserType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UserType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserType>(
    UserType_descriptor(), name, value);
}
// ===================================================================

class RegistrationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.RegistrationRequest) */ {
 public:
  inline RegistrationRequest() : RegistrationRequest(nullptr) {}
  virtual ~RegistrationRequest();

  RegistrationRequest(const RegistrationRequest& from);
  RegistrationRequest(RegistrationRequest&& from) noexcept
    : RegistrationRequest() {
    *this = ::std::move(from);
  }

  inline RegistrationRequest& operator=(const RegistrationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegistrationRequest& operator=(RegistrationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegistrationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegistrationRequest* internal_default_instance() {
    return reinterpret_cast<const RegistrationRequest*>(
               &_RegistrationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegistrationRequest& a, RegistrationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegistrationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegistrationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegistrationRequest* New() const final {
    return CreateMaybeMessage<RegistrationRequest>(nullptr);
  }

  RegistrationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegistrationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegistrationRequest& from);
  void MergeFrom(const RegistrationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegistrationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.RegistrationRequest";
  }
  protected:
  explicit RegistrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Authorization_2eproto);
    return ::descriptor_table_Authorization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kUserTypeFieldNumber = 4,
  };
  // string login = 1;
  void clear_login();
  const std::string& login() const;
  void set_login(const std::string& value);
  void set_login(std::string&& value);
  void set_login(const char* value);
  void set_login(const char* value, size_t size);
  std::string* mutable_login();
  std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // .MailTaxi.UserType userType = 4;
  void clear_usertype();
  ::MailTaxi::UserType usertype() const;
  void set_usertype(::MailTaxi::UserType value);
  private:
  ::MailTaxi::UserType _internal_usertype() const;
  void _internal_set_usertype(::MailTaxi::UserType value);
  public:

  // @@protoc_insertion_point(class_scope:MailTaxi.RegistrationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  int usertype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Authorization_2eproto;
};
// -------------------------------------------------------------------

class RegistrationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.RegistrationResponse) */ {
 public:
  inline RegistrationResponse() : RegistrationResponse(nullptr) {}
  virtual ~RegistrationResponse();

  RegistrationResponse(const RegistrationResponse& from);
  RegistrationResponse(RegistrationResponse&& from) noexcept
    : RegistrationResponse() {
    *this = ::std::move(from);
  }

  inline RegistrationResponse& operator=(const RegistrationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegistrationResponse& operator=(RegistrationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegistrationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegistrationResponse* internal_default_instance() {
    return reinterpret_cast<const RegistrationResponse*>(
               &_RegistrationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegistrationResponse& a, RegistrationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegistrationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegistrationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegistrationResponse* New() const final {
    return CreateMaybeMessage<RegistrationResponse>(nullptr);
  }

  RegistrationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegistrationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegistrationResponse& from);
  void MergeFrom(const RegistrationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegistrationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.RegistrationResponse";
  }
  protected:
  explicit RegistrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Authorization_2eproto);
    return ::descriptor_table_Authorization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // uint64 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:MailTaxi.RegistrationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Authorization_2eproto;
};
// -------------------------------------------------------------------

class AuthorizationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.AuthorizationRequest) */ {
 public:
  inline AuthorizationRequest() : AuthorizationRequest(nullptr) {}
  virtual ~AuthorizationRequest();

  AuthorizationRequest(const AuthorizationRequest& from);
  AuthorizationRequest(AuthorizationRequest&& from) noexcept
    : AuthorizationRequest() {
    *this = ::std::move(from);
  }

  inline AuthorizationRequest& operator=(const AuthorizationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthorizationRequest& operator=(AuthorizationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthorizationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthorizationRequest* internal_default_instance() {
    return reinterpret_cast<const AuthorizationRequest*>(
               &_AuthorizationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AuthorizationRequest& a, AuthorizationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthorizationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthorizationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthorizationRequest* New() const final {
    return CreateMaybeMessage<AuthorizationRequest>(nullptr);
  }

  AuthorizationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthorizationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthorizationRequest& from);
  void MergeFrom(const AuthorizationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthorizationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.AuthorizationRequest";
  }
  protected:
  explicit AuthorizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Authorization_2eproto);
    return ::descriptor_table_Authorization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kUserTypeFieldNumber = 3,
  };
  // string login = 1;
  void clear_login();
  const std::string& login() const;
  void set_login(const std::string& value);
  void set_login(std::string&& value);
  void set_login(const char* value);
  void set_login(const char* value, size_t size);
  std::string* mutable_login();
  std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // .MailTaxi.UserType userType = 3;
  void clear_usertype();
  ::MailTaxi::UserType usertype() const;
  void set_usertype(::MailTaxi::UserType value);
  private:
  ::MailTaxi::UserType _internal_usertype() const;
  void _internal_set_usertype(::MailTaxi::UserType value);
  public:

  // @@protoc_insertion_point(class_scope:MailTaxi.AuthorizationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  int usertype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Authorization_2eproto;
};
// -------------------------------------------------------------------

class AuthorizationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.AuthorizationResponse) */ {
 public:
  inline AuthorizationResponse() : AuthorizationResponse(nullptr) {}
  virtual ~AuthorizationResponse();

  AuthorizationResponse(const AuthorizationResponse& from);
  AuthorizationResponse(AuthorizationResponse&& from) noexcept
    : AuthorizationResponse() {
    *this = ::std::move(from);
  }

  inline AuthorizationResponse& operator=(const AuthorizationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthorizationResponse& operator=(AuthorizationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthorizationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthorizationResponse* internal_default_instance() {
    return reinterpret_cast<const AuthorizationResponse*>(
               &_AuthorizationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AuthorizationResponse& a, AuthorizationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthorizationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthorizationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthorizationResponse* New() const final {
    return CreateMaybeMessage<AuthorizationResponse>(nullptr);
  }

  AuthorizationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthorizationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthorizationResponse& from);
  void MergeFrom(const AuthorizationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthorizationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.AuthorizationResponse";
  }
  protected:
  explicit AuthorizationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Authorization_2eproto);
    return ::descriptor_table_Authorization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // uint64 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:MailTaxi.AuthorizationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Authorization_2eproto;
};
// -------------------------------------------------------------------

class StartDriverWorkRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.StartDriverWorkRequest) */ {
 public:
  inline StartDriverWorkRequest() : StartDriverWorkRequest(nullptr) {}
  virtual ~StartDriverWorkRequest();

  StartDriverWorkRequest(const StartDriverWorkRequest& from);
  StartDriverWorkRequest(StartDriverWorkRequest&& from) noexcept
    : StartDriverWorkRequest() {
    *this = ::std::move(from);
  }

  inline StartDriverWorkRequest& operator=(const StartDriverWorkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartDriverWorkRequest& operator=(StartDriverWorkRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartDriverWorkRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartDriverWorkRequest* internal_default_instance() {
    return reinterpret_cast<const StartDriverWorkRequest*>(
               &_StartDriverWorkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StartDriverWorkRequest& a, StartDriverWorkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartDriverWorkRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartDriverWorkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartDriverWorkRequest* New() const final {
    return CreateMaybeMessage<StartDriverWorkRequest>(nullptr);
  }

  StartDriverWorkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartDriverWorkRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartDriverWorkRequest& from);
  void MergeFrom(const StartDriverWorkRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartDriverWorkRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.StartDriverWorkRequest";
  }
  protected:
  explicit StartDriverWorkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Authorization_2eproto);
    return ::descriptor_table_Authorization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kCoordinateFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .MailTaxi.Coordinate coordinate = 2;
  bool has_coordinate() const;
  private:
  bool _internal_has_coordinate() const;
  public:
  void clear_coordinate();
  const ::MailTaxi::Coordinate& coordinate() const;
  ::MailTaxi::Coordinate* release_coordinate();
  ::MailTaxi::Coordinate* mutable_coordinate();
  void set_allocated_coordinate(::MailTaxi::Coordinate* coordinate);
  private:
  const ::MailTaxi::Coordinate& _internal_coordinate() const;
  ::MailTaxi::Coordinate* _internal_mutable_coordinate();
  public:
  void unsafe_arena_set_allocated_coordinate(
      ::MailTaxi::Coordinate* coordinate);
  ::MailTaxi::Coordinate* unsafe_arena_release_coordinate();

  // @@protoc_insertion_point(class_scope:MailTaxi.StartDriverWorkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::MailTaxi::Coordinate* coordinate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Authorization_2eproto;
};
// -------------------------------------------------------------------

class StartDriverWorkResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.StartDriverWorkResponse) */ {
 public:
  inline StartDriverWorkResponse() : StartDriverWorkResponse(nullptr) {}
  virtual ~StartDriverWorkResponse();

  StartDriverWorkResponse(const StartDriverWorkResponse& from);
  StartDriverWorkResponse(StartDriverWorkResponse&& from) noexcept
    : StartDriverWorkResponse() {
    *this = ::std::move(from);
  }

  inline StartDriverWorkResponse& operator=(const StartDriverWorkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartDriverWorkResponse& operator=(StartDriverWorkResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartDriverWorkResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartDriverWorkResponse* internal_default_instance() {
    return reinterpret_cast<const StartDriverWorkResponse*>(
               &_StartDriverWorkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StartDriverWorkResponse& a, StartDriverWorkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartDriverWorkResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartDriverWorkResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartDriverWorkResponse* New() const final {
    return CreateMaybeMessage<StartDriverWorkResponse>(nullptr);
  }

  StartDriverWorkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartDriverWorkResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartDriverWorkResponse& from);
  void MergeFrom(const StartDriverWorkResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartDriverWorkResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.StartDriverWorkResponse";
  }
  protected:
  explicit StartDriverWorkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Authorization_2eproto);
    return ::descriptor_table_Authorization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:MailTaxi.StartDriverWorkResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Authorization_2eproto;
};
// -------------------------------------------------------------------

class EndDriverWorkRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.EndDriverWorkRequest) */ {
 public:
  inline EndDriverWorkRequest() : EndDriverWorkRequest(nullptr) {}
  virtual ~EndDriverWorkRequest();

  EndDriverWorkRequest(const EndDriverWorkRequest& from);
  EndDriverWorkRequest(EndDriverWorkRequest&& from) noexcept
    : EndDriverWorkRequest() {
    *this = ::std::move(from);
  }

  inline EndDriverWorkRequest& operator=(const EndDriverWorkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndDriverWorkRequest& operator=(EndDriverWorkRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndDriverWorkRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndDriverWorkRequest* internal_default_instance() {
    return reinterpret_cast<const EndDriverWorkRequest*>(
               &_EndDriverWorkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EndDriverWorkRequest& a, EndDriverWorkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EndDriverWorkRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndDriverWorkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndDriverWorkRequest* New() const final {
    return CreateMaybeMessage<EndDriverWorkRequest>(nullptr);
  }

  EndDriverWorkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndDriverWorkRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndDriverWorkRequest& from);
  void MergeFrom(const EndDriverWorkRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndDriverWorkRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.EndDriverWorkRequest";
  }
  protected:
  explicit EndDriverWorkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Authorization_2eproto);
    return ::descriptor_table_Authorization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:MailTaxi.EndDriverWorkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Authorization_2eproto;
};
// -------------------------------------------------------------------

class EndDriverWorkResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.EndDriverWorkResponse) */ {
 public:
  inline EndDriverWorkResponse() : EndDriverWorkResponse(nullptr) {}
  virtual ~EndDriverWorkResponse();

  EndDriverWorkResponse(const EndDriverWorkResponse& from);
  EndDriverWorkResponse(EndDriverWorkResponse&& from) noexcept
    : EndDriverWorkResponse() {
    *this = ::std::move(from);
  }

  inline EndDriverWorkResponse& operator=(const EndDriverWorkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndDriverWorkResponse& operator=(EndDriverWorkResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndDriverWorkResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndDriverWorkResponse* internal_default_instance() {
    return reinterpret_cast<const EndDriverWorkResponse*>(
               &_EndDriverWorkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EndDriverWorkResponse& a, EndDriverWorkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EndDriverWorkResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndDriverWorkResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndDriverWorkResponse* New() const final {
    return CreateMaybeMessage<EndDriverWorkResponse>(nullptr);
  }

  EndDriverWorkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndDriverWorkResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndDriverWorkResponse& from);
  void MergeFrom(const EndDriverWorkResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndDriverWorkResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.EndDriverWorkResponse";
  }
  protected:
  explicit EndDriverWorkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Authorization_2eproto);
    return ::descriptor_table_Authorization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:MailTaxi.EndDriverWorkResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Authorization_2eproto;
};
// -------------------------------------------------------------------

class MakeOrderRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.MakeOrderRequest) */ {
 public:
  inline MakeOrderRequest() : MakeOrderRequest(nullptr) {}
  virtual ~MakeOrderRequest();

  MakeOrderRequest(const MakeOrderRequest& from);
  MakeOrderRequest(MakeOrderRequest&& from) noexcept
    : MakeOrderRequest() {
    *this = ::std::move(from);
  }

  inline MakeOrderRequest& operator=(const MakeOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MakeOrderRequest& operator=(MakeOrderRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MakeOrderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MakeOrderRequest* internal_default_instance() {
    return reinterpret_cast<const MakeOrderRequest*>(
               &_MakeOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MakeOrderRequest& a, MakeOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MakeOrderRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MakeOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MakeOrderRequest* New() const final {
    return CreateMaybeMessage<MakeOrderRequest>(nullptr);
  }

  MakeOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MakeOrderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MakeOrderRequest& from);
  void MergeFrom(const MakeOrderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MakeOrderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.MakeOrderRequest";
  }
  protected:
  explicit MakeOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Authorization_2eproto);
    return ::descriptor_table_Authorization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kLocationDataFieldNumber = 2,
    kAnimalFieldNumber = 3,
    kChildrenFieldNumber = 4,
    kDriverFoundFieldNumber = 5,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .MailTaxi.OrderLocationData locationData = 2;
  bool has_locationdata() const;
  private:
  bool _internal_has_locationdata() const;
  public:
  void clear_locationdata();
  const ::MailTaxi::OrderLocationData& locationdata() const;
  ::MailTaxi::OrderLocationData* release_locationdata();
  ::MailTaxi::OrderLocationData* mutable_locationdata();
  void set_allocated_locationdata(::MailTaxi::OrderLocationData* locationdata);
  private:
  const ::MailTaxi::OrderLocationData& _internal_locationdata() const;
  ::MailTaxi::OrderLocationData* _internal_mutable_locationdata();
  public:
  void unsafe_arena_set_allocated_locationdata(
      ::MailTaxi::OrderLocationData* locationdata);
  ::MailTaxi::OrderLocationData* unsafe_arena_release_locationdata();

  // bool animal = 3;
  void clear_animal();
  bool animal() const;
  void set_animal(bool value);
  private:
  bool _internal_animal() const;
  void _internal_set_animal(bool value);
  public:

  // bool children = 4;
  void clear_children();
  bool children() const;
  void set_children(bool value);
  private:
  bool _internal_children() const;
  void _internal_set_children(bool value);
  public:

  // bool driverFound = 5;
  void clear_driverfound();
  bool driverfound() const;
  void set_driverfound(bool value);
  private:
  bool _internal_driverfound() const;
  void _internal_set_driverfound(bool value);
  public:

  // @@protoc_insertion_point(class_scope:MailTaxi.MakeOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::MailTaxi::OrderLocationData* locationdata_;
  bool animal_;
  bool children_;
  bool driverfound_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Authorization_2eproto;
};
// -------------------------------------------------------------------

class MakeOrderResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailTaxi.MakeOrderResponse) */ {
 public:
  inline MakeOrderResponse() : MakeOrderResponse(nullptr) {}
  virtual ~MakeOrderResponse();

  MakeOrderResponse(const MakeOrderResponse& from);
  MakeOrderResponse(MakeOrderResponse&& from) noexcept
    : MakeOrderResponse() {
    *this = ::std::move(from);
  }

  inline MakeOrderResponse& operator=(const MakeOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MakeOrderResponse& operator=(MakeOrderResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MakeOrderResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MakeOrderResponse* internal_default_instance() {
    return reinterpret_cast<const MakeOrderResponse*>(
               &_MakeOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MakeOrderResponse& a, MakeOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MakeOrderResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MakeOrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MakeOrderResponse* New() const final {
    return CreateMaybeMessage<MakeOrderResponse>(nullptr);
  }

  MakeOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MakeOrderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MakeOrderResponse& from);
  void MergeFrom(const MakeOrderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MakeOrderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailTaxi.MakeOrderResponse";
  }
  protected:
  explicit MakeOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Authorization_2eproto);
    return ::descriptor_table_Authorization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 3,
    kNameFieldNumber = 4,
    kCoordinateFieldNumber = 1,
    kPriceFieldNumber = 2,
  };
  // string token = 3;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .MailTaxi.Coordinate coordinate = 1;
  bool has_coordinate() const;
  private:
  bool _internal_has_coordinate() const;
  public:
  void clear_coordinate();
  const ::MailTaxi::Coordinate& coordinate() const;
  ::MailTaxi::Coordinate* release_coordinate();
  ::MailTaxi::Coordinate* mutable_coordinate();
  void set_allocated_coordinate(::MailTaxi::Coordinate* coordinate);
  private:
  const ::MailTaxi::Coordinate& _internal_coordinate() const;
  ::MailTaxi::Coordinate* _internal_mutable_coordinate();
  public:
  void unsafe_arena_set_allocated_coordinate(
      ::MailTaxi::Coordinate* coordinate);
  ::MailTaxi::Coordinate* unsafe_arena_release_coordinate();

  // double price = 2;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // @@protoc_insertion_point(class_scope:MailTaxi.MakeOrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::MailTaxi::Coordinate* coordinate_;
  double price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Authorization_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegistrationRequest

// string login = 1;
inline void RegistrationRequest::clear_login() {
  login_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegistrationRequest::login() const {
  // @@protoc_insertion_point(field_get:MailTaxi.RegistrationRequest.login)
  return _internal_login();
}
inline void RegistrationRequest::set_login(const std::string& value) {
  _internal_set_login(value);
  // @@protoc_insertion_point(field_set:MailTaxi.RegistrationRequest.login)
}
inline std::string* RegistrationRequest::mutable_login() {
  // @@protoc_insertion_point(field_mutable:MailTaxi.RegistrationRequest.login)
  return _internal_mutable_login();
}
inline const std::string& RegistrationRequest::_internal_login() const {
  return login_.Get();
}
inline void RegistrationRequest::_internal_set_login(const std::string& value) {
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegistrationRequest::set_login(std::string&& value) {
  
  login_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MailTaxi.RegistrationRequest.login)
}
inline void RegistrationRequest::set_login(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MailTaxi.RegistrationRequest.login)
}
inline void RegistrationRequest::set_login(const char* value,
    size_t size) {
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MailTaxi.RegistrationRequest.login)
}
inline std::string* RegistrationRequest::_internal_mutable_login() {
  
  return login_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegistrationRequest::release_login() {
  // @@protoc_insertion_point(field_release:MailTaxi.RegistrationRequest.login)
  return login_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegistrationRequest::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  login_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MailTaxi.RegistrationRequest.login)
}

// string password = 2;
inline void RegistrationRequest::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegistrationRequest::password() const {
  // @@protoc_insertion_point(field_get:MailTaxi.RegistrationRequest.password)
  return _internal_password();
}
inline void RegistrationRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:MailTaxi.RegistrationRequest.password)
}
inline std::string* RegistrationRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:MailTaxi.RegistrationRequest.password)
  return _internal_mutable_password();
}
inline const std::string& RegistrationRequest::_internal_password() const {
  return password_.Get();
}
inline void RegistrationRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegistrationRequest::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MailTaxi.RegistrationRequest.password)
}
inline void RegistrationRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MailTaxi.RegistrationRequest.password)
}
inline void RegistrationRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MailTaxi.RegistrationRequest.password)
}
inline std::string* RegistrationRequest::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegistrationRequest::release_password() {
  // @@protoc_insertion_point(field_release:MailTaxi.RegistrationRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegistrationRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MailTaxi.RegistrationRequest.password)
}

// .MailTaxi.UserType userType = 4;
inline void RegistrationRequest::clear_usertype() {
  usertype_ = 0;
}
inline ::MailTaxi::UserType RegistrationRequest::_internal_usertype() const {
  return static_cast< ::MailTaxi::UserType >(usertype_);
}
inline ::MailTaxi::UserType RegistrationRequest::usertype() const {
  // @@protoc_insertion_point(field_get:MailTaxi.RegistrationRequest.userType)
  return _internal_usertype();
}
inline void RegistrationRequest::_internal_set_usertype(::MailTaxi::UserType value) {
  
  usertype_ = value;
}
inline void RegistrationRequest::set_usertype(::MailTaxi::UserType value) {
  _internal_set_usertype(value);
  // @@protoc_insertion_point(field_set:MailTaxi.RegistrationRequest.userType)
}

// -------------------------------------------------------------------

// RegistrationResponse

// string token = 1;
inline void RegistrationResponse::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegistrationResponse::token() const {
  // @@protoc_insertion_point(field_get:MailTaxi.RegistrationResponse.token)
  return _internal_token();
}
inline void RegistrationResponse::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:MailTaxi.RegistrationResponse.token)
}
inline std::string* RegistrationResponse::mutable_token() {
  // @@protoc_insertion_point(field_mutable:MailTaxi.RegistrationResponse.token)
  return _internal_mutable_token();
}
inline const std::string& RegistrationResponse::_internal_token() const {
  return token_.Get();
}
inline void RegistrationResponse::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegistrationResponse::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MailTaxi.RegistrationResponse.token)
}
inline void RegistrationResponse::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MailTaxi.RegistrationResponse.token)
}
inline void RegistrationResponse::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MailTaxi.RegistrationResponse.token)
}
inline std::string* RegistrationResponse::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegistrationResponse::release_token() {
  // @@protoc_insertion_point(field_release:MailTaxi.RegistrationResponse.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegistrationResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MailTaxi.RegistrationResponse.token)
}

// uint64 id = 2;
inline void RegistrationResponse::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RegistrationResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RegistrationResponse::id() const {
  // @@protoc_insertion_point(field_get:MailTaxi.RegistrationResponse.id)
  return _internal_id();
}
inline void RegistrationResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void RegistrationResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MailTaxi.RegistrationResponse.id)
}

// -------------------------------------------------------------------

// AuthorizationRequest

// string login = 1;
inline void AuthorizationRequest::clear_login() {
  login_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthorizationRequest::login() const {
  // @@protoc_insertion_point(field_get:MailTaxi.AuthorizationRequest.login)
  return _internal_login();
}
inline void AuthorizationRequest::set_login(const std::string& value) {
  _internal_set_login(value);
  // @@protoc_insertion_point(field_set:MailTaxi.AuthorizationRequest.login)
}
inline std::string* AuthorizationRequest::mutable_login() {
  // @@protoc_insertion_point(field_mutable:MailTaxi.AuthorizationRequest.login)
  return _internal_mutable_login();
}
inline const std::string& AuthorizationRequest::_internal_login() const {
  return login_.Get();
}
inline void AuthorizationRequest::_internal_set_login(const std::string& value) {
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthorizationRequest::set_login(std::string&& value) {
  
  login_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MailTaxi.AuthorizationRequest.login)
}
inline void AuthorizationRequest::set_login(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MailTaxi.AuthorizationRequest.login)
}
inline void AuthorizationRequest::set_login(const char* value,
    size_t size) {
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MailTaxi.AuthorizationRequest.login)
}
inline std::string* AuthorizationRequest::_internal_mutable_login() {
  
  return login_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthorizationRequest::release_login() {
  // @@protoc_insertion_point(field_release:MailTaxi.AuthorizationRequest.login)
  return login_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthorizationRequest::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  login_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MailTaxi.AuthorizationRequest.login)
}

// string password = 2;
inline void AuthorizationRequest::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthorizationRequest::password() const {
  // @@protoc_insertion_point(field_get:MailTaxi.AuthorizationRequest.password)
  return _internal_password();
}
inline void AuthorizationRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:MailTaxi.AuthorizationRequest.password)
}
inline std::string* AuthorizationRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:MailTaxi.AuthorizationRequest.password)
  return _internal_mutable_password();
}
inline const std::string& AuthorizationRequest::_internal_password() const {
  return password_.Get();
}
inline void AuthorizationRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthorizationRequest::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MailTaxi.AuthorizationRequest.password)
}
inline void AuthorizationRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MailTaxi.AuthorizationRequest.password)
}
inline void AuthorizationRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MailTaxi.AuthorizationRequest.password)
}
inline std::string* AuthorizationRequest::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthorizationRequest::release_password() {
  // @@protoc_insertion_point(field_release:MailTaxi.AuthorizationRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthorizationRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MailTaxi.AuthorizationRequest.password)
}

// .MailTaxi.UserType userType = 3;
inline void AuthorizationRequest::clear_usertype() {
  usertype_ = 0;
}
inline ::MailTaxi::UserType AuthorizationRequest::_internal_usertype() const {
  return static_cast< ::MailTaxi::UserType >(usertype_);
}
inline ::MailTaxi::UserType AuthorizationRequest::usertype() const {
  // @@protoc_insertion_point(field_get:MailTaxi.AuthorizationRequest.userType)
  return _internal_usertype();
}
inline void AuthorizationRequest::_internal_set_usertype(::MailTaxi::UserType value) {
  
  usertype_ = value;
}
inline void AuthorizationRequest::set_usertype(::MailTaxi::UserType value) {
  _internal_set_usertype(value);
  // @@protoc_insertion_point(field_set:MailTaxi.AuthorizationRequest.userType)
}

// -------------------------------------------------------------------

// AuthorizationResponse

// string token = 1;
inline void AuthorizationResponse::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthorizationResponse::token() const {
  // @@protoc_insertion_point(field_get:MailTaxi.AuthorizationResponse.token)
  return _internal_token();
}
inline void AuthorizationResponse::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:MailTaxi.AuthorizationResponse.token)
}
inline std::string* AuthorizationResponse::mutable_token() {
  // @@protoc_insertion_point(field_mutable:MailTaxi.AuthorizationResponse.token)
  return _internal_mutable_token();
}
inline const std::string& AuthorizationResponse::_internal_token() const {
  return token_.Get();
}
inline void AuthorizationResponse::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthorizationResponse::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MailTaxi.AuthorizationResponse.token)
}
inline void AuthorizationResponse::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MailTaxi.AuthorizationResponse.token)
}
inline void AuthorizationResponse::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MailTaxi.AuthorizationResponse.token)
}
inline std::string* AuthorizationResponse::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthorizationResponse::release_token() {
  // @@protoc_insertion_point(field_release:MailTaxi.AuthorizationResponse.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthorizationResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MailTaxi.AuthorizationResponse.token)
}

// uint64 id = 2;
inline void AuthorizationResponse::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AuthorizationResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AuthorizationResponse::id() const {
  // @@protoc_insertion_point(field_get:MailTaxi.AuthorizationResponse.id)
  return _internal_id();
}
inline void AuthorizationResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void AuthorizationResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MailTaxi.AuthorizationResponse.id)
}

// -------------------------------------------------------------------

// StartDriverWorkRequest

// string token = 1;
inline void StartDriverWorkRequest::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartDriverWorkRequest::token() const {
  // @@protoc_insertion_point(field_get:MailTaxi.StartDriverWorkRequest.token)
  return _internal_token();
}
inline void StartDriverWorkRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:MailTaxi.StartDriverWorkRequest.token)
}
inline std::string* StartDriverWorkRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:MailTaxi.StartDriverWorkRequest.token)
  return _internal_mutable_token();
}
inline const std::string& StartDriverWorkRequest::_internal_token() const {
  return token_.Get();
}
inline void StartDriverWorkRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartDriverWorkRequest::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MailTaxi.StartDriverWorkRequest.token)
}
inline void StartDriverWorkRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MailTaxi.StartDriverWorkRequest.token)
}
inline void StartDriverWorkRequest::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MailTaxi.StartDriverWorkRequest.token)
}
inline std::string* StartDriverWorkRequest::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartDriverWorkRequest::release_token() {
  // @@protoc_insertion_point(field_release:MailTaxi.StartDriverWorkRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartDriverWorkRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MailTaxi.StartDriverWorkRequest.token)
}

// .MailTaxi.Coordinate coordinate = 2;
inline bool StartDriverWorkRequest::_internal_has_coordinate() const {
  return this != internal_default_instance() && coordinate_ != nullptr;
}
inline bool StartDriverWorkRequest::has_coordinate() const {
  return _internal_has_coordinate();
}
inline const ::MailTaxi::Coordinate& StartDriverWorkRequest::_internal_coordinate() const {
  const ::MailTaxi::Coordinate* p = coordinate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MailTaxi::Coordinate*>(
      &::MailTaxi::_Coordinate_default_instance_);
}
inline const ::MailTaxi::Coordinate& StartDriverWorkRequest::coordinate() const {
  // @@protoc_insertion_point(field_get:MailTaxi.StartDriverWorkRequest.coordinate)
  return _internal_coordinate();
}
inline void StartDriverWorkRequest::unsafe_arena_set_allocated_coordinate(
    ::MailTaxi::Coordinate* coordinate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinate_);
  }
  coordinate_ = coordinate;
  if (coordinate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MailTaxi.StartDriverWorkRequest.coordinate)
}
inline ::MailTaxi::Coordinate* StartDriverWorkRequest::release_coordinate() {
  
  ::MailTaxi::Coordinate* temp = coordinate_;
  coordinate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MailTaxi::Coordinate* StartDriverWorkRequest::unsafe_arena_release_coordinate() {
  // @@protoc_insertion_point(field_release:MailTaxi.StartDriverWorkRequest.coordinate)
  
  ::MailTaxi::Coordinate* temp = coordinate_;
  coordinate_ = nullptr;
  return temp;
}
inline ::MailTaxi::Coordinate* StartDriverWorkRequest::_internal_mutable_coordinate() {
  
  if (coordinate_ == nullptr) {
    auto* p = CreateMaybeMessage<::MailTaxi::Coordinate>(GetArena());
    coordinate_ = p;
  }
  return coordinate_;
}
inline ::MailTaxi::Coordinate* StartDriverWorkRequest::mutable_coordinate() {
  // @@protoc_insertion_point(field_mutable:MailTaxi.StartDriverWorkRequest.coordinate)
  return _internal_mutable_coordinate();
}
inline void StartDriverWorkRequest::set_allocated_coordinate(::MailTaxi::Coordinate* coordinate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinate_);
  }
  if (coordinate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinate)->GetArena();
    if (message_arena != submessage_arena) {
      coordinate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinate, submessage_arena);
    }
    
  } else {
    
  }
  coordinate_ = coordinate;
  // @@protoc_insertion_point(field_set_allocated:MailTaxi.StartDriverWorkRequest.coordinate)
}

// -------------------------------------------------------------------

// StartDriverWorkResponse

// bool success = 1;
inline void StartDriverWorkResponse::clear_success() {
  success_ = false;
}
inline bool StartDriverWorkResponse::_internal_success() const {
  return success_;
}
inline bool StartDriverWorkResponse::success() const {
  // @@protoc_insertion_point(field_get:MailTaxi.StartDriverWorkResponse.success)
  return _internal_success();
}
inline void StartDriverWorkResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void StartDriverWorkResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:MailTaxi.StartDriverWorkResponse.success)
}

// -------------------------------------------------------------------

// EndDriverWorkRequest

// string token = 1;
inline void EndDriverWorkRequest::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EndDriverWorkRequest::token() const {
  // @@protoc_insertion_point(field_get:MailTaxi.EndDriverWorkRequest.token)
  return _internal_token();
}
inline void EndDriverWorkRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:MailTaxi.EndDriverWorkRequest.token)
}
inline std::string* EndDriverWorkRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:MailTaxi.EndDriverWorkRequest.token)
  return _internal_mutable_token();
}
inline const std::string& EndDriverWorkRequest::_internal_token() const {
  return token_.Get();
}
inline void EndDriverWorkRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EndDriverWorkRequest::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MailTaxi.EndDriverWorkRequest.token)
}
inline void EndDriverWorkRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MailTaxi.EndDriverWorkRequest.token)
}
inline void EndDriverWorkRequest::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MailTaxi.EndDriverWorkRequest.token)
}
inline std::string* EndDriverWorkRequest::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EndDriverWorkRequest::release_token() {
  // @@protoc_insertion_point(field_release:MailTaxi.EndDriverWorkRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EndDriverWorkRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MailTaxi.EndDriverWorkRequest.token)
}

// -------------------------------------------------------------------

// EndDriverWorkResponse

// bool success = 1;
inline void EndDriverWorkResponse::clear_success() {
  success_ = false;
}
inline bool EndDriverWorkResponse::_internal_success() const {
  return success_;
}
inline bool EndDriverWorkResponse::success() const {
  // @@protoc_insertion_point(field_get:MailTaxi.EndDriverWorkResponse.success)
  return _internal_success();
}
inline void EndDriverWorkResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void EndDriverWorkResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:MailTaxi.EndDriverWorkResponse.success)
}

// -------------------------------------------------------------------

// MakeOrderRequest

// string token = 1;
inline void MakeOrderRequest::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MakeOrderRequest::token() const {
  // @@protoc_insertion_point(field_get:MailTaxi.MakeOrderRequest.token)
  return _internal_token();
}
inline void MakeOrderRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:MailTaxi.MakeOrderRequest.token)
}
inline std::string* MakeOrderRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:MailTaxi.MakeOrderRequest.token)
  return _internal_mutable_token();
}
inline const std::string& MakeOrderRequest::_internal_token() const {
  return token_.Get();
}
inline void MakeOrderRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MakeOrderRequest::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MailTaxi.MakeOrderRequest.token)
}
inline void MakeOrderRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MailTaxi.MakeOrderRequest.token)
}
inline void MakeOrderRequest::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MailTaxi.MakeOrderRequest.token)
}
inline std::string* MakeOrderRequest::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MakeOrderRequest::release_token() {
  // @@protoc_insertion_point(field_release:MailTaxi.MakeOrderRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MakeOrderRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MailTaxi.MakeOrderRequest.token)
}

// .MailTaxi.OrderLocationData locationData = 2;
inline bool MakeOrderRequest::_internal_has_locationdata() const {
  return this != internal_default_instance() && locationdata_ != nullptr;
}
inline bool MakeOrderRequest::has_locationdata() const {
  return _internal_has_locationdata();
}
inline const ::MailTaxi::OrderLocationData& MakeOrderRequest::_internal_locationdata() const {
  const ::MailTaxi::OrderLocationData* p = locationdata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MailTaxi::OrderLocationData*>(
      &::MailTaxi::_OrderLocationData_default_instance_);
}
inline const ::MailTaxi::OrderLocationData& MakeOrderRequest::locationdata() const {
  // @@protoc_insertion_point(field_get:MailTaxi.MakeOrderRequest.locationData)
  return _internal_locationdata();
}
inline void MakeOrderRequest::unsafe_arena_set_allocated_locationdata(
    ::MailTaxi::OrderLocationData* locationdata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(locationdata_);
  }
  locationdata_ = locationdata;
  if (locationdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MailTaxi.MakeOrderRequest.locationData)
}
inline ::MailTaxi::OrderLocationData* MakeOrderRequest::release_locationdata() {
  
  ::MailTaxi::OrderLocationData* temp = locationdata_;
  locationdata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MailTaxi::OrderLocationData* MakeOrderRequest::unsafe_arena_release_locationdata() {
  // @@protoc_insertion_point(field_release:MailTaxi.MakeOrderRequest.locationData)
  
  ::MailTaxi::OrderLocationData* temp = locationdata_;
  locationdata_ = nullptr;
  return temp;
}
inline ::MailTaxi::OrderLocationData* MakeOrderRequest::_internal_mutable_locationdata() {
  
  if (locationdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::MailTaxi::OrderLocationData>(GetArena());
    locationdata_ = p;
  }
  return locationdata_;
}
inline ::MailTaxi::OrderLocationData* MakeOrderRequest::mutable_locationdata() {
  // @@protoc_insertion_point(field_mutable:MailTaxi.MakeOrderRequest.locationData)
  return _internal_mutable_locationdata();
}
inline void MakeOrderRequest::set_allocated_locationdata(::MailTaxi::OrderLocationData* locationdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(locationdata_);
  }
  if (locationdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(locationdata)->GetArena();
    if (message_arena != submessage_arena) {
      locationdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locationdata, submessage_arena);
    }
    
  } else {
    
  }
  locationdata_ = locationdata;
  // @@protoc_insertion_point(field_set_allocated:MailTaxi.MakeOrderRequest.locationData)
}

// bool animal = 3;
inline void MakeOrderRequest::clear_animal() {
  animal_ = false;
}
inline bool MakeOrderRequest::_internal_animal() const {
  return animal_;
}
inline bool MakeOrderRequest::animal() const {
  // @@protoc_insertion_point(field_get:MailTaxi.MakeOrderRequest.animal)
  return _internal_animal();
}
inline void MakeOrderRequest::_internal_set_animal(bool value) {
  
  animal_ = value;
}
inline void MakeOrderRequest::set_animal(bool value) {
  _internal_set_animal(value);
  // @@protoc_insertion_point(field_set:MailTaxi.MakeOrderRequest.animal)
}

// bool children = 4;
inline void MakeOrderRequest::clear_children() {
  children_ = false;
}
inline bool MakeOrderRequest::_internal_children() const {
  return children_;
}
inline bool MakeOrderRequest::children() const {
  // @@protoc_insertion_point(field_get:MailTaxi.MakeOrderRequest.children)
  return _internal_children();
}
inline void MakeOrderRequest::_internal_set_children(bool value) {
  
  children_ = value;
}
inline void MakeOrderRequest::set_children(bool value) {
  _internal_set_children(value);
  // @@protoc_insertion_point(field_set:MailTaxi.MakeOrderRequest.children)
}

// bool driverFound = 5;
inline void MakeOrderRequest::clear_driverfound() {
  driverfound_ = false;
}
inline bool MakeOrderRequest::_internal_driverfound() const {
  return driverfound_;
}
inline bool MakeOrderRequest::driverfound() const {
  // @@protoc_insertion_point(field_get:MailTaxi.MakeOrderRequest.driverFound)
  return _internal_driverfound();
}
inline void MakeOrderRequest::_internal_set_driverfound(bool value) {
  
  driverfound_ = value;
}
inline void MakeOrderRequest::set_driverfound(bool value) {
  _internal_set_driverfound(value);
  // @@protoc_insertion_point(field_set:MailTaxi.MakeOrderRequest.driverFound)
}

// -------------------------------------------------------------------

// MakeOrderResponse

// .MailTaxi.Coordinate coordinate = 1;
inline bool MakeOrderResponse::_internal_has_coordinate() const {
  return this != internal_default_instance() && coordinate_ != nullptr;
}
inline bool MakeOrderResponse::has_coordinate() const {
  return _internal_has_coordinate();
}
inline const ::MailTaxi::Coordinate& MakeOrderResponse::_internal_coordinate() const {
  const ::MailTaxi::Coordinate* p = coordinate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MailTaxi::Coordinate*>(
      &::MailTaxi::_Coordinate_default_instance_);
}
inline const ::MailTaxi::Coordinate& MakeOrderResponse::coordinate() const {
  // @@protoc_insertion_point(field_get:MailTaxi.MakeOrderResponse.coordinate)
  return _internal_coordinate();
}
inline void MakeOrderResponse::unsafe_arena_set_allocated_coordinate(
    ::MailTaxi::Coordinate* coordinate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinate_);
  }
  coordinate_ = coordinate;
  if (coordinate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MailTaxi.MakeOrderResponse.coordinate)
}
inline ::MailTaxi::Coordinate* MakeOrderResponse::release_coordinate() {
  
  ::MailTaxi::Coordinate* temp = coordinate_;
  coordinate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MailTaxi::Coordinate* MakeOrderResponse::unsafe_arena_release_coordinate() {
  // @@protoc_insertion_point(field_release:MailTaxi.MakeOrderResponse.coordinate)
  
  ::MailTaxi::Coordinate* temp = coordinate_;
  coordinate_ = nullptr;
  return temp;
}
inline ::MailTaxi::Coordinate* MakeOrderResponse::_internal_mutable_coordinate() {
  
  if (coordinate_ == nullptr) {
    auto* p = CreateMaybeMessage<::MailTaxi::Coordinate>(GetArena());
    coordinate_ = p;
  }
  return coordinate_;
}
inline ::MailTaxi::Coordinate* MakeOrderResponse::mutable_coordinate() {
  // @@protoc_insertion_point(field_mutable:MailTaxi.MakeOrderResponse.coordinate)
  return _internal_mutable_coordinate();
}
inline void MakeOrderResponse::set_allocated_coordinate(::MailTaxi::Coordinate* coordinate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinate_);
  }
  if (coordinate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinate)->GetArena();
    if (message_arena != submessage_arena) {
      coordinate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinate, submessage_arena);
    }
    
  } else {
    
  }
  coordinate_ = coordinate;
  // @@protoc_insertion_point(field_set_allocated:MailTaxi.MakeOrderResponse.coordinate)
}

// double price = 2;
inline void MakeOrderResponse::clear_price() {
  price_ = 0;
}
inline double MakeOrderResponse::_internal_price() const {
  return price_;
}
inline double MakeOrderResponse::price() const {
  // @@protoc_insertion_point(field_get:MailTaxi.MakeOrderResponse.price)
  return _internal_price();
}
inline void MakeOrderResponse::_internal_set_price(double value) {
  
  price_ = value;
}
inline void MakeOrderResponse::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:MailTaxi.MakeOrderResponse.price)
}

// string token = 3;
inline void MakeOrderResponse::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MakeOrderResponse::token() const {
  // @@protoc_insertion_point(field_get:MailTaxi.MakeOrderResponse.token)
  return _internal_token();
}
inline void MakeOrderResponse::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:MailTaxi.MakeOrderResponse.token)
}
inline std::string* MakeOrderResponse::mutable_token() {
  // @@protoc_insertion_point(field_mutable:MailTaxi.MakeOrderResponse.token)
  return _internal_mutable_token();
}
inline const std::string& MakeOrderResponse::_internal_token() const {
  return token_.Get();
}
inline void MakeOrderResponse::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MakeOrderResponse::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MailTaxi.MakeOrderResponse.token)
}
inline void MakeOrderResponse::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MailTaxi.MakeOrderResponse.token)
}
inline void MakeOrderResponse::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MailTaxi.MakeOrderResponse.token)
}
inline std::string* MakeOrderResponse::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MakeOrderResponse::release_token() {
  // @@protoc_insertion_point(field_release:MailTaxi.MakeOrderResponse.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MakeOrderResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MailTaxi.MakeOrderResponse.token)
}

// string name = 4;
inline void MakeOrderResponse::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MakeOrderResponse::name() const {
  // @@protoc_insertion_point(field_get:MailTaxi.MakeOrderResponse.name)
  return _internal_name();
}
inline void MakeOrderResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:MailTaxi.MakeOrderResponse.name)
}
inline std::string* MakeOrderResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:MailTaxi.MakeOrderResponse.name)
  return _internal_mutable_name();
}
inline const std::string& MakeOrderResponse::_internal_name() const {
  return name_.Get();
}
inline void MakeOrderResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MakeOrderResponse::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MailTaxi.MakeOrderResponse.name)
}
inline void MakeOrderResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MailTaxi.MakeOrderResponse.name)
}
inline void MakeOrderResponse::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MailTaxi.MakeOrderResponse.name)
}
inline std::string* MakeOrderResponse::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MakeOrderResponse::release_name() {
  // @@protoc_insertion_point(field_release:MailTaxi.MakeOrderResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MakeOrderResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MailTaxi.MakeOrderResponse.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MailTaxi

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::MailTaxi::UserType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MailTaxi::UserType>() {
  return ::MailTaxi::UserType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Authorization_2eproto
