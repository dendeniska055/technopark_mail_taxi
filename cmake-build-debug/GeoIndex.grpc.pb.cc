// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: GeoIndex.proto

#include "GeoIndex.pb.h"
#include "GeoIndex.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace MailTaxi {

static const char* GeoIndex_method_names[] = {
  "/MailTaxi.GeoIndex/RegisterDriver",
  "/MailTaxi.GeoIndex/SelectDrivers",
  "/MailTaxi.GeoIndex/MoveDriver",
  "/MailTaxi.GeoIndex/RemoveDriver",
};

std::unique_ptr< GeoIndex::Stub> GeoIndex::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GeoIndex::Stub> stub(new GeoIndex::Stub(channel));
  return stub;
}

GeoIndex::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RegisterDriver_(GeoIndex_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SelectDrivers_(GeoIndex_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveDriver_(GeoIndex_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveDriver_(GeoIndex_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GeoIndex::Stub::RegisterDriver(::grpc::ClientContext* context, const ::MailTaxi::RegisterDriverRequest& request, ::MailTaxi::RegisterDriverResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterDriver_, context, request, response);
}

void GeoIndex::Stub::experimental_async::RegisterDriver(::grpc::ClientContext* context, const ::MailTaxi::RegisterDriverRequest* request, ::MailTaxi::RegisterDriverResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterDriver_, context, request, response, std::move(f));
}

void GeoIndex::Stub::experimental_async::RegisterDriver(::grpc::ClientContext* context, const ::MailTaxi::RegisterDriverRequest* request, ::MailTaxi::RegisterDriverResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterDriver_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MailTaxi::RegisterDriverResponse>* GeoIndex::Stub::PrepareAsyncRegisterDriverRaw(::grpc::ClientContext* context, const ::MailTaxi::RegisterDriverRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MailTaxi::RegisterDriverResponse>::Create(channel_.get(), cq, rpcmethod_RegisterDriver_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::MailTaxi::RegisterDriverResponse>* GeoIndex::Stub::AsyncRegisterDriverRaw(::grpc::ClientContext* context, const ::MailTaxi::RegisterDriverRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterDriverRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GeoIndex::Stub::SelectDrivers(::grpc::ClientContext* context, const ::MailTaxi::SelectDriversRequest& request, ::MailTaxi::SelectDriversResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SelectDrivers_, context, request, response);
}

void GeoIndex::Stub::experimental_async::SelectDrivers(::grpc::ClientContext* context, const ::MailTaxi::SelectDriversRequest* request, ::MailTaxi::SelectDriversResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SelectDrivers_, context, request, response, std::move(f));
}

void GeoIndex::Stub::experimental_async::SelectDrivers(::grpc::ClientContext* context, const ::MailTaxi::SelectDriversRequest* request, ::MailTaxi::SelectDriversResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SelectDrivers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MailTaxi::SelectDriversResponse>* GeoIndex::Stub::PrepareAsyncSelectDriversRaw(::grpc::ClientContext* context, const ::MailTaxi::SelectDriversRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MailTaxi::SelectDriversResponse>::Create(channel_.get(), cq, rpcmethod_SelectDrivers_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::MailTaxi::SelectDriversResponse>* GeoIndex::Stub::AsyncSelectDriversRaw(::grpc::ClientContext* context, const ::MailTaxi::SelectDriversRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSelectDriversRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GeoIndex::Stub::MoveDriver(::grpc::ClientContext* context, const ::MailTaxi::MoveDriverRequest& request, ::MailTaxi::MoveDriverResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveDriver_, context, request, response);
}

void GeoIndex::Stub::experimental_async::MoveDriver(::grpc::ClientContext* context, const ::MailTaxi::MoveDriverRequest* request, ::MailTaxi::MoveDriverResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveDriver_, context, request, response, std::move(f));
}

void GeoIndex::Stub::experimental_async::MoveDriver(::grpc::ClientContext* context, const ::MailTaxi::MoveDriverRequest* request, ::MailTaxi::MoveDriverResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveDriver_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MailTaxi::MoveDriverResponse>* GeoIndex::Stub::PrepareAsyncMoveDriverRaw(::grpc::ClientContext* context, const ::MailTaxi::MoveDriverRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MailTaxi::MoveDriverResponse>::Create(channel_.get(), cq, rpcmethod_MoveDriver_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::MailTaxi::MoveDriverResponse>* GeoIndex::Stub::AsyncMoveDriverRaw(::grpc::ClientContext* context, const ::MailTaxi::MoveDriverRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMoveDriverRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GeoIndex::Stub::RemoveDriver(::grpc::ClientContext* context, const ::MailTaxi::RemoveDriverRequest& request, ::MailTaxi::RemoveDriverResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveDriver_, context, request, response);
}

void GeoIndex::Stub::experimental_async::RemoveDriver(::grpc::ClientContext* context, const ::MailTaxi::RemoveDriverRequest* request, ::MailTaxi::RemoveDriverResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveDriver_, context, request, response, std::move(f));
}

void GeoIndex::Stub::experimental_async::RemoveDriver(::grpc::ClientContext* context, const ::MailTaxi::RemoveDriverRequest* request, ::MailTaxi::RemoveDriverResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveDriver_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MailTaxi::RemoveDriverResponse>* GeoIndex::Stub::PrepareAsyncRemoveDriverRaw(::grpc::ClientContext* context, const ::MailTaxi::RemoveDriverRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MailTaxi::RemoveDriverResponse>::Create(channel_.get(), cq, rpcmethod_RemoveDriver_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::MailTaxi::RemoveDriverResponse>* GeoIndex::Stub::AsyncRemoveDriverRaw(::grpc::ClientContext* context, const ::MailTaxi::RemoveDriverRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveDriverRaw(context, request, cq);
  result->StartCall();
  return result;
}

GeoIndex::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeoIndex_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeoIndex::Service, ::MailTaxi::RegisterDriverRequest, ::MailTaxi::RegisterDriverResponse>(
          [](GeoIndex::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MailTaxi::RegisterDriverRequest* req,
             ::MailTaxi::RegisterDriverResponse* resp) {
               return service->RegisterDriver(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeoIndex_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeoIndex::Service, ::MailTaxi::SelectDriversRequest, ::MailTaxi::SelectDriversResponse>(
          [](GeoIndex::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MailTaxi::SelectDriversRequest* req,
             ::MailTaxi::SelectDriversResponse* resp) {
               return service->SelectDrivers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeoIndex_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeoIndex::Service, ::MailTaxi::MoveDriverRequest, ::MailTaxi::MoveDriverResponse>(
          [](GeoIndex::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MailTaxi::MoveDriverRequest* req,
             ::MailTaxi::MoveDriverResponse* resp) {
               return service->MoveDriver(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeoIndex_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeoIndex::Service, ::MailTaxi::RemoveDriverRequest, ::MailTaxi::RemoveDriverResponse>(
          [](GeoIndex::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MailTaxi::RemoveDriverRequest* req,
             ::MailTaxi::RemoveDriverResponse* resp) {
               return service->RemoveDriver(ctx, req, resp);
             }, this)));
}

GeoIndex::Service::~Service() {
}

::grpc::Status GeoIndex::Service::RegisterDriver(::grpc::ServerContext* context, const ::MailTaxi::RegisterDriverRequest* request, ::MailTaxi::RegisterDriverResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeoIndex::Service::SelectDrivers(::grpc::ServerContext* context, const ::MailTaxi::SelectDriversRequest* request, ::MailTaxi::SelectDriversResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeoIndex::Service::MoveDriver(::grpc::ServerContext* context, const ::MailTaxi::MoveDriverRequest* request, ::MailTaxi::MoveDriverResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeoIndex::Service::RemoveDriver(::grpc::ServerContext* context, const ::MailTaxi::RemoveDriverRequest* request, ::MailTaxi::RemoveDriverResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace MailTaxi

