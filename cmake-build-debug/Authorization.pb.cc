// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Authorization.proto

#include "Authorization.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_GeoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coordinate_GeoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GeoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderLocationData_GeoData_2eproto;
namespace MailTaxi {
class RegistrationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegistrationRequest> _instance;
} _RegistrationRequest_default_instance_;
class RegistrationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegistrationResponse> _instance;
} _RegistrationResponse_default_instance_;
class AuthorizationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthorizationRequest> _instance;
} _AuthorizationRequest_default_instance_;
class AuthorizationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthorizationResponse> _instance;
} _AuthorizationResponse_default_instance_;
class StartDriverWorkRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartDriverWorkRequest> _instance;
} _StartDriverWorkRequest_default_instance_;
class StartDriverWorkResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartDriverWorkResponse> _instance;
} _StartDriverWorkResponse_default_instance_;
class EndDriverWorkRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EndDriverWorkRequest> _instance;
} _EndDriverWorkRequest_default_instance_;
class EndDriverWorkResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EndDriverWorkResponse> _instance;
} _EndDriverWorkResponse_default_instance_;
class MakeOrderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MakeOrderRequest> _instance;
} _MakeOrderRequest_default_instance_;
class MakeOrderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MakeOrderResponse> _instance;
} _MakeOrderResponse_default_instance_;
}  // namespace MailTaxi
static void InitDefaultsscc_info_AuthorizationRequest_Authorization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_AuthorizationRequest_default_instance_;
    new (ptr) ::MailTaxi::AuthorizationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::AuthorizationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthorizationRequest_Authorization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthorizationRequest_Authorization_2eproto}, {}};

static void InitDefaultsscc_info_AuthorizationResponse_Authorization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_AuthorizationResponse_default_instance_;
    new (ptr) ::MailTaxi::AuthorizationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::AuthorizationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthorizationResponse_Authorization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthorizationResponse_Authorization_2eproto}, {}};

static void InitDefaultsscc_info_EndDriverWorkRequest_Authorization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_EndDriverWorkRequest_default_instance_;
    new (ptr) ::MailTaxi::EndDriverWorkRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::EndDriverWorkRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndDriverWorkRequest_Authorization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EndDriverWorkRequest_Authorization_2eproto}, {}};

static void InitDefaultsscc_info_EndDriverWorkResponse_Authorization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_EndDriverWorkResponse_default_instance_;
    new (ptr) ::MailTaxi::EndDriverWorkResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::EndDriverWorkResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndDriverWorkResponse_Authorization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EndDriverWorkResponse_Authorization_2eproto}, {}};

static void InitDefaultsscc_info_MakeOrderRequest_Authorization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_MakeOrderRequest_default_instance_;
    new (ptr) ::MailTaxi::MakeOrderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::MakeOrderRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MakeOrderRequest_Authorization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MakeOrderRequest_Authorization_2eproto}, {
      &scc_info_OrderLocationData_GeoData_2eproto.base,}};

static void InitDefaultsscc_info_MakeOrderResponse_Authorization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_MakeOrderResponse_default_instance_;
    new (ptr) ::MailTaxi::MakeOrderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::MakeOrderResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MakeOrderResponse_Authorization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MakeOrderResponse_Authorization_2eproto}, {
      &scc_info_Coordinate_GeoData_2eproto.base,}};

static void InitDefaultsscc_info_RegistrationRequest_Authorization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_RegistrationRequest_default_instance_;
    new (ptr) ::MailTaxi::RegistrationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::RegistrationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegistrationRequest_Authorization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegistrationRequest_Authorization_2eproto}, {}};

static void InitDefaultsscc_info_RegistrationResponse_Authorization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_RegistrationResponse_default_instance_;
    new (ptr) ::MailTaxi::RegistrationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::RegistrationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegistrationResponse_Authorization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegistrationResponse_Authorization_2eproto}, {}};

static void InitDefaultsscc_info_StartDriverWorkRequest_Authorization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_StartDriverWorkRequest_default_instance_;
    new (ptr) ::MailTaxi::StartDriverWorkRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::StartDriverWorkRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StartDriverWorkRequest_Authorization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StartDriverWorkRequest_Authorization_2eproto}, {
      &scc_info_Coordinate_GeoData_2eproto.base,}};

static void InitDefaultsscc_info_StartDriverWorkResponse_Authorization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_StartDriverWorkResponse_default_instance_;
    new (ptr) ::MailTaxi::StartDriverWorkResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::StartDriverWorkResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartDriverWorkResponse_Authorization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartDriverWorkResponse_Authorization_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Authorization_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Authorization_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Authorization_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Authorization_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::RegistrationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::RegistrationRequest, login_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::RegistrationRequest, password_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::RegistrationRequest, usertype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::RegistrationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::RegistrationResponse, token_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::RegistrationResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::AuthorizationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::AuthorizationRequest, login_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::AuthorizationRequest, password_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::AuthorizationRequest, usertype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::AuthorizationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::AuthorizationResponse, token_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::AuthorizationResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::StartDriverWorkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::StartDriverWorkRequest, token_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::StartDriverWorkRequest, coordinate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::StartDriverWorkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::StartDriverWorkResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::EndDriverWorkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::EndDriverWorkRequest, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::EndDriverWorkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::EndDriverWorkResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::MakeOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::MakeOrderRequest, token_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::MakeOrderRequest, locationdata_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::MakeOrderRequest, animal_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::MakeOrderRequest, children_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::MakeOrderRequest, driverfound_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::MakeOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::MakeOrderResponse, coordinate_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::MakeOrderResponse, price_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::MakeOrderResponse, token_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::MakeOrderResponse, name_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MailTaxi::RegistrationRequest)},
  { 8, -1, sizeof(::MailTaxi::RegistrationResponse)},
  { 15, -1, sizeof(::MailTaxi::AuthorizationRequest)},
  { 23, -1, sizeof(::MailTaxi::AuthorizationResponse)},
  { 30, -1, sizeof(::MailTaxi::StartDriverWorkRequest)},
  { 37, -1, sizeof(::MailTaxi::StartDriverWorkResponse)},
  { 43, -1, sizeof(::MailTaxi::EndDriverWorkRequest)},
  { 49, -1, sizeof(::MailTaxi::EndDriverWorkResponse)},
  { 55, -1, sizeof(::MailTaxi::MakeOrderRequest)},
  { 65, -1, sizeof(::MailTaxi::MakeOrderResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_RegistrationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_RegistrationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_AuthorizationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_AuthorizationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_StartDriverWorkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_StartDriverWorkResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_EndDriverWorkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_EndDriverWorkResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_MakeOrderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_MakeOrderResponse_default_instance_),
};

const char descriptor_table_protodef_Authorization_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023Authorization.proto\022\010MailTaxi\032\024TaxiFac"
  "ilities.proto\032\rGeoData.proto\"\\\n\023Registra"
  "tionRequest\022\r\n\005login\030\001 \001(\t\022\020\n\010password\030\002"
  " \001(\t\022$\n\010userType\030\004 \001(\0162\022.MailTaxi.UserTy"
  "pe\"1\n\024RegistrationResponse\022\r\n\005token\030\001 \001("
  "\t\022\n\n\002id\030\002 \001(\004\"]\n\024AuthorizationRequest\022\r\n"
  "\005login\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\022$\n\010userTy"
  "pe\030\003 \001(\0162\022.MailTaxi.UserType\"2\n\025Authoriz"
  "ationResponse\022\r\n\005token\030\001 \001(\t\022\n\n\002id\030\002 \001(\004"
  "\"Q\n\026StartDriverWorkRequest\022\r\n\005token\030\001 \001("
  "\t\022(\n\ncoordinate\030\002 \001(\0132\024.MailTaxi.Coordin"
  "ate\"*\n\027StartDriverWorkResponse\022\017\n\007succes"
  "s\030\001 \001(\010\"%\n\024EndDriverWorkRequest\022\r\n\005token"
  "\030\001 \001(\t\"(\n\025EndDriverWorkResponse\022\017\n\007succe"
  "ss\030\001 \001(\010\"\213\001\n\020MakeOrderRequest\022\r\n\005token\030\001"
  " \001(\t\0221\n\014locationData\030\002 \001(\0132\033.MailTaxi.Or"
  "derLocationData\022\016\n\006animal\030\003 \001(\010\022\020\n\010child"
  "ren\030\004 \001(\010\022\023\n\013driverFound\030\005 \001(\010\"i\n\021MakeOr"
  "derResponse\022(\n\ncoordinate\030\001 \001(\0132\024.MailTa"
  "xi.Coordinate\022\r\n\005price\030\002 \001(\001\022\r\n\005token\030\003 "
  "\001(\t\022\014\n\004name\030\004 \001(\t*\"\n\010UserType\022\n\n\006driver\020"
  "\000\022\n\n\006client\020\0012\254\003\n\rAuthorization\022O\n\014Regis"
  "tration\022\035.MailTaxi.RegistrationRequest\032\036"
  ".MailTaxi.RegistrationResponse\"\000\022R\n\rAuth"
  "orization\022\036.MailTaxi.AuthorizationReques"
  "t\032\037.MailTaxi.AuthorizationResponse\"\000\022X\n\017"
  "StartDriverWork\022 .MailTaxi.StartDriverWo"
  "rkRequest\032!.MailTaxi.StartDriverWorkResp"
  "onse\"\000\022R\n\rEndDriverWork\022\036.MailTaxi.EndDr"
  "iverWorkRequest\032\037.MailTaxi.EndDriverWork"
  "Response\"\000\022H\n\tMakeOrder\022\032.MailTaxi.MakeO"
  "rderRequest\032\033.MailTaxi.MakeOrderResponse"
  "\"\0000\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Authorization_2eproto_deps[2] = {
  &::descriptor_table_GeoData_2eproto,
  &::descriptor_table_TaxiFacilities_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Authorization_2eproto_sccs[10] = {
  &scc_info_AuthorizationRequest_Authorization_2eproto.base,
  &scc_info_AuthorizationResponse_Authorization_2eproto.base,
  &scc_info_EndDriverWorkRequest_Authorization_2eproto.base,
  &scc_info_EndDriverWorkResponse_Authorization_2eproto.base,
  &scc_info_MakeOrderRequest_Authorization_2eproto.base,
  &scc_info_MakeOrderResponse_Authorization_2eproto.base,
  &scc_info_RegistrationRequest_Authorization_2eproto.base,
  &scc_info_RegistrationResponse_Authorization_2eproto.base,
  &scc_info_StartDriverWorkRequest_Authorization_2eproto.base,
  &scc_info_StartDriverWorkResponse_Authorization_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Authorization_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Authorization_2eproto = {
  false, false, descriptor_table_protodef_Authorization_2eproto, "Authorization.proto", 1292,
  &descriptor_table_Authorization_2eproto_once, descriptor_table_Authorization_2eproto_sccs, descriptor_table_Authorization_2eproto_deps, 10, 2,
  schemas, file_default_instances, TableStruct_Authorization_2eproto::offsets,
  file_level_metadata_Authorization_2eproto, 10, file_level_enum_descriptors_Authorization_2eproto, file_level_service_descriptors_Authorization_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Authorization_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Authorization_2eproto)), true);
namespace MailTaxi {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Authorization_2eproto);
  return file_level_enum_descriptors_Authorization_2eproto[0];
}
bool UserType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RegistrationRequest::InitAsDefaultInstance() {
}
class RegistrationRequest::_Internal {
 public:
};

RegistrationRequest::RegistrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.RegistrationRequest)
}
RegistrationRequest::RegistrationRequest(const RegistrationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_login().empty()) {
    login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_login(),
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_password(),
      GetArena());
  }
  usertype_ = from.usertype_;
  // @@protoc_insertion_point(copy_constructor:MailTaxi.RegistrationRequest)
}

void RegistrationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegistrationRequest_Authorization_2eproto.base);
  login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usertype_ = 0;
}

RegistrationRequest::~RegistrationRequest() {
  // @@protoc_insertion_point(destructor:MailTaxi.RegistrationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegistrationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  login_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegistrationRequest::ArenaDtor(void* object) {
  RegistrationRequest* _this = reinterpret_cast< RegistrationRequest* >(object);
  (void)_this;
}
void RegistrationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegistrationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegistrationRequest& RegistrationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegistrationRequest_Authorization_2eproto.base);
  return *internal_default_instance();
}


void RegistrationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.RegistrationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  login_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  usertype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegistrationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_login();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MailTaxi.RegistrationRequest.login"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MailTaxi.RegistrationRequest.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MailTaxi.UserType userType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_usertype(static_cast<::MailTaxi::UserType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegistrationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.RegistrationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string login = 1;
  if (this->login().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login().data(), static_cast<int>(this->_internal_login().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MailTaxi.RegistrationRequest.login");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_login(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MailTaxi.RegistrationRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // .MailTaxi.UserType userType = 4;
  if (this->usertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_usertype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.RegistrationRequest)
  return target;
}

size_t RegistrationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.RegistrationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string login = 1;
  if (this->login().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_login());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // .MailTaxi.UserType userType = 4;
  if (this->usertype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_usertype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegistrationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.RegistrationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegistrationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegistrationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.RegistrationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.RegistrationRequest)
    MergeFrom(*source);
  }
}

void RegistrationRequest::MergeFrom(const RegistrationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.RegistrationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.login().size() > 0) {
    _internal_set_login(from._internal_login());
  }
  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
  if (from.usertype() != 0) {
    _internal_set_usertype(from._internal_usertype());
  }
}

void RegistrationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.RegistrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegistrationRequest::CopyFrom(const RegistrationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.RegistrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistrationRequest::IsInitialized() const {
  return true;
}

void RegistrationRequest::InternalSwap(RegistrationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  login_.Swap(&other->login_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(usertype_, other->usertype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegistrationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegistrationResponse::InitAsDefaultInstance() {
}
class RegistrationResponse::_Internal {
 public:
};

RegistrationResponse::RegistrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.RegistrationResponse)
}
RegistrationResponse::RegistrationResponse(const RegistrationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:MailTaxi.RegistrationResponse)
}

void RegistrationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegistrationResponse_Authorization_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_ULONGLONG(0);
}

RegistrationResponse::~RegistrationResponse() {
  // @@protoc_insertion_point(destructor:MailTaxi.RegistrationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegistrationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegistrationResponse::ArenaDtor(void* object) {
  RegistrationResponse* _this = reinterpret_cast< RegistrationResponse* >(object);
  (void)_this;
}
void RegistrationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegistrationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegistrationResponse& RegistrationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegistrationResponse_Authorization_2eproto.base);
  return *internal_default_instance();
}


void RegistrationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.RegistrationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegistrationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MailTaxi.RegistrationResponse.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegistrationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.RegistrationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MailTaxi.RegistrationResponse.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.RegistrationResponse)
  return target;
}

size_t RegistrationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.RegistrationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegistrationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.RegistrationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegistrationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegistrationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.RegistrationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.RegistrationResponse)
    MergeFrom(*source);
  }
}

void RegistrationResponse::MergeFrom(const RegistrationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.RegistrationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void RegistrationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.RegistrationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegistrationResponse::CopyFrom(const RegistrationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.RegistrationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistrationResponse::IsInitialized() const {
  return true;
}

void RegistrationResponse::InternalSwap(RegistrationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegistrationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthorizationRequest::InitAsDefaultInstance() {
}
class AuthorizationRequest::_Internal {
 public:
};

AuthorizationRequest::AuthorizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.AuthorizationRequest)
}
AuthorizationRequest::AuthorizationRequest(const AuthorizationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_login().empty()) {
    login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_login(),
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_password(),
      GetArena());
  }
  usertype_ = from.usertype_;
  // @@protoc_insertion_point(copy_constructor:MailTaxi.AuthorizationRequest)
}

void AuthorizationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthorizationRequest_Authorization_2eproto.base);
  login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usertype_ = 0;
}

AuthorizationRequest::~AuthorizationRequest() {
  // @@protoc_insertion_point(destructor:MailTaxi.AuthorizationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthorizationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  login_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthorizationRequest::ArenaDtor(void* object) {
  AuthorizationRequest* _this = reinterpret_cast< AuthorizationRequest* >(object);
  (void)_this;
}
void AuthorizationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthorizationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthorizationRequest& AuthorizationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthorizationRequest_Authorization_2eproto.base);
  return *internal_default_instance();
}


void AuthorizationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.AuthorizationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  login_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  usertype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthorizationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_login();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MailTaxi.AuthorizationRequest.login"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MailTaxi.AuthorizationRequest.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MailTaxi.UserType userType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_usertype(static_cast<::MailTaxi::UserType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthorizationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.AuthorizationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string login = 1;
  if (this->login().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login().data(), static_cast<int>(this->_internal_login().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MailTaxi.AuthorizationRequest.login");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_login(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MailTaxi.AuthorizationRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // .MailTaxi.UserType userType = 3;
  if (this->usertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_usertype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.AuthorizationRequest)
  return target;
}

size_t AuthorizationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.AuthorizationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string login = 1;
  if (this->login().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_login());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // .MailTaxi.UserType userType = 3;
  if (this->usertype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_usertype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthorizationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.AuthorizationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthorizationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthorizationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.AuthorizationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.AuthorizationRequest)
    MergeFrom(*source);
  }
}

void AuthorizationRequest::MergeFrom(const AuthorizationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.AuthorizationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.login().size() > 0) {
    _internal_set_login(from._internal_login());
  }
  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
  if (from.usertype() != 0) {
    _internal_set_usertype(from._internal_usertype());
  }
}

void AuthorizationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.AuthorizationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthorizationRequest::CopyFrom(const AuthorizationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.AuthorizationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthorizationRequest::IsInitialized() const {
  return true;
}

void AuthorizationRequest::InternalSwap(AuthorizationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  login_.Swap(&other->login_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(usertype_, other->usertype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthorizationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthorizationResponse::InitAsDefaultInstance() {
}
class AuthorizationResponse::_Internal {
 public:
};

AuthorizationResponse::AuthorizationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.AuthorizationResponse)
}
AuthorizationResponse::AuthorizationResponse(const AuthorizationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:MailTaxi.AuthorizationResponse)
}

void AuthorizationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthorizationResponse_Authorization_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_ULONGLONG(0);
}

AuthorizationResponse::~AuthorizationResponse() {
  // @@protoc_insertion_point(destructor:MailTaxi.AuthorizationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthorizationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthorizationResponse::ArenaDtor(void* object) {
  AuthorizationResponse* _this = reinterpret_cast< AuthorizationResponse* >(object);
  (void)_this;
}
void AuthorizationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthorizationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthorizationResponse& AuthorizationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthorizationResponse_Authorization_2eproto.base);
  return *internal_default_instance();
}


void AuthorizationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.AuthorizationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthorizationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MailTaxi.AuthorizationResponse.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthorizationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.AuthorizationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MailTaxi.AuthorizationResponse.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.AuthorizationResponse)
  return target;
}

size_t AuthorizationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.AuthorizationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthorizationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.AuthorizationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthorizationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthorizationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.AuthorizationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.AuthorizationResponse)
    MergeFrom(*source);
  }
}

void AuthorizationResponse::MergeFrom(const AuthorizationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.AuthorizationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void AuthorizationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.AuthorizationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthorizationResponse::CopyFrom(const AuthorizationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.AuthorizationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthorizationResponse::IsInitialized() const {
  return true;
}

void AuthorizationResponse::InternalSwap(AuthorizationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthorizationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartDriverWorkRequest::InitAsDefaultInstance() {
  ::MailTaxi::_StartDriverWorkRequest_default_instance_._instance.get_mutable()->coordinate_ = const_cast< ::MailTaxi::Coordinate*>(
      ::MailTaxi::Coordinate::internal_default_instance());
}
class StartDriverWorkRequest::_Internal {
 public:
  static const ::MailTaxi::Coordinate& coordinate(const StartDriverWorkRequest* msg);
};

const ::MailTaxi::Coordinate&
StartDriverWorkRequest::_Internal::coordinate(const StartDriverWorkRequest* msg) {
  return *msg->coordinate_;
}
void StartDriverWorkRequest::clear_coordinate() {
  if (GetArena() == nullptr && coordinate_ != nullptr) {
    delete coordinate_;
  }
  coordinate_ = nullptr;
}
StartDriverWorkRequest::StartDriverWorkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.StartDriverWorkRequest)
}
StartDriverWorkRequest::StartDriverWorkRequest(const StartDriverWorkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  if (from._internal_has_coordinate()) {
    coordinate_ = new ::MailTaxi::Coordinate(*from.coordinate_);
  } else {
    coordinate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MailTaxi.StartDriverWorkRequest)
}

void StartDriverWorkRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartDriverWorkRequest_Authorization_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coordinate_ = nullptr;
}

StartDriverWorkRequest::~StartDriverWorkRequest() {
  // @@protoc_insertion_point(destructor:MailTaxi.StartDriverWorkRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartDriverWorkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coordinate_;
}

void StartDriverWorkRequest::ArenaDtor(void* object) {
  StartDriverWorkRequest* _this = reinterpret_cast< StartDriverWorkRequest* >(object);
  (void)_this;
}
void StartDriverWorkRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartDriverWorkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartDriverWorkRequest& StartDriverWorkRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartDriverWorkRequest_Authorization_2eproto.base);
  return *internal_default_instance();
}


void StartDriverWorkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.StartDriverWorkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && coordinate_ != nullptr) {
    delete coordinate_;
  }
  coordinate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartDriverWorkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MailTaxi.StartDriverWorkRequest.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MailTaxi.Coordinate coordinate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coordinate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartDriverWorkRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.StartDriverWorkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MailTaxi.StartDriverWorkRequest.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // .MailTaxi.Coordinate coordinate = 2;
  if (this->has_coordinate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::coordinate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.StartDriverWorkRequest)
  return target;
}

size_t StartDriverWorkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.StartDriverWorkRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // .MailTaxi.Coordinate coordinate = 2;
  if (this->has_coordinate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coordinate_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartDriverWorkRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.StartDriverWorkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartDriverWorkRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartDriverWorkRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.StartDriverWorkRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.StartDriverWorkRequest)
    MergeFrom(*source);
  }
}

void StartDriverWorkRequest::MergeFrom(const StartDriverWorkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.StartDriverWorkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.has_coordinate()) {
    _internal_mutable_coordinate()->::MailTaxi::Coordinate::MergeFrom(from._internal_coordinate());
  }
}

void StartDriverWorkRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.StartDriverWorkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartDriverWorkRequest::CopyFrom(const StartDriverWorkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.StartDriverWorkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartDriverWorkRequest::IsInitialized() const {
  return true;
}

void StartDriverWorkRequest::InternalSwap(StartDriverWorkRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(coordinate_, other->coordinate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartDriverWorkRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartDriverWorkResponse::InitAsDefaultInstance() {
}
class StartDriverWorkResponse::_Internal {
 public:
};

StartDriverWorkResponse::StartDriverWorkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.StartDriverWorkResponse)
}
StartDriverWorkResponse::StartDriverWorkResponse(const StartDriverWorkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:MailTaxi.StartDriverWorkResponse)
}

void StartDriverWorkResponse::SharedCtor() {
  success_ = false;
}

StartDriverWorkResponse::~StartDriverWorkResponse() {
  // @@protoc_insertion_point(destructor:MailTaxi.StartDriverWorkResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartDriverWorkResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StartDriverWorkResponse::ArenaDtor(void* object) {
  StartDriverWorkResponse* _this = reinterpret_cast< StartDriverWorkResponse* >(object);
  (void)_this;
}
void StartDriverWorkResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartDriverWorkResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartDriverWorkResponse& StartDriverWorkResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartDriverWorkResponse_Authorization_2eproto.base);
  return *internal_default_instance();
}


void StartDriverWorkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.StartDriverWorkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartDriverWorkResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartDriverWorkResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.StartDriverWorkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.StartDriverWorkResponse)
  return target;
}

size_t StartDriverWorkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.StartDriverWorkResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartDriverWorkResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.StartDriverWorkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StartDriverWorkResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartDriverWorkResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.StartDriverWorkResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.StartDriverWorkResponse)
    MergeFrom(*source);
  }
}

void StartDriverWorkResponse::MergeFrom(const StartDriverWorkResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.StartDriverWorkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void StartDriverWorkResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.StartDriverWorkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartDriverWorkResponse::CopyFrom(const StartDriverWorkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.StartDriverWorkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartDriverWorkResponse::IsInitialized() const {
  return true;
}

void StartDriverWorkResponse::InternalSwap(StartDriverWorkResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartDriverWorkResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EndDriverWorkRequest::InitAsDefaultInstance() {
}
class EndDriverWorkRequest::_Internal {
 public:
};

EndDriverWorkRequest::EndDriverWorkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.EndDriverWorkRequest)
}
EndDriverWorkRequest::EndDriverWorkRequest(const EndDriverWorkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:MailTaxi.EndDriverWorkRequest)
}

void EndDriverWorkRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EndDriverWorkRequest_Authorization_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EndDriverWorkRequest::~EndDriverWorkRequest() {
  // @@protoc_insertion_point(destructor:MailTaxi.EndDriverWorkRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EndDriverWorkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EndDriverWorkRequest::ArenaDtor(void* object) {
  EndDriverWorkRequest* _this = reinterpret_cast< EndDriverWorkRequest* >(object);
  (void)_this;
}
void EndDriverWorkRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EndDriverWorkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndDriverWorkRequest& EndDriverWorkRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EndDriverWorkRequest_Authorization_2eproto.base);
  return *internal_default_instance();
}


void EndDriverWorkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.EndDriverWorkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndDriverWorkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MailTaxi.EndDriverWorkRequest.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EndDriverWorkRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.EndDriverWorkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MailTaxi.EndDriverWorkRequest.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.EndDriverWorkRequest)
  return target;
}

size_t EndDriverWorkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.EndDriverWorkRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndDriverWorkRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.EndDriverWorkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EndDriverWorkRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EndDriverWorkRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.EndDriverWorkRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.EndDriverWorkRequest)
    MergeFrom(*source);
  }
}

void EndDriverWorkRequest::MergeFrom(const EndDriverWorkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.EndDriverWorkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
}

void EndDriverWorkRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.EndDriverWorkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndDriverWorkRequest::CopyFrom(const EndDriverWorkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.EndDriverWorkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndDriverWorkRequest::IsInitialized() const {
  return true;
}

void EndDriverWorkRequest::InternalSwap(EndDriverWorkRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata EndDriverWorkRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EndDriverWorkResponse::InitAsDefaultInstance() {
}
class EndDriverWorkResponse::_Internal {
 public:
};

EndDriverWorkResponse::EndDriverWorkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.EndDriverWorkResponse)
}
EndDriverWorkResponse::EndDriverWorkResponse(const EndDriverWorkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:MailTaxi.EndDriverWorkResponse)
}

void EndDriverWorkResponse::SharedCtor() {
  success_ = false;
}

EndDriverWorkResponse::~EndDriverWorkResponse() {
  // @@protoc_insertion_point(destructor:MailTaxi.EndDriverWorkResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EndDriverWorkResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EndDriverWorkResponse::ArenaDtor(void* object) {
  EndDriverWorkResponse* _this = reinterpret_cast< EndDriverWorkResponse* >(object);
  (void)_this;
}
void EndDriverWorkResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EndDriverWorkResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndDriverWorkResponse& EndDriverWorkResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EndDriverWorkResponse_Authorization_2eproto.base);
  return *internal_default_instance();
}


void EndDriverWorkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.EndDriverWorkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndDriverWorkResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EndDriverWorkResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.EndDriverWorkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.EndDriverWorkResponse)
  return target;
}

size_t EndDriverWorkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.EndDriverWorkResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndDriverWorkResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.EndDriverWorkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EndDriverWorkResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EndDriverWorkResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.EndDriverWorkResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.EndDriverWorkResponse)
    MergeFrom(*source);
  }
}

void EndDriverWorkResponse::MergeFrom(const EndDriverWorkResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.EndDriverWorkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void EndDriverWorkResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.EndDriverWorkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndDriverWorkResponse::CopyFrom(const EndDriverWorkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.EndDriverWorkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndDriverWorkResponse::IsInitialized() const {
  return true;
}

void EndDriverWorkResponse::InternalSwap(EndDriverWorkResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EndDriverWorkResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MakeOrderRequest::InitAsDefaultInstance() {
  ::MailTaxi::_MakeOrderRequest_default_instance_._instance.get_mutable()->locationdata_ = const_cast< ::MailTaxi::OrderLocationData*>(
      ::MailTaxi::OrderLocationData::internal_default_instance());
}
class MakeOrderRequest::_Internal {
 public:
  static const ::MailTaxi::OrderLocationData& locationdata(const MakeOrderRequest* msg);
};

const ::MailTaxi::OrderLocationData&
MakeOrderRequest::_Internal::locationdata(const MakeOrderRequest* msg) {
  return *msg->locationdata_;
}
void MakeOrderRequest::clear_locationdata() {
  if (GetArena() == nullptr && locationdata_ != nullptr) {
    delete locationdata_;
  }
  locationdata_ = nullptr;
}
MakeOrderRequest::MakeOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.MakeOrderRequest)
}
MakeOrderRequest::MakeOrderRequest(const MakeOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  if (from._internal_has_locationdata()) {
    locationdata_ = new ::MailTaxi::OrderLocationData(*from.locationdata_);
  } else {
    locationdata_ = nullptr;
  }
  ::memcpy(&animal_, &from.animal_,
    static_cast<size_t>(reinterpret_cast<char*>(&driverfound_) -
    reinterpret_cast<char*>(&animal_)) + sizeof(driverfound_));
  // @@protoc_insertion_point(copy_constructor:MailTaxi.MakeOrderRequest)
}

void MakeOrderRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MakeOrderRequest_Authorization_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&locationdata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&driverfound_) -
      reinterpret_cast<char*>(&locationdata_)) + sizeof(driverfound_));
}

MakeOrderRequest::~MakeOrderRequest() {
  // @@protoc_insertion_point(destructor:MailTaxi.MakeOrderRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MakeOrderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete locationdata_;
}

void MakeOrderRequest::ArenaDtor(void* object) {
  MakeOrderRequest* _this = reinterpret_cast< MakeOrderRequest* >(object);
  (void)_this;
}
void MakeOrderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MakeOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MakeOrderRequest& MakeOrderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MakeOrderRequest_Authorization_2eproto.base);
  return *internal_default_instance();
}


void MakeOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.MakeOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && locationdata_ != nullptr) {
    delete locationdata_;
  }
  locationdata_ = nullptr;
  ::memset(&animal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&driverfound_) -
      reinterpret_cast<char*>(&animal_)) + sizeof(driverfound_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MakeOrderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MailTaxi.MakeOrderRequest.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MailTaxi.OrderLocationData locationData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_locationdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool animal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          animal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool children = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          children_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool driverFound = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          driverfound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MakeOrderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.MakeOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MailTaxi.MakeOrderRequest.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // .MailTaxi.OrderLocationData locationData = 2;
  if (this->has_locationdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::locationdata(this), target, stream);
  }

  // bool animal = 3;
  if (this->animal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_animal(), target);
  }

  // bool children = 4;
  if (this->children() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_children(), target);
  }

  // bool driverFound = 5;
  if (this->driverfound() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_driverfound(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.MakeOrderRequest)
  return target;
}

size_t MakeOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.MakeOrderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // .MailTaxi.OrderLocationData locationData = 2;
  if (this->has_locationdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *locationdata_);
  }

  // bool animal = 3;
  if (this->animal() != 0) {
    total_size += 1 + 1;
  }

  // bool children = 4;
  if (this->children() != 0) {
    total_size += 1 + 1;
  }

  // bool driverFound = 5;
  if (this->driverfound() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MakeOrderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.MakeOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MakeOrderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MakeOrderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.MakeOrderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.MakeOrderRequest)
    MergeFrom(*source);
  }
}

void MakeOrderRequest::MergeFrom(const MakeOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.MakeOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.has_locationdata()) {
    _internal_mutable_locationdata()->::MailTaxi::OrderLocationData::MergeFrom(from._internal_locationdata());
  }
  if (from.animal() != 0) {
    _internal_set_animal(from._internal_animal());
  }
  if (from.children() != 0) {
    _internal_set_children(from._internal_children());
  }
  if (from.driverfound() != 0) {
    _internal_set_driverfound(from._internal_driverfound());
  }
}

void MakeOrderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.MakeOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakeOrderRequest::CopyFrom(const MakeOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.MakeOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeOrderRequest::IsInitialized() const {
  return true;
}

void MakeOrderRequest::InternalSwap(MakeOrderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MakeOrderRequest, driverfound_)
      + sizeof(MakeOrderRequest::driverfound_)
      - PROTOBUF_FIELD_OFFSET(MakeOrderRequest, locationdata_)>(
          reinterpret_cast<char*>(&locationdata_),
          reinterpret_cast<char*>(&other->locationdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MakeOrderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MakeOrderResponse::InitAsDefaultInstance() {
  ::MailTaxi::_MakeOrderResponse_default_instance_._instance.get_mutable()->coordinate_ = const_cast< ::MailTaxi::Coordinate*>(
      ::MailTaxi::Coordinate::internal_default_instance());
}
class MakeOrderResponse::_Internal {
 public:
  static const ::MailTaxi::Coordinate& coordinate(const MakeOrderResponse* msg);
};

const ::MailTaxi::Coordinate&
MakeOrderResponse::_Internal::coordinate(const MakeOrderResponse* msg) {
  return *msg->coordinate_;
}
void MakeOrderResponse::clear_coordinate() {
  if (GetArena() == nullptr && coordinate_ != nullptr) {
    delete coordinate_;
  }
  coordinate_ = nullptr;
}
MakeOrderResponse::MakeOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.MakeOrderResponse)
}
MakeOrderResponse::MakeOrderResponse(const MakeOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_coordinate()) {
    coordinate_ = new ::MailTaxi::Coordinate(*from.coordinate_);
  } else {
    coordinate_ = nullptr;
  }
  price_ = from.price_;
  // @@protoc_insertion_point(copy_constructor:MailTaxi.MakeOrderResponse)
}

void MakeOrderResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MakeOrderResponse_Authorization_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&coordinate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&coordinate_)) + sizeof(price_));
}

MakeOrderResponse::~MakeOrderResponse() {
  // @@protoc_insertion_point(destructor:MailTaxi.MakeOrderResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MakeOrderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coordinate_;
}

void MakeOrderResponse::ArenaDtor(void* object) {
  MakeOrderResponse* _this = reinterpret_cast< MakeOrderResponse* >(object);
  (void)_this;
}
void MakeOrderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MakeOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MakeOrderResponse& MakeOrderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MakeOrderResponse_Authorization_2eproto.base);
  return *internal_default_instance();
}


void MakeOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.MakeOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && coordinate_ != nullptr) {
    delete coordinate_;
  }
  coordinate_ = nullptr;
  price_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MakeOrderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MailTaxi.Coordinate coordinate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coordinate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MailTaxi.MakeOrderResponse.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MailTaxi.MakeOrderResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MakeOrderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.MakeOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MailTaxi.Coordinate coordinate = 1;
  if (this->has_coordinate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::coordinate(this), target, stream);
  }

  // double price = 2;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_price(), target);
  }

  // string token = 3;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MailTaxi.MakeOrderResponse.token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_token(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MailTaxi.MakeOrderResponse.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.MakeOrderResponse)
  return target;
}

size_t MakeOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.MakeOrderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 3;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .MailTaxi.Coordinate coordinate = 1;
  if (this->has_coordinate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coordinate_);
  }

  // double price = 2;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MakeOrderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.MakeOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MakeOrderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MakeOrderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.MakeOrderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.MakeOrderResponse)
    MergeFrom(*source);
  }
}

void MakeOrderResponse::MergeFrom(const MakeOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.MakeOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_coordinate()) {
    _internal_mutable_coordinate()->::MailTaxi::Coordinate::MergeFrom(from._internal_coordinate());
  }
  if (!(from.price() <= 0 && from.price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
}

void MakeOrderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.MakeOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakeOrderResponse::CopyFrom(const MakeOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.MakeOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeOrderResponse::IsInitialized() const {
  return true;
}

void MakeOrderResponse::InternalSwap(MakeOrderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MakeOrderResponse, price_)
      + sizeof(MakeOrderResponse::price_)
      - PROTOBUF_FIELD_OFFSET(MakeOrderResponse, coordinate_)>(
          reinterpret_cast<char*>(&coordinate_),
          reinterpret_cast<char*>(&other->coordinate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MakeOrderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace MailTaxi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MailTaxi::RegistrationRequest* Arena::CreateMaybeMessage< ::MailTaxi::RegistrationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::RegistrationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MailTaxi::RegistrationResponse* Arena::CreateMaybeMessage< ::MailTaxi::RegistrationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::RegistrationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::MailTaxi::AuthorizationRequest* Arena::CreateMaybeMessage< ::MailTaxi::AuthorizationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::AuthorizationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MailTaxi::AuthorizationResponse* Arena::CreateMaybeMessage< ::MailTaxi::AuthorizationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::AuthorizationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::MailTaxi::StartDriverWorkRequest* Arena::CreateMaybeMessage< ::MailTaxi::StartDriverWorkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::StartDriverWorkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MailTaxi::StartDriverWorkResponse* Arena::CreateMaybeMessage< ::MailTaxi::StartDriverWorkResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::StartDriverWorkResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::MailTaxi::EndDriverWorkRequest* Arena::CreateMaybeMessage< ::MailTaxi::EndDriverWorkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::EndDriverWorkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MailTaxi::EndDriverWorkResponse* Arena::CreateMaybeMessage< ::MailTaxi::EndDriverWorkResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::EndDriverWorkResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::MailTaxi::MakeOrderRequest* Arena::CreateMaybeMessage< ::MailTaxi::MakeOrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::MakeOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MailTaxi::MakeOrderResponse* Arena::CreateMaybeMessage< ::MailTaxi::MakeOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::MakeOrderResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
