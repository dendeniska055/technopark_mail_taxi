// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Authorization.proto

#include "Authorization.pb.h"
#include "Authorization.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace MailTaxi {

static const char* Authorization_method_names[] = {
  "/MailTaxi.Authorization/Registration",
  "/MailTaxi.Authorization/Authorization",
  "/MailTaxi.Authorization/StartDriverWork",
  "/MailTaxi.Authorization/EndDriverWork",
  "/MailTaxi.Authorization/MakeOrder",
};

std::unique_ptr< Authorization::Stub> Authorization::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Authorization::Stub> stub(new Authorization::Stub(channel));
  return stub;
}

Authorization::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Registration_(Authorization_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Authorization_(Authorization_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartDriverWork_(Authorization_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EndDriverWork_(Authorization_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MakeOrder_(Authorization_method_names[4], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status Authorization::Stub::Registration(::grpc::ClientContext* context, const ::MailTaxi::RegistrationRequest& request, ::MailTaxi::RegistrationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Registration_, context, request, response);
}

void Authorization::Stub::experimental_async::Registration(::grpc::ClientContext* context, const ::MailTaxi::RegistrationRequest* request, ::MailTaxi::RegistrationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Registration_, context, request, response, std::move(f));
}

void Authorization::Stub::experimental_async::Registration(::grpc::ClientContext* context, const ::MailTaxi::RegistrationRequest* request, ::MailTaxi::RegistrationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Registration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MailTaxi::RegistrationResponse>* Authorization::Stub::PrepareAsyncRegistrationRaw(::grpc::ClientContext* context, const ::MailTaxi::RegistrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MailTaxi::RegistrationResponse>::Create(channel_.get(), cq, rpcmethod_Registration_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::MailTaxi::RegistrationResponse>* Authorization::Stub::AsyncRegistrationRaw(::grpc::ClientContext* context, const ::MailTaxi::RegistrationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegistrationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Authorization::Stub::Authorization(::grpc::ClientContext* context, const ::MailTaxi::AuthorizationRequest& request, ::MailTaxi::AuthorizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Authorization_, context, request, response);
}

void Authorization::Stub::experimental_async::Authorization(::grpc::ClientContext* context, const ::MailTaxi::AuthorizationRequest* request, ::MailTaxi::AuthorizationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Authorization_, context, request, response, std::move(f));
}

void Authorization::Stub::experimental_async::Authorization(::grpc::ClientContext* context, const ::MailTaxi::AuthorizationRequest* request, ::MailTaxi::AuthorizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Authorization_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MailTaxi::AuthorizationResponse>* Authorization::Stub::PrepareAsyncAuthorizationRaw(::grpc::ClientContext* context, const ::MailTaxi::AuthorizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MailTaxi::AuthorizationResponse>::Create(channel_.get(), cq, rpcmethod_Authorization_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::MailTaxi::AuthorizationResponse>* Authorization::Stub::AsyncAuthorizationRaw(::grpc::ClientContext* context, const ::MailTaxi::AuthorizationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAuthorizationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Authorization::Stub::StartDriverWork(::grpc::ClientContext* context, const ::MailTaxi::StartDriverWorkRequest& request, ::MailTaxi::StartDriverWorkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StartDriverWork_, context, request, response);
}

void Authorization::Stub::experimental_async::StartDriverWork(::grpc::ClientContext* context, const ::MailTaxi::StartDriverWorkRequest* request, ::MailTaxi::StartDriverWorkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartDriverWork_, context, request, response, std::move(f));
}

void Authorization::Stub::experimental_async::StartDriverWork(::grpc::ClientContext* context, const ::MailTaxi::StartDriverWorkRequest* request, ::MailTaxi::StartDriverWorkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartDriverWork_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MailTaxi::StartDriverWorkResponse>* Authorization::Stub::PrepareAsyncStartDriverWorkRaw(::grpc::ClientContext* context, const ::MailTaxi::StartDriverWorkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MailTaxi::StartDriverWorkResponse>::Create(channel_.get(), cq, rpcmethod_StartDriverWork_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::MailTaxi::StartDriverWorkResponse>* Authorization::Stub::AsyncStartDriverWorkRaw(::grpc::ClientContext* context, const ::MailTaxi::StartDriverWorkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartDriverWorkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Authorization::Stub::EndDriverWork(::grpc::ClientContext* context, const ::MailTaxi::EndDriverWorkRequest& request, ::MailTaxi::EndDriverWorkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_EndDriverWork_, context, request, response);
}

void Authorization::Stub::experimental_async::EndDriverWork(::grpc::ClientContext* context, const ::MailTaxi::EndDriverWorkRequest* request, ::MailTaxi::EndDriverWorkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EndDriverWork_, context, request, response, std::move(f));
}

void Authorization::Stub::experimental_async::EndDriverWork(::grpc::ClientContext* context, const ::MailTaxi::EndDriverWorkRequest* request, ::MailTaxi::EndDriverWorkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EndDriverWork_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MailTaxi::EndDriverWorkResponse>* Authorization::Stub::PrepareAsyncEndDriverWorkRaw(::grpc::ClientContext* context, const ::MailTaxi::EndDriverWorkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MailTaxi::EndDriverWorkResponse>::Create(channel_.get(), cq, rpcmethod_EndDriverWork_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::MailTaxi::EndDriverWorkResponse>* Authorization::Stub::AsyncEndDriverWorkRaw(::grpc::ClientContext* context, const ::MailTaxi::EndDriverWorkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEndDriverWorkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::MailTaxi::MakeOrderResponse>* Authorization::Stub::MakeOrderRaw(::grpc::ClientContext* context, const ::MailTaxi::MakeOrderRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::MailTaxi::MakeOrderResponse>::Create(channel_.get(), rpcmethod_MakeOrder_, context, request);
}

void Authorization::Stub::experimental_async::MakeOrder(::grpc::ClientContext* context, ::MailTaxi::MakeOrderRequest* request, ::grpc::experimental::ClientReadReactor< ::MailTaxi::MakeOrderResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::MailTaxi::MakeOrderResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_MakeOrder_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::MailTaxi::MakeOrderResponse>* Authorization::Stub::AsyncMakeOrderRaw(::grpc::ClientContext* context, const ::MailTaxi::MakeOrderRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::MailTaxi::MakeOrderResponse>::Create(channel_.get(), cq, rpcmethod_MakeOrder_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::MailTaxi::MakeOrderResponse>* Authorization::Stub::PrepareAsyncMakeOrderRaw(::grpc::ClientContext* context, const ::MailTaxi::MakeOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::MailTaxi::MakeOrderResponse>::Create(channel_.get(), cq, rpcmethod_MakeOrder_, context, request, false, nullptr);
}

Authorization::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Authorization_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Authorization::Service, ::MailTaxi::RegistrationRequest, ::MailTaxi::RegistrationResponse>(
          [](Authorization::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MailTaxi::RegistrationRequest* req,
             ::MailTaxi::RegistrationResponse* resp) {
               return service->Registration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Authorization_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Authorization::Service, ::MailTaxi::AuthorizationRequest, ::MailTaxi::AuthorizationResponse>(
          [](Authorization::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MailTaxi::AuthorizationRequest* req,
             ::MailTaxi::AuthorizationResponse* resp) {
               return service->Authorization(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Authorization_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Authorization::Service, ::MailTaxi::StartDriverWorkRequest, ::MailTaxi::StartDriverWorkResponse>(
          [](Authorization::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MailTaxi::StartDriverWorkRequest* req,
             ::MailTaxi::StartDriverWorkResponse* resp) {
               return service->StartDriverWork(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Authorization_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Authorization::Service, ::MailTaxi::EndDriverWorkRequest, ::MailTaxi::EndDriverWorkResponse>(
          [](Authorization::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MailTaxi::EndDriverWorkRequest* req,
             ::MailTaxi::EndDriverWorkResponse* resp) {
               return service->EndDriverWork(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Authorization_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Authorization::Service, ::MailTaxi::MakeOrderRequest, ::MailTaxi::MakeOrderResponse>(
          [](Authorization::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MailTaxi::MakeOrderRequest* req,
             ::grpc::ServerWriter<::MailTaxi::MakeOrderResponse>* writer) {
               return service->MakeOrder(ctx, req, writer);
             }, this)));
}

Authorization::Service::~Service() {
}

::grpc::Status Authorization::Service::Registration(::grpc::ServerContext* context, const ::MailTaxi::RegistrationRequest* request, ::MailTaxi::RegistrationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Authorization::Service::Authorization(::grpc::ServerContext* context, const ::MailTaxi::AuthorizationRequest* request, ::MailTaxi::AuthorizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Authorization::Service::StartDriverWork(::grpc::ServerContext* context, const ::MailTaxi::StartDriverWorkRequest* request, ::MailTaxi::StartDriverWorkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Authorization::Service::EndDriverWork(::grpc::ServerContext* context, const ::MailTaxi::EndDriverWorkRequest* request, ::MailTaxi::EndDriverWorkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Authorization::Service::MakeOrder(::grpc::ServerContext* context, const ::MailTaxi::MakeOrderRequest* request, ::grpc::ServerWriter< ::MailTaxi::MakeOrderResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace MailTaxi

