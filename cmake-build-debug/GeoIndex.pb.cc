// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GeoIndex.proto

#include "GeoIndex.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_GeoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coordinate_GeoData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TaxiFacilities_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Driver_TaxiFacilities_2eproto;
namespace MailTaxi {
class RegisterDriverRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterDriverRequest> _instance;
} _RegisterDriverRequest_default_instance_;
class RegisterDriverResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterDriverResponse> _instance;
} _RegisterDriverResponse_default_instance_;
class SelectDriversRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelectDriversRequest> _instance;
} _SelectDriversRequest_default_instance_;
class SelectDriversResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelectDriversResponse> _instance;
} _SelectDriversResponse_default_instance_;
class MoveDriverRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveDriverRequest> _instance;
} _MoveDriverRequest_default_instance_;
class MoveDriverResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveDriverResponse> _instance;
} _MoveDriverResponse_default_instance_;
class RemoveDriverRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveDriverRequest> _instance;
} _RemoveDriverRequest_default_instance_;
class RemoveDriverResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveDriverResponse> _instance;
} _RemoveDriverResponse_default_instance_;
}  // namespace MailTaxi
static void InitDefaultsscc_info_MoveDriverRequest_GeoIndex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_MoveDriverRequest_default_instance_;
    new (ptr) ::MailTaxi::MoveDriverRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::MoveDriverRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoveDriverRequest_GeoIndex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MoveDriverRequest_GeoIndex_2eproto}, {
      &scc_info_Coordinate_GeoData_2eproto.base,}};

static void InitDefaultsscc_info_MoveDriverResponse_GeoIndex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_MoveDriverResponse_default_instance_;
    new (ptr) ::MailTaxi::MoveDriverResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::MoveDriverResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveDriverResponse_GeoIndex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoveDriverResponse_GeoIndex_2eproto}, {}};

static void InitDefaultsscc_info_RegisterDriverRequest_GeoIndex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_RegisterDriverRequest_default_instance_;
    new (ptr) ::MailTaxi::RegisterDriverRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::RegisterDriverRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RegisterDriverRequest_GeoIndex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RegisterDriverRequest_GeoIndex_2eproto}, {
      &scc_info_Coordinate_GeoData_2eproto.base,
      &scc_info_Driver_TaxiFacilities_2eproto.base,}};

static void InitDefaultsscc_info_RegisterDriverResponse_GeoIndex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_RegisterDriverResponse_default_instance_;
    new (ptr) ::MailTaxi::RegisterDriverResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::RegisterDriverResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterDriverResponse_GeoIndex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterDriverResponse_GeoIndex_2eproto}, {}};

static void InitDefaultsscc_info_RemoveDriverRequest_GeoIndex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_RemoveDriverRequest_default_instance_;
    new (ptr) ::MailTaxi::RemoveDriverRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::RemoveDriverRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveDriverRequest_GeoIndex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveDriverRequest_GeoIndex_2eproto}, {}};

static void InitDefaultsscc_info_RemoveDriverResponse_GeoIndex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_RemoveDriverResponse_default_instance_;
    new (ptr) ::MailTaxi::RemoveDriverResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::RemoveDriverResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveDriverResponse_GeoIndex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveDriverResponse_GeoIndex_2eproto}, {}};

static void InitDefaultsscc_info_SelectDriversRequest_GeoIndex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_SelectDriversRequest_default_instance_;
    new (ptr) ::MailTaxi::SelectDriversRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::SelectDriversRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SelectDriversRequest_GeoIndex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SelectDriversRequest_GeoIndex_2eproto}, {
      &scc_info_Coordinate_GeoData_2eproto.base,}};

static void InitDefaultsscc_info_SelectDriversResponse_GeoIndex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_SelectDriversResponse_default_instance_;
    new (ptr) ::MailTaxi::SelectDriversResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::SelectDriversResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SelectDriversResponse_GeoIndex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SelectDriversResponse_GeoIndex_2eproto}, {
      &scc_info_Driver_TaxiFacilities_2eproto.base,
      &scc_info_Coordinate_GeoData_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_GeoIndex_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_GeoIndex_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_GeoIndex_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_GeoIndex_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::RegisterDriverRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::RegisterDriverRequest, coordinate_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::RegisterDriverRequest, driver_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::RegisterDriverRequest, driverid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::RegisterDriverResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::RegisterDriverResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::SelectDriversRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::SelectDriversRequest, coordinate_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::SelectDriversRequest, animals_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::SelectDriversRequest, children_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::SelectDriversRequest, lvliter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::SelectDriversResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::SelectDriversResponse, driverid_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::SelectDriversResponse, drivers_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::SelectDriversResponse, drivercoordinates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::MoveDriverRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::MoveDriverRequest, driverid_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::MoveDriverRequest, coordinate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::MoveDriverResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::MoveDriverResponse, driverfound_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::RemoveDriverRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::RemoveDriverRequest, driverid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::RemoveDriverResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::RemoveDriverResponse, driverfound_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MailTaxi::RegisterDriverRequest)},
  { 8, -1, sizeof(::MailTaxi::RegisterDriverResponse)},
  { 14, -1, sizeof(::MailTaxi::SelectDriversRequest)},
  { 23, -1, sizeof(::MailTaxi::SelectDriversResponse)},
  { 31, -1, sizeof(::MailTaxi::MoveDriverRequest)},
  { 38, -1, sizeof(::MailTaxi::MoveDriverResponse)},
  { 44, -1, sizeof(::MailTaxi::RemoveDriverRequest)},
  { 50, -1, sizeof(::MailTaxi::RemoveDriverResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_RegisterDriverRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_RegisterDriverResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_SelectDriversRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_SelectDriversResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_MoveDriverRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_MoveDriverResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_RemoveDriverRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_RemoveDriverResponse_default_instance_),
};

const char descriptor_table_protodef_GeoIndex_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016GeoIndex.proto\022\010MailTaxi\032\024TaxiFaciliti"
  "es.proto\032\rGeoData.proto\"u\n\025RegisterDrive"
  "rRequest\022(\n\ncoordinate\030\001 \001(\0132\024.MailTaxi."
  "Coordinate\022 \n\006driver\030\002 \001(\0132\020.MailTaxi.Dr"
  "iver\022\020\n\010driverId\030\003 \001(\004\")\n\026RegisterDriver"
  "Response\022\017\n\007success\030\001 \001(\010\"t\n\024SelectDrive"
  "rsRequest\022(\n\ncoordinate\030\001 \001(\0132\024.MailTaxi"
  ".Coordinate\022\017\n\007animals\030\002 \001(\010\022\020\n\010children"
  "\030\003 \001(\010\022\017\n\007lvlIter\030\004 \001(\004\"}\n\025SelectDrivers"
  "Response\022\020\n\010driverId\030\001 \003(\004\022!\n\007drivers\030\002 "
  "\003(\0132\020.MailTaxi.Driver\022/\n\021driverCoordinat"
  "es\030\003 \003(\0132\024.MailTaxi.Coordinate\"O\n\021MoveDr"
  "iverRequest\022\020\n\010driverId\030\001 \001(\004\022(\n\ncoordin"
  "ate\030\002 \001(\0132\024.MailTaxi.Coordinate\")\n\022MoveD"
  "riverResponse\022\023\n\013driverFound\030\001 \001(\010\"\'\n\023Re"
  "moveDriverRequest\022\020\n\010driverId\030\001 \001(\004\"+\n\024R"
  "emoveDriverResponse\022\023\n\013driverFound\030\001 \001(\010"
  "2\321\002\n\010GeoIndex\022U\n\016RegisterDriver\022\037.MailTa"
  "xi.RegisterDriverRequest\032 .MailTaxi.Regi"
  "sterDriverResponse\"\000\022R\n\rSelectDrivers\022\036."
  "MailTaxi.SelectDriversRequest\032\037.MailTaxi"
  ".SelectDriversResponse\"\000\022I\n\nMoveDriver\022\033"
  ".MailTaxi.MoveDriverRequest\032\034.MailTaxi.M"
  "oveDriverResponse\"\000\022O\n\014RemoveDriver\022\035.Ma"
  "ilTaxi.RemoveDriverRequest\032\036.MailTaxi.Re"
  "moveDriverResponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_GeoIndex_2eproto_deps[2] = {
  &::descriptor_table_GeoData_2eproto,
  &::descriptor_table_TaxiFacilities_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_GeoIndex_2eproto_sccs[8] = {
  &scc_info_MoveDriverRequest_GeoIndex_2eproto.base,
  &scc_info_MoveDriverResponse_GeoIndex_2eproto.base,
  &scc_info_RegisterDriverRequest_GeoIndex_2eproto.base,
  &scc_info_RegisterDriverResponse_GeoIndex_2eproto.base,
  &scc_info_RemoveDriverRequest_GeoIndex_2eproto.base,
  &scc_info_RemoveDriverResponse_GeoIndex_2eproto.base,
  &scc_info_SelectDriversRequest_GeoIndex_2eproto.base,
  &scc_info_SelectDriversResponse_GeoIndex_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_GeoIndex_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GeoIndex_2eproto = {
  false, false, descriptor_table_protodef_GeoIndex_2eproto, "GeoIndex.proto", 1028,
  &descriptor_table_GeoIndex_2eproto_once, descriptor_table_GeoIndex_2eproto_sccs, descriptor_table_GeoIndex_2eproto_deps, 8, 2,
  schemas, file_default_instances, TableStruct_GeoIndex_2eproto::offsets,
  file_level_metadata_GeoIndex_2eproto, 8, file_level_enum_descriptors_GeoIndex_2eproto, file_level_service_descriptors_GeoIndex_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_GeoIndex_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_GeoIndex_2eproto)), true);
namespace MailTaxi {

// ===================================================================

void RegisterDriverRequest::InitAsDefaultInstance() {
  ::MailTaxi::_RegisterDriverRequest_default_instance_._instance.get_mutable()->coordinate_ = const_cast< ::MailTaxi::Coordinate*>(
      ::MailTaxi::Coordinate::internal_default_instance());
  ::MailTaxi::_RegisterDriverRequest_default_instance_._instance.get_mutable()->driver_ = const_cast< ::MailTaxi::Driver*>(
      ::MailTaxi::Driver::internal_default_instance());
}
class RegisterDriverRequest::_Internal {
 public:
  static const ::MailTaxi::Coordinate& coordinate(const RegisterDriverRequest* msg);
  static const ::MailTaxi::Driver& driver(const RegisterDriverRequest* msg);
};

const ::MailTaxi::Coordinate&
RegisterDriverRequest::_Internal::coordinate(const RegisterDriverRequest* msg) {
  return *msg->coordinate_;
}
const ::MailTaxi::Driver&
RegisterDriverRequest::_Internal::driver(const RegisterDriverRequest* msg) {
  return *msg->driver_;
}
void RegisterDriverRequest::clear_coordinate() {
  if (GetArena() == nullptr && coordinate_ != nullptr) {
    delete coordinate_;
  }
  coordinate_ = nullptr;
}
void RegisterDriverRequest::clear_driver() {
  if (GetArena() == nullptr && driver_ != nullptr) {
    delete driver_;
  }
  driver_ = nullptr;
}
RegisterDriverRequest::RegisterDriverRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.RegisterDriverRequest)
}
RegisterDriverRequest::RegisterDriverRequest(const RegisterDriverRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_coordinate()) {
    coordinate_ = new ::MailTaxi::Coordinate(*from.coordinate_);
  } else {
    coordinate_ = nullptr;
  }
  if (from._internal_has_driver()) {
    driver_ = new ::MailTaxi::Driver(*from.driver_);
  } else {
    driver_ = nullptr;
  }
  driverid_ = from.driverid_;
  // @@protoc_insertion_point(copy_constructor:MailTaxi.RegisterDriverRequest)
}

void RegisterDriverRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterDriverRequest_GeoIndex_2eproto.base);
  ::memset(&coordinate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&driverid_) -
      reinterpret_cast<char*>(&coordinate_)) + sizeof(driverid_));
}

RegisterDriverRequest::~RegisterDriverRequest() {
  // @@protoc_insertion_point(destructor:MailTaxi.RegisterDriverRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegisterDriverRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete coordinate_;
  if (this != internal_default_instance()) delete driver_;
}

void RegisterDriverRequest::ArenaDtor(void* object) {
  RegisterDriverRequest* _this = reinterpret_cast< RegisterDriverRequest* >(object);
  (void)_this;
}
void RegisterDriverRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterDriverRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterDriverRequest& RegisterDriverRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterDriverRequest_GeoIndex_2eproto.base);
  return *internal_default_instance();
}


void RegisterDriverRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.RegisterDriverRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && coordinate_ != nullptr) {
    delete coordinate_;
  }
  coordinate_ = nullptr;
  if (GetArena() == nullptr && driver_ != nullptr) {
    delete driver_;
  }
  driver_ = nullptr;
  driverid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterDriverRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MailTaxi.Coordinate coordinate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coordinate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MailTaxi.Driver driver = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_driver(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 driverId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          driverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterDriverRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.RegisterDriverRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MailTaxi.Coordinate coordinate = 1;
  if (this->has_coordinate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::coordinate(this), target, stream);
  }

  // .MailTaxi.Driver driver = 2;
  if (this->has_driver()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::driver(this), target, stream);
  }

  // uint64 driverId = 3;
  if (this->driverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_driverid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.RegisterDriverRequest)
  return target;
}

size_t RegisterDriverRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.RegisterDriverRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MailTaxi.Coordinate coordinate = 1;
  if (this->has_coordinate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coordinate_);
  }

  // .MailTaxi.Driver driver = 2;
  if (this->has_driver()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *driver_);
  }

  // uint64 driverId = 3;
  if (this->driverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_driverid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterDriverRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.RegisterDriverRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterDriverRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterDriverRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.RegisterDriverRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.RegisterDriverRequest)
    MergeFrom(*source);
  }
}

void RegisterDriverRequest::MergeFrom(const RegisterDriverRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.RegisterDriverRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_coordinate()) {
    _internal_mutable_coordinate()->::MailTaxi::Coordinate::MergeFrom(from._internal_coordinate());
  }
  if (from.has_driver()) {
    _internal_mutable_driver()->::MailTaxi::Driver::MergeFrom(from._internal_driver());
  }
  if (from.driverid() != 0) {
    _internal_set_driverid(from._internal_driverid());
  }
}

void RegisterDriverRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.RegisterDriverRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterDriverRequest::CopyFrom(const RegisterDriverRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.RegisterDriverRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterDriverRequest::IsInitialized() const {
  return true;
}

void RegisterDriverRequest::InternalSwap(RegisterDriverRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterDriverRequest, driverid_)
      + sizeof(RegisterDriverRequest::driverid_)
      - PROTOBUF_FIELD_OFFSET(RegisterDriverRequest, coordinate_)>(
          reinterpret_cast<char*>(&coordinate_),
          reinterpret_cast<char*>(&other->coordinate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterDriverRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterDriverResponse::InitAsDefaultInstance() {
}
class RegisterDriverResponse::_Internal {
 public:
};

RegisterDriverResponse::RegisterDriverResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.RegisterDriverResponse)
}
RegisterDriverResponse::RegisterDriverResponse(const RegisterDriverResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:MailTaxi.RegisterDriverResponse)
}

void RegisterDriverResponse::SharedCtor() {
  success_ = false;
}

RegisterDriverResponse::~RegisterDriverResponse() {
  // @@protoc_insertion_point(destructor:MailTaxi.RegisterDriverResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegisterDriverResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RegisterDriverResponse::ArenaDtor(void* object) {
  RegisterDriverResponse* _this = reinterpret_cast< RegisterDriverResponse* >(object);
  (void)_this;
}
void RegisterDriverResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterDriverResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterDriverResponse& RegisterDriverResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterDriverResponse_GeoIndex_2eproto.base);
  return *internal_default_instance();
}


void RegisterDriverResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.RegisterDriverResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterDriverResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterDriverResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.RegisterDriverResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.RegisterDriverResponse)
  return target;
}

size_t RegisterDriverResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.RegisterDriverResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterDriverResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.RegisterDriverResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterDriverResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterDriverResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.RegisterDriverResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.RegisterDriverResponse)
    MergeFrom(*source);
  }
}

void RegisterDriverResponse::MergeFrom(const RegisterDriverResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.RegisterDriverResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void RegisterDriverResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.RegisterDriverResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterDriverResponse::CopyFrom(const RegisterDriverResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.RegisterDriverResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterDriverResponse::IsInitialized() const {
  return true;
}

void RegisterDriverResponse::InternalSwap(RegisterDriverResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterDriverResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SelectDriversRequest::InitAsDefaultInstance() {
  ::MailTaxi::_SelectDriversRequest_default_instance_._instance.get_mutable()->coordinate_ = const_cast< ::MailTaxi::Coordinate*>(
      ::MailTaxi::Coordinate::internal_default_instance());
}
class SelectDriversRequest::_Internal {
 public:
  static const ::MailTaxi::Coordinate& coordinate(const SelectDriversRequest* msg);
};

const ::MailTaxi::Coordinate&
SelectDriversRequest::_Internal::coordinate(const SelectDriversRequest* msg) {
  return *msg->coordinate_;
}
void SelectDriversRequest::clear_coordinate() {
  if (GetArena() == nullptr && coordinate_ != nullptr) {
    delete coordinate_;
  }
  coordinate_ = nullptr;
}
SelectDriversRequest::SelectDriversRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.SelectDriversRequest)
}
SelectDriversRequest::SelectDriversRequest(const SelectDriversRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_coordinate()) {
    coordinate_ = new ::MailTaxi::Coordinate(*from.coordinate_);
  } else {
    coordinate_ = nullptr;
  }
  ::memcpy(&lvliter_, &from.lvliter_,
    static_cast<size_t>(reinterpret_cast<char*>(&children_) -
    reinterpret_cast<char*>(&lvliter_)) + sizeof(children_));
  // @@protoc_insertion_point(copy_constructor:MailTaxi.SelectDriversRequest)
}

void SelectDriversRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SelectDriversRequest_GeoIndex_2eproto.base);
  ::memset(&coordinate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&children_) -
      reinterpret_cast<char*>(&coordinate_)) + sizeof(children_));
}

SelectDriversRequest::~SelectDriversRequest() {
  // @@protoc_insertion_point(destructor:MailTaxi.SelectDriversRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SelectDriversRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete coordinate_;
}

void SelectDriversRequest::ArenaDtor(void* object) {
  SelectDriversRequest* _this = reinterpret_cast< SelectDriversRequest* >(object);
  (void)_this;
}
void SelectDriversRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectDriversRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelectDriversRequest& SelectDriversRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelectDriversRequest_GeoIndex_2eproto.base);
  return *internal_default_instance();
}


void SelectDriversRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.SelectDriversRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && coordinate_ != nullptr) {
    delete coordinate_;
  }
  coordinate_ = nullptr;
  ::memset(&lvliter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&children_) -
      reinterpret_cast<char*>(&lvliter_)) + sizeof(children_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectDriversRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MailTaxi.Coordinate coordinate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coordinate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool animals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          animals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool children = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          children_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lvlIter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lvliter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectDriversRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.SelectDriversRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MailTaxi.Coordinate coordinate = 1;
  if (this->has_coordinate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::coordinate(this), target, stream);
  }

  // bool animals = 2;
  if (this->animals() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_animals(), target);
  }

  // bool children = 3;
  if (this->children() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_children(), target);
  }

  // uint64 lvlIter = 4;
  if (this->lvliter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_lvliter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.SelectDriversRequest)
  return target;
}

size_t SelectDriversRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.SelectDriversRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MailTaxi.Coordinate coordinate = 1;
  if (this->has_coordinate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coordinate_);
  }

  // uint64 lvlIter = 4;
  if (this->lvliter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lvliter());
  }

  // bool animals = 2;
  if (this->animals() != 0) {
    total_size += 1 + 1;
  }

  // bool children = 3;
  if (this->children() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectDriversRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.SelectDriversRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectDriversRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SelectDriversRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.SelectDriversRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.SelectDriversRequest)
    MergeFrom(*source);
  }
}

void SelectDriversRequest::MergeFrom(const SelectDriversRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.SelectDriversRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_coordinate()) {
    _internal_mutable_coordinate()->::MailTaxi::Coordinate::MergeFrom(from._internal_coordinate());
  }
  if (from.lvliter() != 0) {
    _internal_set_lvliter(from._internal_lvliter());
  }
  if (from.animals() != 0) {
    _internal_set_animals(from._internal_animals());
  }
  if (from.children() != 0) {
    _internal_set_children(from._internal_children());
  }
}

void SelectDriversRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.SelectDriversRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectDriversRequest::CopyFrom(const SelectDriversRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.SelectDriversRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectDriversRequest::IsInitialized() const {
  return true;
}

void SelectDriversRequest::InternalSwap(SelectDriversRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectDriversRequest, children_)
      + sizeof(SelectDriversRequest::children_)
      - PROTOBUF_FIELD_OFFSET(SelectDriversRequest, coordinate_)>(
          reinterpret_cast<char*>(&coordinate_),
          reinterpret_cast<char*>(&other->coordinate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectDriversRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SelectDriversResponse::InitAsDefaultInstance() {
}
class SelectDriversResponse::_Internal {
 public:
};

void SelectDriversResponse::clear_drivers() {
  drivers_.Clear();
}
void SelectDriversResponse::clear_drivercoordinates() {
  drivercoordinates_.Clear();
}
SelectDriversResponse::SelectDriversResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  driverid_(arena),
  drivers_(arena),
  drivercoordinates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.SelectDriversResponse)
}
SelectDriversResponse::SelectDriversResponse(const SelectDriversResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      driverid_(from.driverid_),
      drivers_(from.drivers_),
      drivercoordinates_(from.drivercoordinates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MailTaxi.SelectDriversResponse)
}

void SelectDriversResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SelectDriversResponse_GeoIndex_2eproto.base);
}

SelectDriversResponse::~SelectDriversResponse() {
  // @@protoc_insertion_point(destructor:MailTaxi.SelectDriversResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SelectDriversResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SelectDriversResponse::ArenaDtor(void* object) {
  SelectDriversResponse* _this = reinterpret_cast< SelectDriversResponse* >(object);
  (void)_this;
}
void SelectDriversResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectDriversResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelectDriversResponse& SelectDriversResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelectDriversResponse_GeoIndex_2eproto.base);
  return *internal_default_instance();
}


void SelectDriversResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.SelectDriversResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  driverid_.Clear();
  drivers_.Clear();
  drivercoordinates_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectDriversResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 driverId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_driverid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_driverid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MailTaxi.Driver drivers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drivers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .MailTaxi.Coordinate driverCoordinates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drivercoordinates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectDriversResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.SelectDriversResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 driverId = 1;
  {
    int byte_size = _driverid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_driverid(), byte_size, target);
    }
  }

  // repeated .MailTaxi.Driver drivers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drivers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_drivers(i), target, stream);
  }

  // repeated .MailTaxi.Coordinate driverCoordinates = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drivercoordinates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_drivercoordinates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.SelectDriversResponse)
  return target;
}

size_t SelectDriversResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.SelectDriversResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 driverId = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->driverid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _driverid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .MailTaxi.Driver drivers = 2;
  total_size += 1UL * this->_internal_drivers_size();
  for (const auto& msg : this->drivers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .MailTaxi.Coordinate driverCoordinates = 3;
  total_size += 1UL * this->_internal_drivercoordinates_size();
  for (const auto& msg : this->drivercoordinates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectDriversResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.SelectDriversResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectDriversResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SelectDriversResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.SelectDriversResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.SelectDriversResponse)
    MergeFrom(*source);
  }
}

void SelectDriversResponse::MergeFrom(const SelectDriversResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.SelectDriversResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  driverid_.MergeFrom(from.driverid_);
  drivers_.MergeFrom(from.drivers_);
  drivercoordinates_.MergeFrom(from.drivercoordinates_);
}

void SelectDriversResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.SelectDriversResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectDriversResponse::CopyFrom(const SelectDriversResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.SelectDriversResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectDriversResponse::IsInitialized() const {
  return true;
}

void SelectDriversResponse::InternalSwap(SelectDriversResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  driverid_.InternalSwap(&other->driverid_);
  drivers_.InternalSwap(&other->drivers_);
  drivercoordinates_.InternalSwap(&other->drivercoordinates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectDriversResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveDriverRequest::InitAsDefaultInstance() {
  ::MailTaxi::_MoveDriverRequest_default_instance_._instance.get_mutable()->coordinate_ = const_cast< ::MailTaxi::Coordinate*>(
      ::MailTaxi::Coordinate::internal_default_instance());
}
class MoveDriverRequest::_Internal {
 public:
  static const ::MailTaxi::Coordinate& coordinate(const MoveDriverRequest* msg);
};

const ::MailTaxi::Coordinate&
MoveDriverRequest::_Internal::coordinate(const MoveDriverRequest* msg) {
  return *msg->coordinate_;
}
void MoveDriverRequest::clear_coordinate() {
  if (GetArena() == nullptr && coordinate_ != nullptr) {
    delete coordinate_;
  }
  coordinate_ = nullptr;
}
MoveDriverRequest::MoveDriverRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.MoveDriverRequest)
}
MoveDriverRequest::MoveDriverRequest(const MoveDriverRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_coordinate()) {
    coordinate_ = new ::MailTaxi::Coordinate(*from.coordinate_);
  } else {
    coordinate_ = nullptr;
  }
  driverid_ = from.driverid_;
  // @@protoc_insertion_point(copy_constructor:MailTaxi.MoveDriverRequest)
}

void MoveDriverRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveDriverRequest_GeoIndex_2eproto.base);
  ::memset(&coordinate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&driverid_) -
      reinterpret_cast<char*>(&coordinate_)) + sizeof(driverid_));
}

MoveDriverRequest::~MoveDriverRequest() {
  // @@protoc_insertion_point(destructor:MailTaxi.MoveDriverRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveDriverRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete coordinate_;
}

void MoveDriverRequest::ArenaDtor(void* object) {
  MoveDriverRequest* _this = reinterpret_cast< MoveDriverRequest* >(object);
  (void)_this;
}
void MoveDriverRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveDriverRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveDriverRequest& MoveDriverRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveDriverRequest_GeoIndex_2eproto.base);
  return *internal_default_instance();
}


void MoveDriverRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.MoveDriverRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && coordinate_ != nullptr) {
    delete coordinate_;
  }
  coordinate_ = nullptr;
  driverid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveDriverRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 driverId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          driverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MailTaxi.Coordinate coordinate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coordinate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveDriverRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.MoveDriverRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 driverId = 1;
  if (this->driverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_driverid(), target);
  }

  // .MailTaxi.Coordinate coordinate = 2;
  if (this->has_coordinate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::coordinate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.MoveDriverRequest)
  return target;
}

size_t MoveDriverRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.MoveDriverRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MailTaxi.Coordinate coordinate = 2;
  if (this->has_coordinate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coordinate_);
  }

  // uint64 driverId = 1;
  if (this->driverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_driverid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveDriverRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.MoveDriverRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveDriverRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveDriverRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.MoveDriverRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.MoveDriverRequest)
    MergeFrom(*source);
  }
}

void MoveDriverRequest::MergeFrom(const MoveDriverRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.MoveDriverRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_coordinate()) {
    _internal_mutable_coordinate()->::MailTaxi::Coordinate::MergeFrom(from._internal_coordinate());
  }
  if (from.driverid() != 0) {
    _internal_set_driverid(from._internal_driverid());
  }
}

void MoveDriverRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.MoveDriverRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveDriverRequest::CopyFrom(const MoveDriverRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.MoveDriverRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveDriverRequest::IsInitialized() const {
  return true;
}

void MoveDriverRequest::InternalSwap(MoveDriverRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveDriverRequest, driverid_)
      + sizeof(MoveDriverRequest::driverid_)
      - PROTOBUF_FIELD_OFFSET(MoveDriverRequest, coordinate_)>(
          reinterpret_cast<char*>(&coordinate_),
          reinterpret_cast<char*>(&other->coordinate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveDriverRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveDriverResponse::InitAsDefaultInstance() {
}
class MoveDriverResponse::_Internal {
 public:
};

MoveDriverResponse::MoveDriverResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.MoveDriverResponse)
}
MoveDriverResponse::MoveDriverResponse(const MoveDriverResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  driverfound_ = from.driverfound_;
  // @@protoc_insertion_point(copy_constructor:MailTaxi.MoveDriverResponse)
}

void MoveDriverResponse::SharedCtor() {
  driverfound_ = false;
}

MoveDriverResponse::~MoveDriverResponse() {
  // @@protoc_insertion_point(destructor:MailTaxi.MoveDriverResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveDriverResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MoveDriverResponse::ArenaDtor(void* object) {
  MoveDriverResponse* _this = reinterpret_cast< MoveDriverResponse* >(object);
  (void)_this;
}
void MoveDriverResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveDriverResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveDriverResponse& MoveDriverResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveDriverResponse_GeoIndex_2eproto.base);
  return *internal_default_instance();
}


void MoveDriverResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.MoveDriverResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  driverfound_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveDriverResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool driverFound = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          driverfound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveDriverResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.MoveDriverResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool driverFound = 1;
  if (this->driverfound() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_driverfound(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.MoveDriverResponse)
  return target;
}

size_t MoveDriverResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.MoveDriverResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool driverFound = 1;
  if (this->driverfound() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveDriverResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.MoveDriverResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveDriverResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveDriverResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.MoveDriverResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.MoveDriverResponse)
    MergeFrom(*source);
  }
}

void MoveDriverResponse::MergeFrom(const MoveDriverResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.MoveDriverResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.driverfound() != 0) {
    _internal_set_driverfound(from._internal_driverfound());
  }
}

void MoveDriverResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.MoveDriverResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveDriverResponse::CopyFrom(const MoveDriverResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.MoveDriverResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveDriverResponse::IsInitialized() const {
  return true;
}

void MoveDriverResponse::InternalSwap(MoveDriverResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(driverfound_, other->driverfound_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveDriverResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveDriverRequest::InitAsDefaultInstance() {
}
class RemoveDriverRequest::_Internal {
 public:
};

RemoveDriverRequest::RemoveDriverRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.RemoveDriverRequest)
}
RemoveDriverRequest::RemoveDriverRequest(const RemoveDriverRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  driverid_ = from.driverid_;
  // @@protoc_insertion_point(copy_constructor:MailTaxi.RemoveDriverRequest)
}

void RemoveDriverRequest::SharedCtor() {
  driverid_ = PROTOBUF_ULONGLONG(0);
}

RemoveDriverRequest::~RemoveDriverRequest() {
  // @@protoc_insertion_point(destructor:MailTaxi.RemoveDriverRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveDriverRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemoveDriverRequest::ArenaDtor(void* object) {
  RemoveDriverRequest* _this = reinterpret_cast< RemoveDriverRequest* >(object);
  (void)_this;
}
void RemoveDriverRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveDriverRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveDriverRequest& RemoveDriverRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveDriverRequest_GeoIndex_2eproto.base);
  return *internal_default_instance();
}


void RemoveDriverRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.RemoveDriverRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  driverid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveDriverRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 driverId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          driverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveDriverRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.RemoveDriverRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 driverId = 1;
  if (this->driverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_driverid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.RemoveDriverRequest)
  return target;
}

size_t RemoveDriverRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.RemoveDriverRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 driverId = 1;
  if (this->driverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_driverid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveDriverRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.RemoveDriverRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveDriverRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveDriverRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.RemoveDriverRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.RemoveDriverRequest)
    MergeFrom(*source);
  }
}

void RemoveDriverRequest::MergeFrom(const RemoveDriverRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.RemoveDriverRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.driverid() != 0) {
    _internal_set_driverid(from._internal_driverid());
  }
}

void RemoveDriverRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.RemoveDriverRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveDriverRequest::CopyFrom(const RemoveDriverRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.RemoveDriverRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveDriverRequest::IsInitialized() const {
  return true;
}

void RemoveDriverRequest::InternalSwap(RemoveDriverRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(driverid_, other->driverid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveDriverRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveDriverResponse::InitAsDefaultInstance() {
}
class RemoveDriverResponse::_Internal {
 public:
};

RemoveDriverResponse::RemoveDriverResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.RemoveDriverResponse)
}
RemoveDriverResponse::RemoveDriverResponse(const RemoveDriverResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  driverfound_ = from.driverfound_;
  // @@protoc_insertion_point(copy_constructor:MailTaxi.RemoveDriverResponse)
}

void RemoveDriverResponse::SharedCtor() {
  driverfound_ = false;
}

RemoveDriverResponse::~RemoveDriverResponse() {
  // @@protoc_insertion_point(destructor:MailTaxi.RemoveDriverResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveDriverResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemoveDriverResponse::ArenaDtor(void* object) {
  RemoveDriverResponse* _this = reinterpret_cast< RemoveDriverResponse* >(object);
  (void)_this;
}
void RemoveDriverResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveDriverResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveDriverResponse& RemoveDriverResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveDriverResponse_GeoIndex_2eproto.base);
  return *internal_default_instance();
}


void RemoveDriverResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.RemoveDriverResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  driverfound_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveDriverResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool driverFound = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          driverfound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveDriverResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.RemoveDriverResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool driverFound = 1;
  if (this->driverfound() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_driverfound(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.RemoveDriverResponse)
  return target;
}

size_t RemoveDriverResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.RemoveDriverResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool driverFound = 1;
  if (this->driverfound() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveDriverResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.RemoveDriverResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveDriverResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveDriverResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.RemoveDriverResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.RemoveDriverResponse)
    MergeFrom(*source);
  }
}

void RemoveDriverResponse::MergeFrom(const RemoveDriverResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.RemoveDriverResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.driverfound() != 0) {
    _internal_set_driverfound(from._internal_driverfound());
  }
}

void RemoveDriverResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.RemoveDriverResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveDriverResponse::CopyFrom(const RemoveDriverResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.RemoveDriverResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveDriverResponse::IsInitialized() const {
  return true;
}

void RemoveDriverResponse::InternalSwap(RemoveDriverResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(driverfound_, other->driverfound_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveDriverResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace MailTaxi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MailTaxi::RegisterDriverRequest* Arena::CreateMaybeMessage< ::MailTaxi::RegisterDriverRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::RegisterDriverRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MailTaxi::RegisterDriverResponse* Arena::CreateMaybeMessage< ::MailTaxi::RegisterDriverResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::RegisterDriverResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::MailTaxi::SelectDriversRequest* Arena::CreateMaybeMessage< ::MailTaxi::SelectDriversRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::SelectDriversRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MailTaxi::SelectDriversResponse* Arena::CreateMaybeMessage< ::MailTaxi::SelectDriversResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::SelectDriversResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::MailTaxi::MoveDriverRequest* Arena::CreateMaybeMessage< ::MailTaxi::MoveDriverRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::MoveDriverRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MailTaxi::MoveDriverResponse* Arena::CreateMaybeMessage< ::MailTaxi::MoveDriverResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::MoveDriverResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::MailTaxi::RemoveDriverRequest* Arena::CreateMaybeMessage< ::MailTaxi::RemoveDriverRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::RemoveDriverRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MailTaxi::RemoveDriverResponse* Arena::CreateMaybeMessage< ::MailTaxi::RemoveDriverResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::RemoveDriverResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
