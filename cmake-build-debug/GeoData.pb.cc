// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GeoData.proto

#include "GeoData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_GeoData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coordinate_GeoData_2eproto;
namespace MailTaxi {
class CoordinateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Coordinate> _instance;
} _Coordinate_default_instance_;
class OrderLocationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderLocationData> _instance;
} _OrderLocationData_default_instance_;
}  // namespace MailTaxi
static void InitDefaultsscc_info_Coordinate_GeoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_Coordinate_default_instance_;
    new (ptr) ::MailTaxi::Coordinate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::Coordinate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coordinate_GeoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Coordinate_GeoData_2eproto}, {}};

static void InitDefaultsscc_info_OrderLocationData_GeoData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MailTaxi::_OrderLocationData_default_instance_;
    new (ptr) ::MailTaxi::OrderLocationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MailTaxi::OrderLocationData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderLocationData_GeoData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrderLocationData_GeoData_2eproto}, {
      &scc_info_Coordinate_GeoData_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_GeoData_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_GeoData_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_GeoData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_GeoData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::Coordinate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::Coordinate, latitude_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::Coordinate, longitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::OrderLocationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MailTaxi::OrderLocationData, clientaddress_),
  PROTOBUF_FIELD_OFFSET(::MailTaxi::OrderLocationData, destinationaddress_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MailTaxi::Coordinate)},
  { 7, -1, sizeof(::MailTaxi::OrderLocationData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_Coordinate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MailTaxi::_OrderLocationData_default_instance_),
};

const char descriptor_table_protodef_GeoData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rGeoData.proto\022\010MailTaxi\"1\n\nCoordinate\022"
  "\020\n\010latitude\030\001 \001(\001\022\021\n\tlongitude\030\002 \001(\001\"r\n\021"
  "OrderLocationData\022+\n\rclientAddress\030\001 \001(\013"
  "2\024.MailTaxi.Coordinate\0220\n\022DestinationAdd"
  "ress\030\002 \001(\0132\024.MailTaxi.Coordinateb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_GeoData_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_GeoData_2eproto_sccs[2] = {
  &scc_info_Coordinate_GeoData_2eproto.base,
  &scc_info_OrderLocationData_GeoData_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_GeoData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GeoData_2eproto = {
  false, false, descriptor_table_protodef_GeoData_2eproto, "GeoData.proto", 200,
  &descriptor_table_GeoData_2eproto_once, descriptor_table_GeoData_2eproto_sccs, descriptor_table_GeoData_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_GeoData_2eproto::offsets,
  file_level_metadata_GeoData_2eproto, 2, file_level_enum_descriptors_GeoData_2eproto, file_level_service_descriptors_GeoData_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_GeoData_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_GeoData_2eproto)), true);
namespace MailTaxi {

// ===================================================================

void Coordinate::InitAsDefaultInstance() {
}
class Coordinate::_Internal {
 public:
};

Coordinate::Coordinate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.Coordinate)
}
Coordinate::Coordinate(const Coordinate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:MailTaxi.Coordinate)
}

void Coordinate::SharedCtor() {
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
}

Coordinate::~Coordinate() {
  // @@protoc_insertion_point(destructor:MailTaxi.Coordinate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Coordinate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Coordinate::ArenaDtor(void* object) {
  Coordinate* _this = reinterpret_cast< Coordinate* >(object);
  (void)_this;
}
void Coordinate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Coordinate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Coordinate& Coordinate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Coordinate_GeoData_2eproto.base);
  return *internal_default_instance();
}


void Coordinate::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.Coordinate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Coordinate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Coordinate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.Coordinate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // double longitude = 2;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.Coordinate)
  return target;
}

size_t Coordinate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.Coordinate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude = 1;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 2;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Coordinate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.Coordinate)
  GOOGLE_DCHECK_NE(&from, this);
  const Coordinate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Coordinate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.Coordinate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.Coordinate)
    MergeFrom(*source);
  }
}

void Coordinate::MergeFrom(const Coordinate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.Coordinate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
}

void Coordinate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.Coordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coordinate::CopyFrom(const Coordinate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.Coordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coordinate::IsInitialized() const {
  return true;
}

void Coordinate::InternalSwap(Coordinate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Coordinate, longitude_)
      + sizeof(Coordinate::longitude_)
      - PROTOBUF_FIELD_OFFSET(Coordinate, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Coordinate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OrderLocationData::InitAsDefaultInstance() {
  ::MailTaxi::_OrderLocationData_default_instance_._instance.get_mutable()->clientaddress_ = const_cast< ::MailTaxi::Coordinate*>(
      ::MailTaxi::Coordinate::internal_default_instance());
  ::MailTaxi::_OrderLocationData_default_instance_._instance.get_mutable()->destinationaddress_ = const_cast< ::MailTaxi::Coordinate*>(
      ::MailTaxi::Coordinate::internal_default_instance());
}
class OrderLocationData::_Internal {
 public:
  static const ::MailTaxi::Coordinate& clientaddress(const OrderLocationData* msg);
  static const ::MailTaxi::Coordinate& destinationaddress(const OrderLocationData* msg);
};

const ::MailTaxi::Coordinate&
OrderLocationData::_Internal::clientaddress(const OrderLocationData* msg) {
  return *msg->clientaddress_;
}
const ::MailTaxi::Coordinate&
OrderLocationData::_Internal::destinationaddress(const OrderLocationData* msg) {
  return *msg->destinationaddress_;
}
OrderLocationData::OrderLocationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MailTaxi.OrderLocationData)
}
OrderLocationData::OrderLocationData(const OrderLocationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_clientaddress()) {
    clientaddress_ = new ::MailTaxi::Coordinate(*from.clientaddress_);
  } else {
    clientaddress_ = nullptr;
  }
  if (from._internal_has_destinationaddress()) {
    destinationaddress_ = new ::MailTaxi::Coordinate(*from.destinationaddress_);
  } else {
    destinationaddress_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MailTaxi.OrderLocationData)
}

void OrderLocationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderLocationData_GeoData_2eproto.base);
  ::memset(&clientaddress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destinationaddress_) -
      reinterpret_cast<char*>(&clientaddress_)) + sizeof(destinationaddress_));
}

OrderLocationData::~OrderLocationData() {
  // @@protoc_insertion_point(destructor:MailTaxi.OrderLocationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderLocationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete clientaddress_;
  if (this != internal_default_instance()) delete destinationaddress_;
}

void OrderLocationData::ArenaDtor(void* object) {
  OrderLocationData* _this = reinterpret_cast< OrderLocationData* >(object);
  (void)_this;
}
void OrderLocationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderLocationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderLocationData& OrderLocationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderLocationData_GeoData_2eproto.base);
  return *internal_default_instance();
}


void OrderLocationData::Clear() {
// @@protoc_insertion_point(message_clear_start:MailTaxi.OrderLocationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && clientaddress_ != nullptr) {
    delete clientaddress_;
  }
  clientaddress_ = nullptr;
  if (GetArena() == nullptr && destinationaddress_ != nullptr) {
    delete destinationaddress_;
  }
  destinationaddress_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderLocationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MailTaxi.Coordinate clientAddress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_clientaddress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MailTaxi.Coordinate DestinationAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_destinationaddress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderLocationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailTaxi.OrderLocationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MailTaxi.Coordinate clientAddress = 1;
  if (this->has_clientaddress()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::clientaddress(this), target, stream);
  }

  // .MailTaxi.Coordinate DestinationAddress = 2;
  if (this->has_destinationaddress()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::destinationaddress(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailTaxi.OrderLocationData)
  return target;
}

size_t OrderLocationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailTaxi.OrderLocationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MailTaxi.Coordinate clientAddress = 1;
  if (this->has_clientaddress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clientaddress_);
  }

  // .MailTaxi.Coordinate DestinationAddress = 2;
  if (this->has_destinationaddress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destinationaddress_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderLocationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailTaxi.OrderLocationData)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderLocationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderLocationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailTaxi.OrderLocationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailTaxi.OrderLocationData)
    MergeFrom(*source);
  }
}

void OrderLocationData::MergeFrom(const OrderLocationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailTaxi.OrderLocationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_clientaddress()) {
    _internal_mutable_clientaddress()->::MailTaxi::Coordinate::MergeFrom(from._internal_clientaddress());
  }
  if (from.has_destinationaddress()) {
    _internal_mutable_destinationaddress()->::MailTaxi::Coordinate::MergeFrom(from._internal_destinationaddress());
  }
}

void OrderLocationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailTaxi.OrderLocationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderLocationData::CopyFrom(const OrderLocationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailTaxi.OrderLocationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderLocationData::IsInitialized() const {
  return true;
}

void OrderLocationData::InternalSwap(OrderLocationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderLocationData, destinationaddress_)
      + sizeof(OrderLocationData::destinationaddress_)
      - PROTOBUF_FIELD_OFFSET(OrderLocationData, clientaddress_)>(
          reinterpret_cast<char*>(&clientaddress_),
          reinterpret_cast<char*>(&other->clientaddress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderLocationData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace MailTaxi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MailTaxi::Coordinate* Arena::CreateMaybeMessage< ::MailTaxi::Coordinate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::Coordinate >(arena);
}
template<> PROTOBUF_NOINLINE ::MailTaxi::OrderLocationData* Arena::CreateMaybeMessage< ::MailTaxi::OrderLocationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailTaxi::OrderLocationData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
